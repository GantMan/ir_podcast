Hey, there, I'm Todd Worth, I am CEO and co-founder of Infinite Red, along with Ken and Jamon here. This is my third business. This is a traditional business, meaning it's not investor backed. My first business was also similar to this, and my middle business was a venture capital backed business. So, I went through all that fun Silicon Valley interviews with the VCs that we get to see on HBO. I've been a developer and I did some design as well for the last 22 years. So, I spent most of my time in the Bay Area working at various startups, some enterprises and that kind of stuff.
I'm Ken Miller, I'm the CTO and founder. I've mostly done startups in my career. A whole long string of venture-backed startups and that's what convinced me that I wanted to do something different this time.
I'm Jamon Holmgren and I'm the Chief Operating Officer here, and the other co-founder here. I started my business in 2005 and some variation of that has persisted all the way to today, obviously with the merger that we'll probably talk about at some point in this podcast with Todd and Ken. But, I've been coding since I was 12 but really professionally since then, since 2005. So, 13 years now.
How did the three of you meet?
Actually, I met Ken when he did a phone interview for me about 10 years ago. Ken was my boss at one point. We worked together at a company called Mamapedia / Mamasource. So, I met him on the phone. He asked me a bunch of very tough technical questions. That was interesting, and then we had an interview, at which he sat behind me, over my shoulder and watched me program. That wasn't uncomfortable at all.
Yeah, he's never let me forget that.
And I met Todd and subsequently Ken  I think in person we met in 2014 at a conference down in San Francisco, Fort Mason. We were all three of us were speaking at conferences about iOS development. Todd and I had kind of heard of each other, maybe done a little bit of communication at some point.
We had been chatting at that point because we both  you did digs at me, and your speech, and my speech came a couple of people later, and I digged back at you and we wouldn't have done that if we hadn't already been chatting a lot.
Some friendly banter. We had kind of hit it off right away, which was kind of cool. Then we ended up a little bit later collaborating on some open source work, which was really fun.
Yeah, I do believe I won that banter war, during that 2014 conference.
The jury's still out.
I got more laughs.
So, you all get together and you all meet and you all have familiarity with each other. Why merge companies and form one company?
That's a great question. That was a fairly long process. Jamon and I started knowing each other pretty well in the particular tech stack that we were all in. The three of us had very popular open source libraries.
That was called RubyMotion back in the day. It was an iOS framework and since we were all Ruby developers it kind of brought us in.
Correct. We worked with each other in the industry in our local little culture. Not local physically, but meaning in the RubyMotion community. And then Jamon and I just talked a lot. We chatted a lot on Slack or whatever it was at that time, and we just got to know each other pretty well. Then what happened was in an industry where you're doing client work, it's very roller coaster-ish often, which means you're either slow or you're really busy. When that happens, after a while you start looking for partners who can help shave off the high and low points. We started doing with ClearSight Studio, which is Jamon's company, and they were helping us work on some projects when we were a little too busy.
Yeah, and then we ended up competing on one project, which was  this industry is kind of interesting because most of the time you don't end up competing directly with people you know. There's enough work to go around that people tend not to shop around a ton. But, we ended up competing head-to-head on a project and both of us agreed that we didn't really like competing against each other. We would rather work together, which was kind of cool, and what was interesting was, Todd's the glue guy here. I mean, he's a guy that kind of brought everybody in. I didn't really know Ken. I'd met him at Inspect briefly, talked to him a little bit about 
Inspect was a 2014 conference we spoke at.
Yeah, that was the one in Fort Mason there. I got to know Ken a little bit later when Todd invited me down to San Francisco.
It's a little funny because of that dynamic that those two knew each other, but I was a little apprehensive when we started talking about merging. Because Todd and I had a pretty good dynamic. I was a little worried that those two would outvote me, since they were both a little more front end than me. But, we find when we disagree, it's more often Jamon and I are the ones who are in agreement.
Knowing you now Ken, I don't know how you ever agreed to the merger.
Yeah, we did work well together, which mainly consists of me telling bad jokes and Ken rolling his eyes.
This is true.
It's still how we work together.
That is true, and Ken is absolutely right, most often it's Ken and Jamon voting against me.
That's fine, though.
And to be clear, we always have kind of a consensus process, so it's not like we have a vote and one person walks away unhappy. It's really more like we just keep at it until we can find the place that we all agree on.
Yeah, totally.
Yeah, I'm technically the CEO of the company but we're actually all three have equal power and we run the company as basically a council of elders. It's not just us three, we have some other people on the team that also help us make decisions, plus the whole team also helps us makes a lot of decisions. This system is chaotic. It's like democracy, it's messy and chaotic but it's the best thing we have. It does sometimes require us to vigorously debate each other before we get consensus, but I think it works out really well.
One of the things that I think we're gonna be able to delve into in this podcast that will be interesting to the listeners, is some of the things that we've learned being more of a council of elders, like Todd said. So, this sounds very kind of self reflective, here we're kind of talking about how we met and how we started the company. But I think it's interesting background. It kind of sets the stage for why we operate the way that we do. What has worked, what hasn't worked. I think it'll be an interesting aspect of this podcast.
Yeah, there's a lot more to the story of our merge, of course. It was over a long period of time. Maybe we can talk about that more in detail at some point.
What are the benefits of having three founders? Because there's  oftentimes I imagine that there's one, so you have that one person view of the world, but now you have three people and you have to come to consensus.
Well, I can speak to this probably because I did run my own company as a sole founder for 10 years. And certainly being by yourself has certain advantages because you can kind of pull the trigger and say, "Okay, we're gonna do this. We're gonna shift direction. We're gonna go this direction." And you can do it very quickly. I'm not very risk averse, I just kind of like dive right into things as Todd and Ken can attest.
That's another way of saying, "There's a China shop, no need to open the door, let's go through it."
Let's go right through the door. That's me. It allowed for certain really great things in my company, like being able to go from, hey, we're a Ruby on Rails shop to we do iOS apps, never having done one, but yeah, sure, we do them, and jumping right into it.
Had some downsides, too. Being on a wild ride like that is very stressful to most personalities, and I had 12 people with me. And it wasn't just me. Not to mention my family. So, I can tell you that the difference, the main difference, is that, it forces me to slow down a little bit. It allows me to kind of lean on the strengths of Ken and Todd, which I've learned over the past two and a half years, three years really, they're very strong in certain areas that I'm not. Honestly, I don't know at this point what I would do without that. It's really great to be able to say, "Okay, Todd, what do you think about this particular issue, because it has to do with team." Or something like that, something he's really good at. Or Ken, for strategy and kind of understanding the deeper implications of what we're looking at doing.
So, it allows you to kind of add additional strengths to the leadership, to the ownership team without necessarily adding weaknesses because you can kind of identify what those weaknesses are, and say, "Okay, this is a weakness of Jamon. Let's avoid going down that path." Let's do the things that I am good at instead.
Yeah, I agree with that. Jamon also is our engine. He keeps on going and pushing and going and pushing and going, pushing. So, that's one of his main strengths that he brought.
And to be honest, that was a big factor in deciding to merge. Seeing how he just has this natural energy and productivity, that Todd and I are not as much that way. So we saw it as a pretty natural complementarity.
To answer your specific question, having multiple people. Basically all three of us have two other people we can't tell exactly what to do. We have to convince them to do what they do, and I'm a big believer that the best leaders are reluctant leaders, and I would consider myself this. I think I'm a pretty decent leader. I certainly work hard at it, but I don't particularly  it's not like something I seek or particularly like per se. The reason I think reluctant leaders are better is because they don't really enjoy the power like enthusiastic leaders do. So, because of that I'm perfectly happy to do things in consensus and that kind of stuff. All three of us can and have in the past led individually.
So, what about the challenges? You've mentioned a lot of benefits but what kind of challenges present itself when you have to convince two other people?
Sometimes there's yelling. Not too often but it's happened. Jamon came up with something  I don't know, I'm sure you didn't come up with that but Jamon's company, they did something where they have a gafo, which is give a frick
G-A-F-O.
But basically this system works really well because a lot of times if you're discussing any subject and your job is to add your opinion to it, whether you're particularly interested in that subject or not, you do. And a lot of times people argue with each other over things that one of them doesn't really care about and they're arguing as if both of them have equal degrees of their opinion. So, what we'll often do is say, "What's your gafo on this?," which is one to 10, and if I'm arguing, not arguing, but if I'm expressing my opinion on a particular subject and Jamon says "What's your gafo in this?", I'd say a two, and his is a nine, then Jamon automatically gets that.
Yeah. And what you find is people don't really abuse it. Like, most of the time you find out that two people are arguing over something that they both have a two or a three, versus once in a while you'll get a situation where both are a nine or a 10. In that case you know that you're dealing with something really important and it actually, even just saying that, like we both really, really care about this, is still an aid in doing this. It actually came from an article, I don't remember who wrote it but we can put it in the show notes, Chris. I'll give it to you after the show and we can put the link to the article in the show notes.
Just to give you an example, I brought up the other day that I deserve a much, much larger salary. Now, I had a high gafo on this, about a 10. And it turns out Ken and Jamon both had a one. So, I won. And now I have twice the salary. It's a good system.
I was not informed of this event.
This may or may not have happened only in my mind. I rarely can tell.
Has there ever been a moment where the gafo on all three of you was very high?
And, in that case what happens?
We have a very large closet where we keep the dead horse, and since we can't agree on that and there's lots of vigorous debate we bring that dead horse out and beat it regularly. Which is fine. That doesn't happen too often, to be honest, but we do have some things where it keeps coming up over and over again.
We have had some pretty heated conversations, sometimes, and I'm not gonna call it a disadvantage of having three people, because I actually don't think that it is. So, I'm personally fairly risk averse, and tend to sort of make decisions cautiously. So, for me, having three people, and we can hash this out, actually makes it easier for me to make decisions with more confidence, but sort of ironically. Right? Because, having sounding boards whose perspectives I know will be different and yet exist in the context of some shared values, from my point of view that's pretty much unalloyed positive. Even if it doesn't mean that there's a few uncomfortable conversations.
So, Ken, how do you deal with uncomfortable conversations and disagreements that inevitably happen?
Well, I think the emphasis there is on relationship building and after care, as it were. We treat the tripartite relationship as one of the most important things that we can work on. So, we make a point to meet in person more regularly than the whole team meets. We have founders' meetings on Zoom several times a week. Sometimes those meetings are just kind of chatting about the news of the world or something like that. I mean, often there's plenty of business but we also make some time to just shoot the shit, as it were. That creates the container in which that happens.
So, even if, in the heat of the moment, as people do, you might forget that these people are on your side. There's that container to return to, so that when the fight is over and when the sort of tempers have died down we can come back and say, "Hey, you know what? I get where you're coming from." We're all on the same side here and we can kind of take that and look through the ashes for the refined bits of ore that we wanted to take out of that conversation. That's pretty much how it always happens.
One of the other things that we do is, we know that if things are starting to get heated in Slack, because we are a remote distributed company, and we use Slack a ton, if things are starting to get heated in Slack, we're supposed to increase the bandwidth, which means essentially go into Zoom, get face to face, look each other in the eye and talk. We don't always do that. There are situations where we look back and we say, "You know what? We violated our rule there where we were supposed to go to Zoom and we didn't do it."
That actually causes quite a few  not quite a few, but I would say a majority of our intense arguments came because we didn't switch out of Slack into Zoom, which is what we use for our video calls, which I highly, highly, highly recommend over the rest of the crap out there.
One show note for the audience, if you're listening, if you feel like you have to look up many of the words Ken says, don't worry. I do that all the time.
Before I met Ken, Todd told me, "Don't worry if you feel dumb. He talks like he swallowed an encyclopedia."
Which is great. We love Ken just the way he is, but 
I don't know if people know this, but Ken went to Harvard. Todd and I did not go to Harvard.
I liked how you phrased that. I will now say, I am Todd, I did not go to Harvard, which places me much higher than what I actually did.
So, how do you think the relationship that you've strived to continually build as the trio affects the greater culture of Infinite Red?
I think it's paramount. When you get to a certain size, well, even in smaller, but especially when you get to a certain size, the entire team has just as much power to set the culture as we three do. Ken said it really well that basically we're like a black hole, where we kind of set the culture and we pull the team in and they orbit around and if we put in a little extra effort we can pull them in tighter to our culture, but ultimately it's not a destination. We simply pull them in a direction. So, the way we interact with each other, the way we interact with everyone else, and the way we interact, really, in public, I think completely sets the tone for everyone else.
I'd say we pay more attention to emotions than your typical tech company founders. In terms of like the whole health of the organization. We talk about feelings. It comes up in the work we do in design and that sort of thing, but we certainly value intellect and litigal ability very highly, but we also will check in with, like, "Well, how does this feel to you?" Like, "How does that land?" How does it " right? And we value the subjective and emotional as coequal with the intellectual.
And that probably doesn't make us unique but it is a little unusual.
I think to the degree we do it, it's fairly unique and that stems out of some decisions that we made early on in this partnership. One was obviously what we talked about before, that the biggest existential threat that we face is that us three, Todd, Ken, and I, is that we would have a falling out. And then coming out of that is we have to be talking about our feelings a lot. We have to be talking about how we're interacting, we have to be thinking about it. We have to really resolve differences because if we don't, we kill the golden goose. It's gone. Beyond that, then we've also made some decisions around what kind of company we wanna be. One of the big things is we wanna be the type of company that we would wanna work at. It's an easy thing to say. It's a much harder thing to do.
I think a lot of people wanna be that, but they don't actually put any effort in. I want to have the body I did when I was 24, but the amount of effort I put in, I have the body I will have when I'm 84.
The short of it is tech bros need not apply. We each have different skills. I'm definitely the heart of the company. Ken's more the brains and Jamon's the muscle of the company. I would say, I don't know if you guys agree with that, but, I talk about feelings more than some people, I'm sure, like.
So, building on that heart, mind and muscle analogy, how do you inspire and empower one another throughout the day and throughout the weeks and the months and the years?
One thing that I think is important is that we understand that we're not always going to have a high level of energy, individually as well as a founder group. We'll have periods of high energy, where we're really pushing hard on something, and then we'll have periods of time where we're kind of coasting a little bit more, and that's okay. That comes out of our decision that we wanna have a company that we would wanna work at, that we can stick around for a long time, maybe that everybody can retire at. This isn't a company that's here for the short term.
I'm super proud of the fact that since we merged and became Infinite Red we've had no one leave. No one's quit. A few people we let go for various specific reasons. But, I'm super proud of that. My specialty is dealing with the team and I do something called management by walking around, which I try to say good morning to everyone.
From HP, right?
I don't know  I saw this elderly gentleman talking about how he did this to his company on YouTube, and that's where I got that term, but I'm sure other people used to we're 26 people plus, some freelancers. I try to talk to everyone at least every couple of days, if it's nothing more than just saying hey and that kind of stuff. I take great pride in that.
However, what I'm not sure I'm good at is things like strategy, and Ken, as you've all noticed, talks a lot less than Jamon and I. But, when he talks about strategy, and truthfully, when he talks about anything, it's pretty gold, and I really pay attention. I know I ran a company for nine years, and I'm not particularly good at the strategy at all. So, I really wouldn't want to do, any company, this company or any company, without Ken and Jamon, to be honest.
That's an interesting point. Todd's our CEO and he doesn't feel like he has to be the strategic mind. A lot of times you think, okay, CEO, has to be like setting the course, leading the way, at the helm. But, it goes to our priorities. Our priorities are our team, and Todd's really great at that. That's our important thing. Strategy, it's a supporting thing. It's not the main thing.
One of our inspirations, I remember Todd talking to me about this, was Richard Branson. He at one point said that your shareholders don't come first. Your customer doesn't come first. Your employees come first. And the reason is, it's their job to take care of everybody else. That ethos kind of starts with us, which is that we take care of each other and make sure that we're supported, right? And we take care of our employees, make sure they're supported, because they're the ones, who, at the end of the day, are taking care of the customer or not. And if the customer's taken care of, then the financial health of the company is taken care of.
In some ways that's a harder way to work. It's much quicker and easier to just sort of feel the customer, okay, yeah, well, we'll do whatever you want, and then take it out on your employees. And that is a very typical way that consultant companies end up.
I think we're gonna do some more talking about that in future episodes, for sure, because that-
We can bookmark that and talk it as a whole topic unto itself.
I didn't mean to cut you off on that, Ken, I just kind of wanted to make a note that that's something that's really core to who we are and-
It really is.
 and we need to do more time than we have right now, but where there's a lot of discussion that needs to happen around that.
It is, but in terms of like  I said that shared values, that container of shared values is also partly what makes this work, and that's one of those values, that taking care of your employees is never bad for business, and it's never bad for your customers.
I would pile on to something Ken said. It is much more difficult. I have a lot of problems. I had a lot of problems as an employee, of leadership, and I still have a lot of problems with leadership. Some people are just literally jerks and they're just sadists, they like to abuse their power and make people miserable. But disregarding those people, in quotation marks, just disregarding those, most leaders fail just because they're just lazy leadership. They take the easy route. The easy route is to make processes and jump on people, and be what we call seagull manager, which is you fly in and you crap all over everything and you fly away.
We're not perfect, we're human, we make mistakes and stuff, and sometimes our team points out mistakes and we try to take it super seriously. But, it takes a constant weekly, if not daily, effort to put your team first. It's not easy but I love it. I love our team. I consider them family, to be honest.
Sometimes talking about clients, they have a problem dealing with clients, that can be nerveracking and I don't look forward to that. I never dread talking, having any meeting or having any conversation with any of the team.
This is also why we haven't added a lot of additional people to Infinite Red. We're 26 right now. We could add a lot of people. We've had the opportunity. We have the work. We have people in some ways beating down the door to work with Infinite Red. We're a consultancy and people wanna work with us because of our reputation. We also have a lot of developers coming to us. Every week I'm getting multiple messages saying, "Hey, do you have any openings there at Infinite Red? I'd love to work with you. I love the ethos. I love what you do." And yet, we're only 26 people.
Plus some freelancers.
Plus some freelancers, for sure. Freelancers is one way that you can kind of increase your capacity without necessarily bringing on a huge commitment. That's nice but they're also very hard to find, as far as reliable ones.
And it's challenging. That's not an easy route.
Right. We've had a few misses on that and 
That's another show.
Yeah, that's another whole topic.
But that's why we're not much larger, is because we wanna grow very purposely and we wanna make sure that we're making the right choices along the way.
We don't wanna grow any faster than our culture can absorb.
I've been at enough startups, and watched them grow from small tight-knit, great culture, and then there gets this point where there's pressure from investors, usually, to grow as fast as possible. And there's a rate at which that happens, that the culture gets overwhelmed and diluted and destroyed, and you can never get it back. So, we're very, very keen to stay out of that trap and grow only as fast as the culture can absorb and as we as leaders can adapt to the increase in scale.
My arms aren't very large and whipping the team all day, it really gets sore. I couldn't handle many more. In all seriousness  I don't think I've ever been all serious 
Never.
 but I'll try. Ken and I, when we first  one of the things, having worked at startups, having owned startups and that kind of stuff, there's nothing against VC, venture capital based startups and investor startups. It's a different type business and it's a very specific business that works very well for certain type businesses. Ken and I enjoyed doing that for a long time. We just got a little tired of it, and we don't have an exit strategy for our company. We always say that our exit strategy is death. We also want a company where people can retire in, whether designers, developers or people in leadership, that kind of stuff.
This is really unusual, by the way. If you talk to other tech companies.
Yeah, and they don't have to switch to management, which isn't moving up. It's a different job. You should be able to be a designer, developer your entire career and become a master and retire. So, long way of saying we're not going anywhere for a very long time. As far as what direction we're going in, I'll let these two talk about that.
I think that kind of flavors the decisions we're making. I'm not a huge fan of making, like, very specific targets way out in the future, because just like building software, it doesn't work very well. You're making your decisions when you have the least amount of information. The further back you can delay decisions, the better, but you really need a framework to make those decisions in. That's the important thing. So, we work on the framework. We work on how do we make decisions when opportunities arise? How do we decide whether to do something, whether to not. I think it's Steve Jobs said that one of his greatest strengths was the ability to say no, and that's important for us, too. But, like Chain React, our React Native conference we had an opportunity to create that, to make that happen. It fit our framework and we went for it. It was a success, and we have the second one coming up here in July.
That's the sort of thing that I think I really focus on, is the framework through which we make decisions. We obviously have some longer term plans, some of which the team knows about, some of which not, but the main thing is that they will look at the decisions we make, and know why we're making the decisions, because of that framework.
Yeah, and if the team doesn't have buy-in or they don't agree, it won't happen, because Jamon, Ken and I aren't gonna do it.
Yeah, we don't do it.
Questions like this are sort of like, on this long car voyage that you're planning to take, when do you plan to turn left? Right? When the road tells us that we should turn left is the answer, right? Jamon happens to be right that it's about setting a framework, it's about having a certain set of values, it's about being prepared for certain kinds of opportunities so that when luck comes our way we can take advantage of it. But we don't have a five-year plan. We don't have a master script for where we're going, and that is very much on purpose.
Well said.
Any closing thoughts?
I would say that Ken's extremely good at making very eloquent remarks on why he didn't do his homework.
It's worked well for me so far.
It's true.
It's actually true.
That's a fact.
I think that what Ken said about our company will also apply in some ways to this podcast. We're not necessarily going to have a very specific thing that we hammer every single time that we release an episode. There will be a little bit of kind of organic turning left and turning right as we go, but we have a framework around this podcast. So, I'm hoping that the listeners got a lot of value out of this. I think that this is gonna be a lot of fun for us, as a founder group, and hopefully they'll join us for the ride here.
I would also like  the reason this podcast came into existence was Jamon was reaching out to new founders or founders that have been around it for a while or entrepreneurs or business owners, and he just said, hey, if you have any questions about that, fire it off, and a lot of people did ask Jamon, and Jamon and Ken and I would discuss it and kind of come with an answer and we'd post it on Twitter. People really seemed to enjoy that. You think you don't have too much to share, but then when you share and people give you a good response, you're like, "Oh, I do have more to share." So, this is a direct result from that, and the reason I bring it up is, I think we're gonna continue doing that, so feel free to reach out on Twitter.
My Twitter handle is @jamonholmgren. Todd's is @twerth, and Ken's is @seriousken. We'll put those in the show notes as well.
Yeah, and Jamon's a great person. He's a great person to reach out to, and the three of us.
Hi, I'm Todd Werth, the CEO and one of the founders of Infinite Red, and I'm located in a very sunny Las Vegas, Nevada.
I'm Ken Miller, I'm CTO of Infinite Red, and I am based in the east bay, the bay area.
I'm Jamon Holmgren, and I am just north of Portland, Oregon in Washington state in Vancouver, Washington, and I am the Chief Operating Officer here at Infinite Red.
Excellent, so let's start with just defining from each of your perspectives what remote work is.
For me, a lot of people think remote work is like working in your spare bedroom, or something like that. Which it often is, it can be. But remote work is really more about the ability to be able to do your work at full capacity kind of in a place other than one centralized office. A lot of companies are built around having an office in an office building. I had a company like that before, where everybody is in physical proximity. But remote work is about being elsewhere, and distributed.
Remote work is not, as Jamon said, working from home. Although, I work from my studio here in my house in Las Vegas. Really remote work is working on whatever you're particularly working on at this time in the most efficient place that is efficient for you. For example, some of our team members work in co-location places, because they enjoy being around other people. They work maybe in coffee shop, or that kind of stuff. Personally, I need pretty quiet environment.
I would actually shift the rhetorical frame around this slightly, and say that for us, work needs to happen someplace where you have the resources you need. And what we're calling remote work is just an acknowledgement that for certain kinds of work, a growing segment that I would say is kind of centered around the tech industry, where being next to the people you're working with physically just doesn't matter. Not that it can't be helpful, but that it's no longer required. To the point that we have started referring to non-remote work as commute work.
Yeah, I love that term.
Meaning instead of saying well there's this normal kind of work where you drive into an office, which we've come to accept as normal. And recognizing that that's actually a phenomenon that's less than 100 years old. It's saying that like there is this thing that developed when you have a car, and before that, the train, where you could live some place that's relatively far away from where you work. Move yourself physically into that office during the day, and then move yourself physically back.
And we're saying let's move the office out to where the people are, instead of moving the people to where the office is. That's really the core for me, right? That it's more to do with do you have the resources you need? Meaning do you have a good internet connection, do you have someplace quiet to work that is conducive to the way that you think? And less about where your body is.
Ken's exactly right. And what we found is that people sort of gravitate to where they work best. One of the things that's a little challenging is this perception that people just kind of slack off, and things like that. But really, people want to work efficiently. They want to find a place where they feel comfortable, like Todd said before, it's quiet. It's not a lot of interruptions.
CHRIS:So when Infinite Red started out, was it a remote company to a certain degree?
It depends on where you start counting. It depends on which of us you're asking-
Yeah, because-
Because we were two companies before we started.
Yes, there was Jamon's company, which he ran for 10 years. They were not remote. Infinite Red, the previous Infinite Red before the merge, and we became the new Infinite Red, we started out as 100% remote company on purpose, and our intention was to remain that way for the life of the company.
Yeah, and it was kind of an interesting transition for us. Because we were not remote for sure, and we were all working in an office here in Vancouver, Washington. It was right about the time that I met Todd, and I don't remember exactly to be honest, whether it was influence from Infinite Red that kind of moved us toward remote, or whether we were  I know that I had some employees asking about it already, so that was certainly a factor. But the other Infinite Red, the original Infinite Red being a model was really helpful to us, for ClearSight, because Todd and I shared a lot of information, and he would tell me about things that he was passionate about, and one of them was obviously remote work. And we were able to start transitioning that way, and by the time the merger happened, we were pretty much all remote, except for me. Because I was building a home, and living with my in-laws. So I didn't really have a great spot to work, so I ended up staying in the office for another year.
Yep. Ken and I originally discussed, I've worked throughout my 20 years of being a software engineer, I've worked in the office full-time. I've worked partially remote, and I've worked 100% remote. I personally feel that in the office full-time, or 100% remote are the two superior options. I don't like the hybrid view for many reasons. So we were very specifically going to be 100% not 99, not 98%, but 100% remote for everyone for all time.
I feel like I should mention something ironic, which actually proves the point a little bit, which is that as we speak, I am in the same room as Todd, which is in his house, and we are here because it's my daughter's spring break, and we just decided to come and visit. But as far as the team is concerned, there's zero difference. They don't care, it doesn't matter, the only hassle is that we had to set up fancy microphones set up in order to make this work. Right?
Which kind of proves the point, right? Which is that when everybody's in their own room, there's actually a lot of things are much simpler.
Yes. We don't discount the benefits that can come from being in the same room sometimes, it's just we don't value it so highly that we're willing to sacrifice everything else on that altar, which is what tends to end up happening in commute-oriented companies.
Ken wrote a really great article on our blog, The Day They Invented Offices. It's a hypothetical conversation between a real estate developer, and a knowledge worker, like an engineer.
It's satire.
And it talks about a world where basically if offices were not invented, people worked remotely by default. But the real estate developer's trying to convince the knowledge worker that they need to change to a commute company. And all of the benefits that that would entail, and all of the costs as well.
Yeah, it's interesting, because when you do that thought experiment, you realize how ridiculous it would be to go from default remote working situation into a commute working situation, because you'd have to build trillions of dollars worth of infrastructure to make it work. So it was fascinating. I do want to say one thing, Ken mentioned that he was sitting in my office, which he is. I feel him breathing down my neck at the moment. Even if, and we actually have a physical office in Vancouver, Washington, which is in the Portland area. Very few people go there.
It's a mailbox with a couple chairs attached.
But sometimes people will go there and work, and anyone on the team is welcome to do that. Or Ken is in a situation. But we have a basic rule where even if you're physically next to someone, we still work the same way. Meaning we don't have a meeting where Ken and I are talking to each other in person, and everyone  All the remote people are second class citizens where they're not seeing our conversation. We're looking at each other, and we're making body motion, that kind of stuff. So we still work as if we're remote, even if we're physically in the same location.
That's really interesting too, I mean what kind of discipline goes into keeping things where everyone can be a part of it, not just defaulting to that person to person conversation when you're in the same room?
I'm in charge of discipline. We tried writing things on the chalkboard many times, it did not work. Detention seemed a little juvenile. So we went to the old classic of cat of nine tails.
Keelhauling.
Yeah. As an escalation.
To answer your question seriously, which I have difficulty doing, there are a lot of difficulties. Fundamentally, they come from the fact that a lot of people have not only never experienced remote work, have never seen it. We're too many generations removed from the 1800's, when almost everyone worked at their house, basically, and their house was downtown. Your parents didn't work that way, your grandparents didn't work  they've never seen it in existence. So they really don't know how it works. Not only they don't know how it works, their family definitely doesn't know how it works. And probably the number one problem we have is family, and friends, local family and friends not respecting that the person's actually working.
One of the tricks I tell people, and it works pretty well, is just tell your family member that your boss is getting mad at you, or your boss wants you to do something. Because even if you're remote, everyone understands the boss. And just throw me under the bus, it's totally fine, and that seems to work. But that's part of the biggest challenge, is family not respecting your space.
I think Todd touched on something really important, and that's that this is actually not that new. That was the default way to work. People didn't commute to work. They worked on a farm.
Maybe they walked down the street, but in most cases, not.
This idea that we have gigantic super highways, and huge transit systems and stuff, just to move people from one location that they could work to another location that they could work for no apparent other reason, it's a little bit mind boggling. Now I understand, I understand why it came to be. Remote tools, which we're not going to talk about much in this episode, but remote tools have not historically been that great, and the experience has been pretty bad. But that's changing, it very much is changing.
The industrial revolution when people started working at factories, and started commuting, and the transportation revolution that facilitated a lot of that. Most of human history, work was not separated from life. Their work life didn't make sense, because you're either relaxing and drinking lemonade, or you're making dinner, or you're sweeping your house, or you're pulling out the potatoes in your backyard, if you're a farmer. The reason we have work life balance now, is because work can be fairly distressing, and you need a break from it.
But typically back then, let's say you're a blacksmith, your shop would be on main street, and your house would be behind your shop, or above your shop. So your children would live within feet of where you worked, and where your spouse worked. Whether your spouse worked in the home, or did other things. So your children would eat all your meals with you, they would go to school, school is probably pretty close if they were older. If they were younger, they would eat your meals with you. They'd be around your work, they would see work going on all the time.
It just wouldn't be work, it would just be normal, for instance, if you're done with your particular task today, and there's a customer coming in who wants something built for their wagon at two, you might hang out with your children, do some housework, or just play games, or whatever. And then when your customer comes in, you go into the shop, and you service that customer. The industrial revolution made it where adults had to start to pretend to work so they didn't get in trouble.
So my six year old daughter had an assignment at school, and one of the questions was where does your parent or guardian go to work? And she wrote, "The gym." Because to her, that's when I left the house, was to go work out at the gym.
That's so awesome.
The phenomenon that you're talking about Todd, where the industrial revolution began this process where people started working out of the home, there was a really good reason for that, which is that it was the beginning of humans having to collaborate in a large scale way on bigger problems than they had had in the past, right? Before that, the only place where you would see really large scale collaboration like that would have been I suppose-
Warfare?
Warfare, yeah. That's the place where people would leave the house, and collaborate in large numbers, that was really it.
Maybe large farms, I don't know, you could kind of consider that. But culminating in the 20th century, where that was the norm for people to go and collaborate in relatively large numbers some place away from their home. It enabled them to solve problems that you couldn't solve without involving that many people. And of course, we don't want to give that up, and so that's what the modern remote telecommuting company does, is it creates this new kind of collaboration layer, and we've been very deliberate about how we construct that.
And I think that's one of the places where companies that kind of dabble with remote tend to fall down, which is that they have all these inherited ways of collaborating that you do when you're in an office together, and some of them don't work anymore. You can't just tap your coworker on the shoulder, you can't just go and like sit next to their screen. You can't all pile into an office on an impromptu basis. So you have to reconstruct habits, technologies, whatever, that can replace those things, and augment them.
And we think that, overall, you end up with a better result having gone through that effort of being deliberate about that. And that in a generation, no one will think about these things anymore, because they will simply be the inherited defaults that people who work in an office together enjoy today. And we sometimes meet in person, right? Once a year we get the whole team together, the executive team comes together more often than that. It's not that we don't value that, but we think of it is as a luxury.
Well, it's not necessarily a luxury perhaps, it's important socialization. So Ken and I actually discussed, we went over a pros and cons, like what's good about working in an office? Or in a cubicle, or in hell? What's good about that? Well, you're around other people, and every answer we came up with that was good was all social. It had nothing to do with actually producing any kind of work product.
And I basically tell people I commute to socialize, as opposed to commuting to work. So instead of commuting to work five days a week, and socializing one of those days in the office at an office party or something, I work remotely, and I commute to the office party once a week. Not our office, but just local friends, and that kind of stuff.
It's kind of a funny thing, but yeah, you want to hang out with your friends, not necessarily just with your coworkers. And that may sound kind of weird, and the environment we are now, where often you do make friends with coworkers, and that's all great. But your social life can be something that is a little more deliberate outside of work.
It's not like we discount the social value of people working together in an office, like I enjoyed that when I did it. But I think you're seeing with the rise of WeWork, and similar places, like just in the last five years I've seen the number of co-working facilities explode. And I think that that's part of the same trend, which is that you can have that experience without having to drive for an hour each way, every day.
One of our team members, Darin Wilson, he works every day out of a co-location place, and he walks for 10 minutes to the co-location area. That for him is the most efficient, he enjoys that, and that works out well. It's a great example of what works for one person doesn't work for others. I would not like that personally. I also don't like listening to music when I work, other people do. When you remote work, if you like to listen to death metal at extremely high volumes, well have at it. It's great, it's wonderful.
Just turn it off before you get on Zoom please.
Yes. So one of the things I think we shouldn't overlook is some of the great benefits of working say in a cubicle. I would probably estimate 99% of all the funny videos, cool things you find on the internet, were created by extremely bored people sitting in a gray cube. I call them employee fattening pins. So the zombies will appreciate this lifestyle. Not that I dislike commute working, I hope I haven't given off that vibe.
Not at all.
How does remote work make a more engaged worker?
You know, you have to work at it. There isn't just this appearance of working, right? The only thing that really surfaces is what you actually do, not what it looks like you're doing in your cubicle, right? And because of that, the only way to tell that you are working is to actually work.
Well to actually produce work product, to be more specific.
Actually produce work product, exactly. And we go to great lengths to try to not tie work specifically to time. Because while an eight hour work day is pretty normal, and generally okay, if there are ways to accomplish your work more efficiently, you should be rewarded for that, and not penalized for that by having to sit in your seat for another two hours. It's more about stripping away the appearance of work, and turning to the actual product.
One of our team members moved from Reno, Nevada, to San Diego, California. She moved over a weekend, Friday she worked, and Monday she worked. From the team's perspective, absolutely nothing had changed. Although, she moved I don't know how many miles that is. Hundreds, tens of miles. So that kind of stuff is uber cool. One of our new team members said, "I'm going to New York for a week, can I still work?" And I said, "I assume you can still work in New York. I haven't been there in a few years, but I imagine they still allow that."
Turns out they do. Strangely. So I'll tell you a personal story of mine. After I eat at lunch, I don't know if it's my digestive system, or whatever, it sucks the energy out of me so bad. When I worked in a smaller place where people trusted me, I would just kind of take a little nap in my chair. When I worked for bigger companies where such things were frowned upon, I would sit there for two hours from say 1 o'clock to 3 o'clock, trying my best to keep my eyes open pretending to work, and sort of reading Facebook. It's just stupid, and I did that when I was 34 years old. It's just stupid to have adults behave in this way, it really is.
Yeah, we don't look at that as some sort of a weakness.
Nowadays, I did made a little bit of fun, that's fine. I really enjoy the siesta. I'll go take literally an hour nap after I eat, and then I come back refreshed, and I get lots of work done. And I tell people, I'm going to take siesta, there's no shame in that whatsoever.
And I think that's important, when the CEO's doing it, it kind of gives people permission to work in the way that is most efficient for them.
Exactly. I personally believe it's super important to have 100% of people remote. The CEO on down. A lot of companies out there that claim to be remote, they're partially remote, and that's fine. I'm glad it works for them. But when you're CEO, and your other executive team have to use all the same tools, remote tools and everything that everyone does, it's not fair, but it's true. Those tools get a lot better. It's true. So if you have the CO sitting in an office, and they don't have to experience the horribleness that is a poly comm conference call, then it's never going to improve.
What are some of the common misconceptions of remote work that you often have to explain, or even defend?
Oh, there's lots. One, you're not really working. That's the biggest thing. Two is that you're probably doing your laundry, playing video games, and other such things that people imagine. Those are the kinds of-
Sometimes you are, I'll get to that.
Well sure, sometimes you are and that's fine. But the biggest one if you're at home, people can bother you. Like my mother, which I love very much, she's funny. She comes to visit, and I've worked remote off and on for a long time, so she should understand this by now. But she'll be like, she'll come in and talk to me. And she'll say, "Oh I know you're working," and I have a separate office, so it's very apparent that you're walking into my office.
And she goes, "I know you're working so that's fine. Finish your work up, and then we'll talk in an hour or so." And I'm like, "Mom, remember," my mom's retired. I go, "Remember when you worked? You had to go there for eight hours? It was like from 9 AM to 5 PM? It's the same for me, it's not exactly the hours, but it's not like one hour." And so bless her heart, she's going to give me an hour to get my work done, and then we can talk about whatever she wants to talk about.
I think one of the misconceptions that's not a misconception is that it can tend to blur your work time and your personal time. Then one of the things that people say that they like about having a commute and an office to go is that their work time is over there, and their personal time is over here. And I wish I could say that that's not an issue with remote work. It is kind of an issue for the reasons that Todd mentions. Right, it takes a certain amount of discipline to set that boundary.
I'm going to make the case that that's not a problem. It is a problem if you hate your work. If you need to like recover from the boiler room that is your work, or the boredom room, or whatever it is that makes your work uncomfortable. That is a problem. I think of this as a feature of remote work, and it echoes what Todd said about it needing to be the CEO on down. Because if it is the CEO on down, the CEO is going to have the same problems that you are. Right? The three of us have the same pressure about when does work begin and end? Are we kind of always working, are we never working? What is that boundary?
And it forces the company to either become a good enough place to work that people want to work, and they're not bothered by the fact that it kind of mixes in with their personal life, or die. Like as the evolutionary pressure on the remote work niche, is that you have to be good communicators. You have to be respectful, and you have more ways that you can be respectful, because you're not having to share as much space with people. You don't have fights over what people put in the damn refrigerator. You don't have fights over who's playing what music, and who put up what offensive poster, or all of these things that come when you're forced into this little box together.
The one I really miss is when someone leaves the company, and everyone kind of looks at each other and says, "Is two minutes too soon to go raid everything out of their office?"
And you see these 50 year old people scrambling around like the hunger games, trying to get the better stapler.
The chair, it's always the chairs and monitors. Those are the real prizes.
Yes, and I've worked for places, like I like a very nice monitor. And I always bring my own, because companies never provide that, typically. I've been told, "Oh, we can't have that because if you have a big monitor, other people will be jealous, and so you can't have that." And I'm like, "Well, okay, I'm going to have it. So either this conversation's escalating, or you have a wonderful lunch."
I think that's something really insightful about this that we'll probably touch on a lot in our podcast, but that is that we're purposely putting these constraints on ourselves that require that we become a better company. That we become a better, we continue to work on culture. We don't have the easy outs that many companies do. And people will look at that and say, "Well, but you can't do that easy out thing that we all do." And we say, "Exactly, we have to do it differently, we have to do it better. We have to work on it." Remote tools are terrible, exactly. We have to go find better remote tools, we have to work on that.
Those constraints are good. They're very good. They're healthy. There's something that forces us to continue to innovate, and to self reflect, and look at how we work. I mean the blurring of the lines between personal and work as Ken said, I totally agree. It's about loving your work. And it brings up some positives too, I mean I just spent two weeks in California. We're not at the stage right now where I necessarily want to take two weeks completely offline. I still want to be somewhat available for Todd and Ken.
But I was able to be on Slack on my phone at various times. Let's say waiting in line at Disneyland, or something like that. And that may sound terrible to some people, but it wasn't a big deal to me. It was totally fine, and I loved that I could actually take two weeks for my family to be away, and enjoying the sun, which we don't get a lot of here.
In a way, it also makes your vacations more enjoyable, if you know that you're not coming back to two weeks of email.
Or things that have fallen apart, or who knows, right, where  yeah.
I love that spin, that's fantastic.
I don't see it as spin-
Not for me, anyway. I think some people might not feel that way.
I understand that.
A lot of people don't, and I am speaking personally here. This is not for everybody, some people totally on the uninstall Slack when they go on vacation, that's fine. For me though, I was on the plane, and I was basically archiving a bunch of emails, and I get into work this morning, and I could hit the ground running, and I'm good to go. What is the real cost of totally disconnecting? The real cost would have been I couldn't take two weeks. I couldn't be away that long. That's what it would have been. I was able to benefit from that, you may only see the downsides, but there's positives there.
And to be clear, this is how it is for us as founders. Right? When it comes to our employees, we pretty much encourage them to mute, or uninstall Slack while they're away.
That's right, that's right.
They don't have as much need to be sort of always on that we do. Yeah, but for us, it's actually  I mean from my point of view, it's a benefit.
But even that, we have some employees that want to travel, and they want to be gone for a couple months. Three months, even. Taking a three month vacation, that's pretty tough, that's pretty tough to do. So with some of them, they may work in the early mornings, or they may work in the late evenings to coincide with their time zone, and then they can be out on a trip for three months. So they are able to continue to be productive during that time.
And that's a perk that Google cannot match, period. That is just something that you cannot do if you work for Google.
Yeah, screw you Google.
Or whomever, right? Any of these companies that expect a physical presence.
We're coming for you, Google.
The point is, so we have one person who doesn't have a permanent home. Right? He moves around pursuing his hobbies, and makes it work. We have other employees who have done exactly what Jamon has said, and they've gone on extended workcations, right? Where they're able to get their work done, and they have the experience of frankly, actually living in another country, as opposed to just being a tourist. And we have high standards for how they get their work done while they're doing that, but because we've had to develop standards that really measure people's impact rather than their face time, it works.
Copyright Apple.
There was a space, you couldn't really hear it when I said it-
Space?
Face.
Face.
So there was a face, space time. Yeah, right, anyway.
Yeah, we talked about people who want to take longer physical trips around, whether it's around the US, around the world, what not, the benefits. But there's a benefit for another set of people, and I would probably consider myself in that group, as well as some of our other team members, and that's people who choose to live rurally.
We have one person who lives really rurally, and he has a lot of land and stuff, and he can have the lifestyle that he enjoys, and still have a very productive and successful career. Myself, I do live in Las Vegas, but I live in rural Las Vegas. I have a little bit of land. It allows me to live in this way, when I used to have to live in San Francisco, which I enjoyed for a long time, but as I got older I wanted to go back to living on the land and stuff. So for people who want to live rurally, or not just the typical urban or suburban lifestyle, it's fantastic.
So when it comes to the client experience of working with a 100% remote company, how do they respond to this way of work?
That's a great question, Chris. Various ways depending on the client. Some clients, that's the way they work, and they love it. Like they see us kindred spirits, that's the way they like to work. Other clients especially if maybe they're more enterprise city type clients and stuff, maybe aren't as familiar with it. We kind of insist on it to be honest, even if the client's local to some or many of our employees, our team. And we just explain it, and we are very articulate in the way we describe how we work.
And sometimes they have to have a little faith in us, but after they work through our process, they probably never seen a remote company that works well. I think our company works as well as I've seen. We work with a few companies who are both I think do a good job like we do. A lot of them do not, and I'm very proud to say that quite a few customers who maybe have part-time remote work started opting our procedures, which is a fantastic compliment, and it makes me proud. Because we do spend a huge amount of time thinking about this stuff, and working on it.
That's actually more common than you think, that we influence our clients in the way that they work.
Can you expand on that Jamon?
When clients come in, and they experience the Infinite Red way of working, and they see the thought and care that we put into it, and how we're all kind of bought into it, and how we also iterate on it, because it's an ongoing process. We don't have it perfect yet, we're continuing to work on it. They see that things get done, that it can be done well, and that they have the flexibility that remote work affords. It's a pretty neat thing to see them working the way that we love to work.
I don't want to digress, but we use Slack quite a bit for chat communication, that sort of thing. We use email next to nothing. But we have a channel we call rollcall, and the channel is very simple. It's just kind of describe where you are, and if you're working or not. It's analogous to walking in the office and saying, "Good morning everyone, gosh my back hurts, I've been at the gym." And it works really, really well, because it's not forced on people, and people really enjoy the back and forth. So let me just go through this morning's rollcall.
One of our team members signed on at 3 AM, and then she went out for breakfast at 6 o'clock. Other people started signing in, one person signed in. It said they laptop issues that they fixed, they explained why. People gave some reactions. Other people just signed in, I said, "Good morning." One person said, "Short break," this is at 9 AM, "Picking up the car from the mechanic." We won't have exactly specific times people have to be working, or available, we want people to be so many hours a day where they can coordinate with other people, have meetings, have work sessions, that kind of stuff. But it's not uncommon people say, "My daughter's having a recital, I'm going to leave after lunch, I'll be back and probably work some this evening."
No client meetings, no one's being impacted by that, great, we all give him thumbs up, we say, "Hope it goes well." No one asked if they can do that, no one says, "Hey Todd, can I go to that?" And then around lunchtime, everyone says they're lunching. They might talk about what they ate, some sort of friendly conversation, and you just kind of get a feeling of your team going about their day. And I will finish this long story up by saying it's kind of fascinating. So one of the people I work a lot with is Gant Laborde, who lives in New Orleans. And we work a lot during the day. And when he comes and visits me physically, or I go to New Orleans and visit him, it doesn't feel like I'm visiting a friend I haven't seen in a while. There isn't a lot of chat about how things have been going, it's nice to see you again.
Because I've seen him every day for hours, and I just saw him this morning. And by see him, I mean interacted with him either in a video call, or on Slack, or whatever. It doesn't feel like I'm just finally meeting him, it's like we're just continuing what we were doing this morning, it's just we happen to physically be in the same space. It's very interesting phenomena.
I find it kind of flabbergasting in a way that companies would care about someone taking a break, or going to pickup their daughter, or having to go pickup the car from the mechanic.
Lazy leadership.
That's exactly right.
I recommend if you're a lazy  for the lazy leaders out there, or the bad leaders, yeah, don't do remote work. Stick with cubicles, make the cubicles as comfortable as possible to get the worst employees so the rest come to us.
It's probably worth talking about people for whom it wouldn't be a good fit. Obviously there's still plenty of jobs out there where physical presence is implicitly required. Anybody who works in retail, anybody who works with their hands, has to actually physically manipulate things. I think our point has always been that there's just not as many of those as people think.
And to be honest, I suspect that over the next 20, 30 years, as robotics and telepresence, and that sort of thing start to really come into their own, that even those sorts of jobs will start to diminish. You already have that even with like medical, the medical field, legal field, things that used to be sort of a high, high physical presence will become more low physical presence.
Surgeons right now are doing surgery with a DaVinci system, both physically, and I think they can do it remotely now. Like they're standing next to it typically, but I think they can do it remotely at the moment.
What's kind of funny about that is my dad owned an excavation company, and he was one of the first people to get a cell phone, because for him, everything was remote. Like he had to be remote, because he was driving his dump truck to the job site, he had to be there working, and he had to do his office work, because he was like the only guy. He didn't have an office, he didn't have someone handling the paperwork, he had to create invoices on the fly and stuff. So in some ways, some of those blue collar jobs had some of these things figured out way before we did.
That's actually a super interesting point. Logistic companies, or shipping, truck drivers and stuff. They've had to deal with this, I don't know how old you all are out there in listening land, but if you remember Nextel phones, with the automatic walkie talkie feature-
They're useful, very useful. Kind of like an analog Slack, really. So yeah, it's fascinating. A lot of the so called blue collar work has had to deal with this for a very long time.
And it's worth mentioning that even for the core of jobs that will always be physical in person, if you took every office out there that didn't need to be an office, and you converted that to a remote job where people can live anywhere, the reduction in pressure on the real estate market, on the transportation system that would ensue, would make life better for everybody.
Right? The people who have to commute can commute, because I mean you have this phenomenon as cities grow, where they'll build a new highway, and for five, 10 years if you're lucky, things are great. Because there's all this extra capacity, but what happens in the meantime, is that further down that highway, developers start cramming new houses in, because suddenly it's a doable commute. And then within that five, 10, maybe 20 years, it's back to the way it was, maybe worse than it was, because now there's even more people trying to cram into this road.
But if you just snap your fingers, and moved all of those offices out so that that knowledge workers, the people who are working with their brains, and with words, and with digital images, and that sort of thing. And they all scatter to the winds, and live where they want to live, and not in Fremont, or wherever it is that they're living to commute to San Francisco. I feel like, right, maybe like I don't think I've ever seen a study like this, but it seems like it would stand to reason at least that the pressure on transportation would reduce to the point that everybody's quality of life would improve. I don't know, we'll see I guess.
Yeah, even when you look at something like a dentist office, which is probably extremely resistant to this sort of thing, there's just the robotics are not there yet. And maybe even if they were the trust isn't there yet, with the general public. But how many other people are in that office that don't need to be drilling on teeth? They could be elsewhere. And you're exactly right, the infrastructure, and it's actually kind of happening in some ways.
You look at some of the high rises in downtown Portland and stuff, people are coming and living in the city because they want to live in the city, and not because it's next to their office. And a lot of these offices are now being converted into apartments and condos, and being kind of near offices, where you can work from your house. And what would cities look like if every job that could be remote was remote?
I mean yeah, can you imagine a world where the city center is the bedroom community, right?
That would be awesome.
Where people live because they want to be next to the cultural opportunities in the city. And the minority of people who actually have to physically work at some job in the city, can live next to their work, because there's just more housing, because like much less of the city is taken over by the kind of white collar workplaces that have been traditional for city centers.
That's actually really interesting to think about.
I imagine somewhere in hell, there is an eight hour bumper to bumper commute, and you're not in a car, but you're literally in a cubicle with a steering wheel.
One of the things that I want to go back and touch on is this idea of leadership, and how remote work isn't for the lazy leader. So let me ask the question of the three of you, how has being 100% remote made you a better leader?
Well, I can speak to my experience going from ClearSight not being remote to being remote. I'm kind of in some ways a forceful personality. I'm kind of a person who likes to move fast, and bring everybody along with him. And in an office, there's actually a sort of almost like a physical component to that. Like the leader's right there, and he's enthusiastic about something. He's moving fast, and he's doing his thing, and he's talking about it where everybody can hear. When I look back at it now, that was sort of lazy leadership. It was. It wasn't necessarily the type of leadership that was people coming along because they were enthusiastic about it, it was more that they were just kind of following the force of nature that was moving that direction.
Now that I'm remote, I don't have those physical cues, verbal cues, things like that, to bring everybody along. And it requires a lot more thought and planning around how to get people on board with concepts, and how to get people moving in the right direction. It's a really interesting thing, and it's not something I've totally figured out yet, but it's something I'm moving toward.
I would say that it has forced me to be more explicit about expectations, since you don't have this inherited set of defaults. You have to say, "This is what we expect from you." It's not, "We expect you to come in the office at nine," it's, "You need to be available to clients during an agreed upon window," for example. Or as we had mentioned before, "Here's our productivity benchmark, and this is what we're looking at." You might have to develop some of those in any kind of company, and you should. But our setup, it exposes any fault lines in your expectations, and you have to address them. As Todd said, like if you want to be a lazy leader, don't do it.
I would pile on what Ken said, you have to be able to measure what people, their work output, their work product. That is not easy, even in industries where it's obvious what their work product is. Say they paint paintings, you can see that they painted a painting. That is probably the most challenging thing, and then there's the emotional part. Where if you can't measure their work product, and you can't see them sitting in a seat, you're just going to have to have faith in them, and get over yourself worrying about it. But it is challenging to make sure that you have a semi-accurate view of who's actually being efficient, and who's not. And just not 100% thing.
That's more on the management side of things. Leadership side of things too is difficult, because getting people to see a vision is much easier when you can just say, "Okay," kind of the Michael Scott thing. "Everybody in the conference room in five minutes." That's a very different thing than what we do.
I think it's challenging, but to be honest, I'm not staying awake at night worrying about those challenges. I find them fairly straightforward, you just have to put effort into it. Keep on walking down that road, and I think it works out really well to be honest. It's not a big deal to me.
You just have to strike the right balance.
There was a tweet last week where basically it said, "During any meeting, you don't have to listen, just at one point you have to comment and say, 'I think the solution to this problem is just striking the right balance', and then everyone in the meeting nods, and you were involved."
Because it's always true.
It's always true.
Yes, so that's a running joke here at Infinite Red, where in the meeting at some point someone says, "We just need to strike the right balance." We all laugh.
Looking into the future, do you see more and more companies adopting remote work?
It's one of our missions, our side missions as a company, to make it more. It's probably other than software engineering, and software design, which is obviously our main focus of our company. Other than that, probably the number one thing that we're interested in promoting in the world is remote work. So I hope the answer is, it's more I don't know, I'm sure Ken and Jamon have some good insight in what they predict.
I think that one of the factors that will influence this is I look at my kids, like generation Z. And they don't know what it's like not to be connected, and they don't know what it's like not to be able to just talk to their cousin via FaceTime, no space, and who lives in South Carolina. This is normal to them, this is a normal thing to them, this is a normal way to live and to work. Well, they don't really work, but just to do things.
We'll fix that.
Obviously for my kids, they're around remote work all the time. But it is a way of life, and I think that you'll also see other things like there are more ways to learn online, versus going to a university and sitting in a classroom. There are plenty of other opportunities for them to get used to this way of doing life. And I think that will have an impact. It may not be moving as quickly as we would like, we would like to see a lot more industries move into being remote work for a variety of reasons. But I think that that is a factor.
I will echo that and say that both my wife and I work from home. And my daughter makes the same face when you say that some people have to like drive to a special place, as when you say that you used to have to come to the TV at a particular time to watch your show. Right? But even before the generational shift, I think it is happening more and more. Ironically, Silicon Valley, which should be at the vanguard of this, is one of the most resistant to the idea.
I think that's partly because they've had so much money flowing through, that they've been able to afford the enormous luxury of moving everybody to this expensive place, and then putting them in an expensive office. And to be honest, for a company that is chasing a multi billion dollar idea, and trying to beat their competitors over the next six months, there's a case to be made for doing that. But I think way, way more of those companies think that they are doing that than actually are.
I actually have a question for you Ken, do you think that this will  you know you said Silicon Valley is resistant to this, and that's a very location based geo fence there. Do you think that the revolution of remote work will happen irrespective of where people are located, but maybe in a different cohort? A different type of people will bring remote work to the forefront more so than a specific place. Let's say for example Detroit, or something, decided it all of a sudden is all remote. That's probably less likely to happen then-
I think that that's one of the key pieces of this, is like it's like it's creating it's own virtual location. That there's a set of people who don't have the same relationship with place, and that sounds really pretentious kind of. But like they just don't think about physical locations in the same way. The cost aspect of it has caused it to grow in more cost sensitive industries than venture backed startups. And it's not that they don't have those, but I think it's also a certain amount of bias on the part of the venture capitalists themselves, and the kind of people that appeal to them. This is my guess, they will crack eventually.
Having worked in Silicon Valley for 20 years, I do love Silicon Valley, and love San Francisco for sure. But when it comes to remote work, they have an inherent bias against it, because when you endure the heavy cost of relocating to Silicon Valley, and you've got your foot into that door, and you're part of that community, anything that would diminish the rewards from that suffering diminishes you. In other words, it's wonderful being there as an engineer. Everyone you meet is engineers, they're all working on interesting projects. There's a real benefit, I think there's other cities too. Especially some secondary cities like Portland, Oregon, or-
Seattle.
Seattle yeah, and Texas.
Austin.
Thank you. Austin, Texas. I think these are up and coming and stuff. And there's still benefits socially to it, but I think a lot of times they resist it because it diminishes their specialness in many ways.
And really when we started Infinite Red, and we decided that this will be a remote company forever, and that this is my third and hopefully last company I build, it allowed me to move back to my home state of Nevada without worrying about my career, and that is an incredibly powerful thing.
Hi, my name is Jamon Holmgren and I'm one of the co-founders of Infinite Red, Chief Operating Officer.
Chris asked what's a difficult project that I've worked on in the past and I think early on when I was first sort of getting outside of just building marketing websites, I took on a project for a social media platform. Of course, this was probably 2009, Facebook was sort of coming into its own and they wanted to build a social media. It was a guy that really didn't understand what social media was. He was on no social media platforms himself. He was an older dude who was annoyed that his daughter-in-law kept inviting him to the Facebook and he did not want to deal with that. So he decided instead that he was going to build his own, so he wouldn't have to join Facebook. It was  it sounds kind of ridiculous and made up, but I swear this was an actual project that we did.
Well, that is my kind of lazy. (laughter) Really, I mean I'm serious. Where you will recreate the site, from scratch, in order to not have one annoying experience.
Ken Miller, CTO/CFO, founder of Infinite Red. I'm trying to think about a hard project. For me, the hardest projects are the ones where you have to keep at for years. A massive, blast through it, kind of hard project is much easier. I've always been a little ADD and I think that some people thrive on that emergency situation, but a long haul where you have to keep at something for a long time is harder. In terms of work technical things, a couple companies ago, we had a very email dependent company and so we had to get a huge number of emails sent in a very narrow window every day. That was a very long back and forth process because you have to keep up with the amount that you are sending out physically, you have to manage the deliverability, you have to monitor your changes and make sure a small change in your rendering doesn't completely blow up your delivery window. And so the process of managing that over time definitely taught me a lot about how you set something up so you can do it over time.
How many emails did you send out Ken, just curious.
I think we were at 3 million. This was pre-Mailgun, pre-AWS. This was, we had to actually size the hardware-
Is that per week?
Appropriately. Every night. And it had to be finished in about a two hour window.
So you're responsible for most of the spam in the early 2000s.
Yeah, that was me. I'm sorry. (laughter) My bad.
Delivering legitimate email is actually pretty tricky because of all the anti-spam measures that are a necessity of modern communications. So that was probably, in terms of the technical project, that has been the most challenging. That, organizationally, was the most for me.
Hi, I am Todd Werth. I'm the CEO and the founder of Infinite Red; long time listener, first time caller.
So Chris asked us to talk about a hard problem we've had in the past. So I think most hard problems I've dealt with in the past haven't necessarily been technical, because even though they're difficult, they're fairly straight forward to go through. Some just take a little longer.
That's true.
Most of the problems have been human related. One that comes to mind, and I'm sure there are better examples but, circa 1998, 1999 or something, I did a project for the San Francisco 49ers. The scouts would go out preseason and they would scout out new people and they would go all over the country and they would take notes. Traditionally this was done on paper and then when they finally made it back to the home office they would go over their notes with whomever and what not. So we were developing a system where we gave these peoples laptops for them to take out and then when they got back to their hotel room they would hook up to the phone line and use a modem and upload the data to the database; which was hugely advantageous to the San Francisco 49er corporate office.
The problem is, none of these gentlemen have every used a computer before. Didn't know how to use a mouse, didn't know how to use a laptop, so the challenging part there actually, a colleague of mine, his name was Milton Hare, he did the training and taught them the very basics of using a computer. That was actually quite challenging. The user interface that we designed had to be geared towards that. It had to be, not just simple, but absurdly simple. It was very fascinating. The bad part of that project was that I got to see a lot of data on professional football players, including things like their criminal records and I will not go into it, but it's not a pretty picture.
What we're going to do in this episode is we're gonna look at the art of doing difficult work in three main areas: extreme personal support, collaboration, and transparency. But before we get there, what is difficult work? We've had a couple of different responses. We've had technical, we've had human, but what is difficult work?
I would saythat's a hard question.
Difficult work is work that is not easy. (laughter)
Yes, Ken. That's why we have you here. It's tough to say. As far as from our culture and our perspective, difficult work is what's difficult for individual people. So for example, I'm an engineer and designer, not a sales person. Jamon is also an engineer, not a sales person, but Jamon and I for a long time did sales together. That is difficult work for us, we didn't come natural to it, we didn't have any experience with it. So one of the things we decided early on is, we have a couple of rules.
One, you don't have to do something the way other people in the world do it. We're engineers, we're doing sales, we approached it from an engineering standpoint and we engineer our sales process. Later we can talk about that.
Two, is anything that is difficult for individuals, they shouldn't be doing alone. They should never be alone on an island. If someone, whatever it is, talking to a tough client, dealing with a tough technical problem, doing something that's outside of your comfort zone such as sales or maybe giving a presentation or whatever it is, we do at least in pairs or more. It's one of the things I really, I beat the drum beat with our team is, if there is something you're dreading, use the buddy system and get people to be there with you because that helps a lot. For example, in our sales calls, Jamon and I would do this thing where if I'm talking and I'm starting to fumble, he would interrupt me and take over, or if I felt like I had nothing to say and I was having a particularly anxious moment or something, Jamon would take over and we would support each other that way. Eventually we became pretty decent sales people.
If I were to take a crack at defining difficult, I would say, something like work where you don't already know how you're supposed to do it. As distinct from hard work, for the purposes of discussion, I would define as more you know how to do it there's just a lot of it and you need to do it quickly or intensively for some reason.
One of things that we actually like to do around here is turn hard work into difficult work. Find a way to automate in terms of process or literally automate in terms of code, things that would otherwise be hard work. It's not always possible, but we try to when we can.
I have a personal example of this, wasn't done within Infinite Red per se, but on Christmas Eve I suffered a house fire and it obviously was quite traumatic but one of the things we have to deal with as sort of a fall out of this house fire is submitting personal items to insurance for reimbursement, to kind of restore what we had. It's a very labor intensive process, to go to the insurance company's website and individually type in items because most people with a normal sized home would have thousands of items. The restoration company had done a spreadsheet for us and they had done a lot of the work, where they had gone through, and I would characterize that as very hard work, where they had to go through a bunch of soot-stained things and inventory them, take pictures of them, describe them in a spreadsheet. They did a really good job with that and they put it into a spreadsheet, but to put those items in was still a manual process of transferring from a spreadsheet over to the State Farm website.
I decided that, maybe what I'll do is I'll figure out some way to automate that and that took me like an hour. I could've gotten a lot of things done during that time, I could've entered quite a few items in that amount of time. It took a lot of frustration, of like going down the wrong road, and kind of reverse engineering the web app. But once I had it done, I got it to work and I ran this cURL script for like 45 minutes and at the end of 45 minutes we had 3,000 items entered into the website. So this was a situation where we could've just buckled down and done the hard work, but instead of doing that I did more difficult work of thinking of a way to automate it and that was a net positive.
And if the FBI or State Farm are listening, we had no knowledge of this. (laughter)
State Farm is definitely not listening.
For the record.
Jamon, two questions. One, do you think State Farm intentionally makes it super hard to enter items that they're going to reimburse you for? Two, how long do you think that would take you if you hadn't automated that?
You know, we've been asked that before. I don't actually think that's the case necessarily, because I've been involved in enough software projects where you're not intentionally making something difficult for users, but when you don't use it, when you are not the end user, when you are not the person sitting there whose been through a fire who has to go through it and do it. It's not as easy as it seems when you're testing it with 14 items, 14 test items. I think actually this speaks more to a lot of what we do where yes, entering 8 dummy items in the course of testing it on localhost, it's actually a pretty good experience. They've actually done a pretty good job of making that pretty decent, but the overall user experience of a real person in a real position of needing to do this-
For a large loss, not just like hey someone stole my bike, but yeah 
Exactly, it falls on it's face. So I actually don't think at all that this was intentional. I think that it's entirely within the realm of possibility that this is simply they haven't user tested. It's a fairly new system, hopefully they'll add bulk import at some point.
As far as the second question which is how long do you think it would've taken to enter those items. I think I'd gotten through maybe a couple hundred in the previous hour. It was taking me probably between 15 seconds to 30 seconds to enter each item. It would've taken a long time and been very tiring.
We'll give State Farm the benefit of the doubt.
I think this impulse, this is exactly the kind of impulse that leads some people to computers, to programming. This allergic reaction to tedium and repetition and when you find computer programming for the first time, if you're that kind of person who hates that sort of tedium, you're like 'this is the best thing that I've ever seen in my life,' right? I only have to think in enough clarity about what's happening to describe it to the computer, and then it'll do it for me. That's a really powerful feeling and as you get into it of course you discover that you've just traded one problem for another problem, but we're the kind of people who find that to be a higher class, more interesting, better, more rewarding problem.
There was an intriguing phrase used the other day: We make difficult things doable through extreme personal support of each other. So can you paint a picture of what extreme personal support means to you at maybe the founders level and then maybe at the Infinite Red team level?
Who said that Chris?
That was the brilliance of a guy named Todd Werth.
I do not recall saying that. I wouldn't phrase it that way, even though I literally phrased it that way. (laughter) I don't remember saying that, but it makes sense. It's not only do we give people support when they're doing work that's difficult for them including all of us, and including the three people here as well. Let me tell you a little story.
When I was a young man I worked in a warehouse, I drove a forklift around at a job. One thing I noticed in that job, it didn't suit me very well because I like to talk and I like to think about stuff and it was just very tedious. What I noticed a lot of the people in the warehouse, all different ages, young person like myself all the way up to older people, is a lot of people in the warehouse were not in the right job. This one gentleman would constantly get in trouble and the bosses did not like him because he loved to chat and he was really good at it and he was really personable and I have no idea why he was in the warehouse, it made no sense at all. Later on he went to become a successful real estate agent, which is completely appropriate. Now this company I worked for, it was a big company, it was one of the largest companies in the state, so it's not like they didn't have a place for this gentleman to work well, so he ended up leaving.
The reason I tell that story is because you have to know everyone individually and what's hard work for one person is not hard work for another. If it's not hard work for another person, one way they can support people rather than just direct interaction is for them taking on jobs that other people find hard. So that's kind of support and of course there's just day to day, I will show up with you on the battlefield, type of support and that kind of stuff.
I think one of the ways that this manifests itself is how we deal with failure and the inability to get something done here. We're not quick to reach for blame the individual who's there. Sometimes that's the case where someone just falls down and they kind of do their own thing and that needs to be corrected and move forward.
We so don't look to blame.
We don't look to blame. No it's really, let's look at this from a collaborative approach. How can we, as a group, do this better in the future? How can we adjust our systems? One of the things I don't like is to identify a gap in our system, for example, and then say that the answer is that the people involved need to just try harder. I really don't like that answer. Unfortunately that's something that a lot of lazy leadership will do. They'll just be like, 'you need to get your act together,' and that's the answer. The reality is that's often not the answer. The answer is usually to work with the system until it's at a point where doing the right thing is the easy path, where doing the right thing is the natural and intuitive path. That takes thinking, that takes understanding the problem, it's harder for leadership to accomplish that.
It is occasionally the right answer though.
It sometimes, sure.
But not very often. It's rarely that simple, but I think one of the hard things that I've found in leadership was actually saying to somebody, 'Look, you need to step up. You have what you need right in front of you, the next part is up to you.' Actually saying that is part of it. I think what Jamon is referring to is that if the support is not there, then saying that is meaningless.
Well, I mean, it's like someone is pushing a rock up a hill and you're just saying you need to push harder, push harder. When the person's telling you and you're not listening, why don't I just walk over the hill and get the rock that's already over there? You know what I mean? So-
Yeah, I completely agree with that.
I do agree that asking somebody to step up in a real way, not just a nose against the grindstone type of way.
When you get to the point where you've got all of the easy rocks on one side and what we actually need to do as a team is get this one huge freaking rock on the other side of the hill, and some people are not pushing with you, that has to be addressed.
But it's much smaller part of the pie than I think some management philosophies would tell you.
I personally convince everyone that pushing rocks is one of the neatest things in the world, it's a rarity, and for a low price they can push my rocks for me. (laughter)
I think one of the things Ken has said in the past is what we want to be is a high support, high expectations company. Low support, high expectations is just toxic.
That's a sweat shop.
Yeah, it's a sweat shop. High support, low expectations is a nursery and low expectations, low support that's-
I don't even know what that is.
How does this picture of extreme personal support enter your relationship as the three founders?
I can kind of personally attest to this. There are certain tasks that I'm well suited to, my personality, that I enjoy doing. There are other ones that it's like pulling teeth to get me to do and that's just been exacerbated since I had the house fire and am kind of displaced from my normal routine and I really just want to focus on the things that I really enjoy doing. What we did, actually earlier this year, up until this point we've made a lot of decisions together, we've done a lot of things together and that's was appropriate for the first couple years of Infinite Red. But we've gotten to a point where we kind of understand each other, we kind of have a lot of aligned shared goals and we've actually started to specialize.
This was a way for Todd and Ken to support me, in that Todd could focus on a lot of team-oriented things and Ken's been doing a lot of things with the financial and bookkeeping side of the business, which I am not good at. I can focus more on business development and that's actually the part of the business that I find really interesting, so rather than just telling me, 'work harder at managing your projects, work harder at being an account manager, work harder at doing these other things,' which yeah, I could work harder and do a better job. Instead of doing that we've found a solution that wasn't centered around just working harder it was centered around doing things that we felt effective at.
As we are three founders and we govern as a quorum of elders as it were, as opposed to a hierarchical company, supporting ourselves, each other, the three founders, is just as important as supporting the team in my opinion.
When there is a financial problem, thankfully we haven't had too many of those, we all have to step up and so we tend to understand each other's personal finances, each other's personal stuff. It's almost like a pseudo-marriage in a way, although there are three of us so it'd be a polyamorous marriage in this case. It's a requirement to be more, I don't want to use to word intimate, but intimate in each other's lives and I think we're really good What's cool about three as opposed to two or one, for example, because Jamon's done one and I've done one, I've been in another company but what's cool about three is, typically it's one person having a communications problem or arguing or having difficulties with another person and the third person mediates. It's either Jamon and I are having an argument and Ken mediates or Ken and I are having an argument and Jamon mediates. Hey wait-
Wait, when do you mediate, Todd? (laughter)
I don't think I've ever mediated, that's funny.
I don't think you have actually. I'm noticing a pattern here, yeah.
That's not true.
But it is totally true. But it's okay. I tend to draw lightning as well away from people and because I deserve it. I don't know if that answered your question, but I think it's uber important, sorry, it's Lyft important that we do that. (laughter) You know, it starts and then we can all support the team if we are supported ourselves.
It sets the tone, all the way down and we have to. We have no other way of working. We have to support each other and it's not just when we're having interpersonal problems with each other, but also when someone's just literally having a tough time. What I think we've done really well as a founder team is go into our shared channel and post, 'I'm having a tough time.' It can be for any reason, it can literally be like, I didn't sleep very well last night; I just am so bored with this task, I cannot get started with it. All those things are valid and the answer is never just suck it up, or if it is, it's one of those things where it's an empathetic suck it up. If that makes sense. It's like, I totally get it, I understand where you're at, we really just need to get this done. And sometimes that's what you need, you need a little boot in the rear and that's something that you can take from the other side too. It's been great, really, the last two and a half years having that.
Obviously we're talking about supporting each other as founders, but it's the same with the team. One key thing is if someone is vulnerable, they say they've made a mistake, they say they're having a problem, even if you personally think 'is that really a problem?' Or whatever, it doesn't matter. Whatever your personal feelings are is irrelevant. If you stomp on that person, if you make fun of that person, if you tell them to suck it up buttercup, everyone, not just them, the entire team will contract. They will put up a little more walling around them and they won't do that in the future. They'll do it, they just won't do it around you. It is hard because we're all emotional beings and sometimes you have an emotional reaction to something. But you have to be super careful to not when that flame is just starting you need to be very gentle with it and not blow it out.
It's more than just avoiding stomping on people, not that Todd was saying that's all it was, but you have to go out of your way to solicit, to get people to talk about what's going on with them, to check in with them, to reiterate that you're available for that. You can't say it once and assume that everyone will remember that, they won't. Right? People's own internal dialogue about how worthy they are, all that stuff will keep coming back if you don't actively do it. Also, we will make mistakes sometimes, right? So you have to keep doing the active things as well to keep the ship steered in the right direction.
When we make mistakes it's important that we apologize to the team. Not fakely like 'oh, I'm so sorry.' Everyone can smell fake, but if you're genuinely made a mistake because you had an emotional moment and you didn't act appropriately, you have to apologize to them as well.
So the interesting thing as you're talking, I get a sense that this isn't something that you just read in a book and you're like, 'I'm an expert at this.' I sense that there are some really real stories behind learning what it means to be not only supporting others but to feel supported.
Yes, for sure. Ken actually is super good at advice in this kind of thing, having been a leader in the past. Typically, leader of only senior people in the last two jobs. Actually, the last one I had some more junior. Infinite Red, when we first started, we had quite a few junior people, so that was a little new to me.
One of the things you have to learn leadership is hard by the way, I just want to interject that. Leadership is very difficult, it's hard work and that's why we get the support of each other. We not only get the support of the three founders, but the entire leadership team here at Infinite Red and there's a variety of people: Gant Laborde, Shawni Danner, Jed Bartausky, Justin Huskey. It's difficult and not only are we supporting each other, we're coaching them, especially the more junior leaders on how to do it and one of the things Ken said and it's just one of the great gems of wisdom that he gives, is he goes "you have to remember you have very wide arms, when you swing them you hurt people." So you don't have the luxury to be how you were when you were as an employee. I could say things as an employee, I enjoy making people laugh, it's one of my things. I can do a lot of things as an employee that I simply can't do as a leader because when I say something it's taken much more seriously, whether I meant it or not. When I hear other managers, let's call them, say something like employees suck, it's like, 'no they don't, you suck.' Employees don't suck. That's crazy, that's like the coach of the San Francisco 49ers saying my players suck. Well, you chose the players, you're coaching the players, so they don't suck.
One of the things that we do when we're working on a difficult project as a team is make sure there's an owner. One of the things that will kill any difficult project is diffuse responsibility. Partly what we're striving for is that everyone can take responsibility for something. Everyone can be like, 'I'm going to execute my part of this as skillfully as I can,' but if there's not one person who owns the whole vision, it's going to fail. Almost guaranteed.
Creating an environment where it's okay for that owner to say, 'hey I need your help to get this done.' Where the culture is like, somebody needs something from you and they specifically ask you, that you try to do it. And that makes ownership less scary. One of the things that I've seen go wrong, if someone is given responsibility but no power, no ability to actually follow through on that responsibility-
That happens all the time.
That is the most demoralizing position, possible.
That's toxic.
Yeah, so that's how you kill your budding leaders by saying 'hey get this done and by the way, all these people over here have their own priorities and they're not going to help you.' That is the worst. So, assign ownership and then back them up. That's been one of the keys to getting certain things done. Chain React is a good example of that.
Chain React is our conference for React Native in Portland this July 11-13. So we did it first last year and now we're doing it again this year. Shawni, who basically runs it, had ever run a conference before, had never been to a conference before, but is good at just marshaling resources and taking charge and that's a great example where she could pull on whoever she needed for help. When it came to actually knowing specifically what to do for other peoples' expertise, like we flew somebody up who was a serious foodie, to go and test the caterers, for example.
That was our team member Derek Greenberg and Derek is such a foodie and it was just a joy to watch him work on that.
He had the most comprehensive report for that kind of selection process that I have ever heard. It was amazing, anyway.
None of these things that we're saying are we perfect at. We're not, we don't hit this every single time and I hope that we're not saying that's the standard. What we're saying is here's our guiding star, here's what we try to do, here's how we evaluate whether we're doing the right thing or not. So this is how we nurture leadership within the team, is to say 'here's what we need you to do, and by the way, the team is your oyster.' You can go and pull in what you need in order to make this happen.
**THIS IS REALLY BRINGING UP A REALLY INTERESTING POINT NOW, WE'VE GOT THIS EXTREME PERSONAL SUPPORT BUT THEN WHEN YOU ADD THE COMPONENT OF LEADERSHIP AND HELPING EACH OTHER OUT, IT INTRODUCES THE LAYER OF COLLABORATION. SO HOW IS COLLABORATION DIFFERENT FROM EXTREME PERSONAL SUPPORT?
You can have a group of people who hate each other and they can collaborate if they're given the proper motivations. This happens all the time in corporations every day. Sadly, many people work at those corporations. So I don't think those are necessarily required for each other. I do want to digress just for one second. So Ken was saying how we try to give people in leadership positions or in a leadership role in a particular project, whatever it is. We try to do empowering stuff, but we're not perfect at all.
One of the coolest things about having Ken and Jamon around is when I do something boneheaded, typically Monday-Friday, they let me know and they help me get through it and they identify it and on the flip side for whatever reason the team is pretty comfortable talking to me. It's just my personality, I talk to people a lot. And so if they have a problem with say Ken or Jamon, they'll let me know, and then I go talk to that person or we talk and try to do it in the most supportive way possible with the goal of improving that person's, how they're performing as a leader and that's awesome because we're all human so having the support.
For the team it's the same way. A lot of programming, I wouldn't say design because design's a little different, we do design and development. A lot of development shops are kind of little dog eat dog, kind of situation. People can be arrogant, they can make fun of other people's work, and that kind of stuff. We really hire and try to promote a, you can be critical and explain problems, but do it in a supportive way and that can't be in a mission statement, it can't be something you announce in a meeting. They have to live it every day and especially new people, it takes them awhile to get deinstitutionalized and understand that you can make mistakes, you can put your head above the fray and it will not get chopped off. Every once in a while someone does and I have a private conversation with them and let them know how they were really not being supportive and our team's awesome, they all want to be. It's almost never malice, it's always just they miscommunicated and they didn't understand what they were doing.
Well people are messy, right? That's just the nature of the beast.
This highlights one of the aspects of almost everything within Infinite Red and that's where we try to design things for iteration over perfection. So even things like support, supporting our people we are iterating on how to do that. We're trying to have a feedback loop, there has to be some level of learning from our mistakes and then continually getting better.
There are some things where someone will take on a task as a group that we decide, were going to do this thing and it's actually a very difficult technical thing or it's a very difficult societal thing, where we're going to build a new AR system or something and the tools are not there and we have to build all that. So there are hard technical things that are
There are, but-
But I think you're right Ken, in the interpersonal stuff kind of always comes back to that, as far as the things that end up feeling very difficult and very hard.
So just to take that, so let's take like, the Manhattan project.
Why not, take it
And of course that was the project in World War 2 where they were developing the nuclear bomb.
Right, so definitely some complicated ethical angles on that one, but how do you do that? Well, you attract the world's greatest scientists and put them in one place in New Mexico, and then you give them the tools that they need to work with and you give them a goal that you can align on. In this case, win the war.
Kind of like Breaking Bad.
Boy, our examples ar going really dark here. (laughter)
Well they brought world class scientists to New Mexico-
Let's pick a better one because it still works, right? If you're not just one person sitting in a room, working on something hard. Not to take anything away from that because a lot of amazing things have come out of one person sitting down with a problem. I think that's a different question than what we work with ever, right? I think we could probably have a whole podcast on how do you recognize a good engineer for example and I think that's an interesting question but it's a little different from the question of how do we as a company work on that. Because that really is about: how do you set up an environment where people can do their best work? And how do you hold people accountable? But also make sure that they are not held back by lack of resources. And those resources can be physical, tangible but in many cases they are emotional resources or organizational resources.
Especially in a software business, I think that it's exaggerated in a software business and that dynamic also is worth a whole podcast because of the dynamics of software and how they're different. Because there's nothing to buy, right? Once you have the computer, you're done. What that leaves is all these other kind of softer, squishier resources that people need to do their best work.
One example of this is an internal tool that we've been working on that is intended to increase the efficiency of certain types of tasks. It's not something that's open source at this time, so I'm not going to go into a lot of detail, but I asked the team that was behind it why we weren't necessarily realizing some of the gains that we had anticipated to start with and interestingly, a lot of the responses were, really had nothing to do with technical issues or anything like that. It was policy related things. Some things that we were doing that were sort of handcuffing them in some ways and there were reasons behind those, there were sort of organizations reasons, strategic reasons behind some of those policies, but it allowed us to look at the end result of this difficult problem that we were trying to solve, and make some decisions based on values and trade offs that were more strategic in nature that we didn't realize were holding them back as much as they were. So that's an example where we had a hard problem and, unbeknownst to us, we were making some decisions that were making it more difficult for them.
When does extreme personal support diverge into collaboration? Todd mentioned that you can hate the people that you're with and still collaborate, but what does successful collaboration look like?
I would say successful collaboration is a multi-faceted thing. One, is the stress level of the people doing the collaborating. Two, the most obvious, is a successful work output of that collaboration. Meaning you accomplish your goals, hopefully in a creative, high quality way. And then three, from a business standpoint, that it was the return on an investment of that collaboration was good.
I think those are good kind of high level metrics that you can use. Another way to do this from a more granular level is to watch how people interact. So some people, for example me, may come into a meeting and may want to kind of expose that this other person is not doing their job or something like that and that's not a very particularly constructive way to approach this. But if you watch the successful collaborations that happen, they go into the meeting with a question and they go into the meeting, we have a challenge in front of us. How can we solve this? They get the people involved that need to be involved and don't make the meeting too big, but they make it just big enough and that's a characteristic of a good collaboration when everyone can go into it with an understanding of a problem, be able to provide their perspective and then the group can come to a conclusion. It's part of this overarching concept of psychological safety that we talk about a lot at Infinite Red that leads to better and better work.
We've got extreme personal support, we've got collaboration, what about transparency? How critical is transparency in difficult work and in doing remote work?
One of the things about transparency that's important, or why transparency is important is this idea of trust. Because trust underlies a lot of dynamics within a company and if people feel like you're being purposefully opaque, they may feel that you're hiding something, they may feel that you don't trust them with the information, you don't trust their opinion, you don't trust and then when you don't have a high level of trust than a lot of other things fall apart. You don't get that collaboration, you don't get a lot of other things that you really need. So transparency is a prerequisite to building that trust. When we're able to be open and honest with our team about struggles or how we approach things or issues, were not necessarily saying wide open, everything is just hanging out there, but at the same time we do want to have a high level of transparency and ultimately we have to actually trust our team in order to do that. It can't just be something artificial, it has to be something where we actually do trust our team.
Again, it's like there's not this formula where you just say do a whole bunch of transparency and everybody will trust you. No, what you have to do is do the hard work to build that trust. The transparency is a part of that and then that is something that you continue to do.
There was a situation where we implemented some new business policies, business way of doing work. Todd was intimately involved with that throughout and all of us were really and some feedback we got afterward was that they didn't feel that there was quite the transparency that they had expected. Felt like a bit of betrayal of trust, and we heard that, we heard that loud and clear. We told people we heard that loud and clear and we changed the way that we implemented larger company-wide changes in that way. It can be a little difficult, just being wide open sometimes will expose you to knee jerk reactions, or a lot of different things that can sometimes bite you, but it's worth it in the interest of establishing that sort of trust.
In what ways are we transparent and what ways are we not transparent?
Well one obvious way is that for most of our engineers and designers, we actually have a transparent pay scale. People actually know what other people make salary-wise. We get this feedback sometimes, someone will say, 'I think this person is leveled too low, I think they need to level up, I think they've been doing good work.' Without that level of transparency we'd never get that feedback because people wouldn't know and you could easily have a situation where someone is underpaid and we're not getting the feedback that that's the case.
Chronically underpaying someone can be extremely expensive.
Ironically.
Because you can lose your best people that way. So we try to be super involved and see everything. Of course, we try, but that stops being scalable after a while so we have to have mechanisms in place that encourage the right information to come forward.
Jamon mentioned our transparent pay scales. If your company is telling you not to talk to your co-workers about how much you make; A, it's ridiculous because you're going to do that anyways, especially with people you're close with and B, it's a red flag because why? I know why they do it because it's easier. Having a pay scale, everyone can look at a spreadsheet to see where everyone is placed and that kind of thing. It's much more challenging from our perspective because you can't just, such and such you know we want to give them more money for whatever reason, maybe a political reason or whatever, it doesn't matter. You can't just give them that because that's not the level they're at, so it's very fair and the transparency is nice but, I'm not going to go into it right now but we've had many situations where that's been difficult for us. Would've been easier just to have a normal secret pay for everyone, but not all of our team enjoys that as much as some other people. Some people really enjoy that and it also gets rid of problems like inequity between say genders, or race or anything like that because everyone knows what everyone makes.
So that kind of transparency is great. Some transparency, I don't think we are transparent, not because we don't want to be, we'd love to be, I personally am a very open book person. Literally if someone asks me a question I'll answer pretty much anything. I won't answer about someone else, like if someone's told me something in confidence, or I won't talk about my wife or whatever but anything about me I'm very open. But, I know not everyone is that way and there are various reasons why but as a company, we try to be as transparent unless it's actively going to hurt people and sometimes that happens. You have to weigh hurting people against transparency sometimes.
Sometimes people really, it's not good if they see how sausage is made, just because they may not have the full information. Let me give you an example. So let's say, this is hypothetical, this isn't really what's happened, lets say we're going over financials once a month and we understand what's going on and we've had lots of conversations about financials and then one month we're going to be drastically under and us founders are going to have to put money into the company to keep it rolling. That's one of those things where, if you just announce that we're doing really poorly, we're going to put money in so we can pay payroll, it can make people very nervous. Not because they're not smart enough to understand, they just haven't been sitting in those meetings and they don't understand the big picture. You can say all you want that it's totally okay, it's fine don't worry about it, but when someone's doing a bank robbery with a gun, you don't pay attention to what their wearing, you're looking at the barrel of the gun. It's just situations like that where we choose specifically not to be transparent. We default to transparency, but there are time when we choose not to be.
The first time I really extensively used what I would call social media at work was at Yammer, who semi-invented that.
Ken, what was Yammer? What was the product?
Yammer was, I think it began life as basically Twitter for companies and it kind of turned into Facebook for companies. It's very similar to that, so it's, you have threaded conversations and notifications and likes, but it was aimed at organizations. It's still going. They were bought by Microsoft, it still exists. Slack pretty much came in and sucked all the air out of that market, but, nevertheless, they had some pretty good norms for how you use a tool like that in business. One of them was, they had private groups, but they would always ask the question: Why is this private? Why is this conversation happening in private chat and not in a channel? Not that you couldn't have things private, because there are certainly cases where you'd want that, but those cases had to argue for themselves, whereas, the prevailing mindset before had been private by default unless you needed to collaborate and so our default is: default to open, default to open channels and we do that in Slack too.
The things that we keep private are: client channels are private so that they don't have to worry that random drive-bys are coming in and looking at their stuff. Few things like HR and finance are private and anybody on the team can make as many private groups as they want for themselves. In terms of the official channels, they're as open as we can make them and that's been part of that ethos is that it's not all transparent, it's transparent by default.
But that even extends outside the company. On my Twitter I'll answer questions and I'm often quite transparent about some of the challenges that we face. This podcast being another outlet for it, where we talk about what we do. It's even outside of the company itself and I think that helps, it's a part of who we are. Todd, Ken, and I initially started on some open source software and that's the height of transparency there.
So kind of bringing this episode to a close; What advice would you give to other founders who are looking to build a culture of doing difficult work together as a team?
I would say the number one tip is just try, and keep on trying. There's no magic bullet, I don't know of any particular books you can read, every organization's different and different type people and different type jobs have different needs, but if you just keep on trying and keep on making an effort towards it, if you stumble and you have an emotional moment and you swing your arms too strongly, get back up, apologize, and keep on trying.
How do you eat an elephant? One bite at a time. You start there and you start in a way that is, you don't have this master plan where you have to follow it exactly all the way through. You design something that has a feedback loop. Feedback loops are extremely important. You'll hear us talking about that more, very often. You start with the first thing, then you start with the next thing and you keep working at it. We've never done a podcast together, for example, so we start with the first episode and we iterate on it and we look at what we've done and we see what we like and what we don't like. We provide feedback and we provide feedback in a way that hopefully is constructive and is something that we can learn from. Todd mentioned another time when he and I collaborated on sales and how we would engineer the process. We did it that way. We started with the first sales lead and we evaluated how we did and we continue to chip away at it.
Any company that is going to take on a hard problem like that, start with the first bite and see how you did, and have a feedback loop and have a way of iterating, getting better and by the end of that elephant, you're going to be pretty dang good at eating elephants.
That's terrible.
Yeah, we apologize to the elephants out there.
Can we eat Republicans? (laughter)
Can we eat people at Google?
I get the reference: elephants and GOP.
I don't understand
See, this is why we had to bring Jamon on because Todd wasn't smart enough to get my jokes. (laughter)
This is all going to be cut anyways so  I know Chris.
I hope not. (laughter)
We eat Republicans, really?
Yeah, no you're right. They're probably tough. (laughter)
It's all the wrinkles from too much makeup.
This is Jamon and I was on Twitter and I was looking for a React Native conference because we had been doing React Native for about a year at that point. And I was thinking, well, it'd be really nice to see if some of our team could attend a conference and potentially maybe share some of the things that we had learned along the way. So I actually put out a tweet saying, "is there a React Native conference around? I'm not seeing one." And got no responses, which partially had to do with my very small Twitter audience at the time and partially just because there wasn't one. Now, it turns out there was one over in Europe, React Native EU, put on by our friends over at Callstack.
But that was after.
I believe it was after that.
We didn't learn about that until after.
Not at that time.
Right. I was just kinda chewing on that. Wow, I didn't get any response to that. I would normally get two or three options if I were to put out something like that. And I woke up one morning, I'm like, you know what, maybe we should do a conference? And what is funny is independently two or three people contacted me after that, that same week saying, "Do you think we should do a React Native conference?" Just independently and it just seemed like that all kind of came together all at once.
And this is Todd, Todd Werth, by the way. Some background here. We've never done a conference at all. We've of course all attended conferences. We're familiar with that. Although Shawni Danner, who ran the conference had never attended a conference, which was funny, but anyways, so Jamon came up with the idea, talked to some other people in our company, they liked the idea and then pretty quickly we decided and then we started building the conference.
At what point in there did Gant  Because Gant, who is our social butterfly
Gant Laborde.
so he asked around various people to see whether they would speak. And I don't remember if that was before we decided or after. I feel like that was before. We were kind of mulling the idea around and he was like, "hey, we're thinking about doing this conference. Would you want to speak?" And when a bunch of people were like, yeah, hell yeah. We were like, okay, sounds like the stars are aligning, and it was very much a feeling of the stars aligning to be honest.
It really was.
This signal is kind of like once we started putting the idea out, it just gathered momentum from a bunch of different places and we're like, okay, and then once you commit, the momentum increases.
And as far as I know, it was the first React Native conference in the world.
As far as the first one that was held, I think Callstack announced their conference before we announced ours. But yeah it was right in that same time.
Correct, they announced, but theirs came after ours actually.
Yeah, theirs was in September, ours was in July of 2017.
So when you're putting on a new venture, like a conference that you have no experience in and you start seeing the stars align and you start seeing this momentum form: how do you really go from zero to one?
I don't want to say it wasn't hard because a lot of work went into it, but it wasn't super difficult. At the end of the day, the hard part about making a conference is making a good conference. You get a venue, you get speakers, you get food, you get swag. I mean, I don't mean to oversimplify it, but if you've planned a wedding, you can plan a conference, right? It's probably not even as hard as a wedding because it's not quite as emotionally wrought, but where we put the most effort into well how do we make it a good conference? And we sort of came up with a list of things, some of which I think turned out to be true. Like getting good speakers, making sure that there's at least a certain amount of diversity. I think we always want more, but there needs to be at least enough that people can kind of go, look, hey, there's someone like me there.
I was big on having good food. I think that wasn't as important as I thought it was. It's important to me, but the things that people cared about it, we're actually different than what we thought. So there was definitely things that we learned from the process, but the process of getting it organized and a lot of credit goes to Shawni for being an amazing organizer of things but the process of getting it made, while stressful and hectic at points, went off pretty smoothly overall.
Yeah. So that's all true. One thing we did do though is as a leadership team, is we decided to put a decent amount of resources into it. I think a lot of people are like, this is a little side project and it was a side project for us. But we're 26 people, so we can put a little more wood behind the arrow of a side project like this if we decide to. And we'd probably put a little too much resources in to it, to be honest. And we'll talk about this later, but the results were well worth it.
Yeah. One of the things you have to remember is back in 2016 when we were first starting to do this, we had been doing React Native for a year. We weren't necessarily quite as well known back then, we were still fairly new player in the space. We had done some things in other technical realms that we were more known for, but React Native we were still a relative newcomer. So for us this was, it was a bigger, maybe bigger deal than just necessarily putting on a conference for the revenue or something along those lines. We wanted to be connected. We want it to be in that space. And so we did put it, as Todd said, we put a lot of resources behind it. We put a lot of thought into it. As a founder team, we put a lot into it.
And it was probably a half of Shawni's main job, which is a significant amount.
Absolutely. And another person I'll point out here that who was instrumental was Gant Laborde. He's typically the most active in the conference circuit from Infinite Red and he's been to a lot of conferences as both speaker and attendee and he had a really good sense, good instincts about what worked well at those conferences and what didn't. And early on I read an article about how you should really treat your speakers well and I brought it up to Gant and he absolutely agreed with that. The speakers are so key to a great conference and so we spent a lot of time, energy, and money, making sure that the speakers felt comfortable, that they had a good spot, that they were well supported all the way up to the conference and that was definitely time well spent. It was a good investment. All of the speakers that we've talked to felt like they had a fantastic experience. Some said that it was the best conference that they had ever spoke at, which was, a lot of them were very accomplished speakers so for a first time conference, we felt that was very good.
That's a good example of making decisions that produce good quality products, whether they're a conference, software, whatever. A lot of people read those articles. The article says the most important thing is treating your speakers right. They read it, they think about it, they talk about it, they don't actually do it. We accept that we knew nothing about throwing a conference, so we took Everyone-on-the-Internet's advice like that very seriously and we asked our team and then we put resources behind that and we went way out of our way for the speakers. I've spoke at conferences and it is true. Some are very well organized and you feel very comfortable and it makes for a great presentation and some are not. So I definitely think the number one lesson we learned, spoiler alert, was treat your speakers well.
Todd, I have a question for you in terms of a follow-up. When you are reading these articles and they say what to do, what is the difference between just reading them and not acting on them and choosing to act on them? Was there just a moment where you're like, okay, we're actually going to do that?
We make make decisions fairly quickly. We do make decisions as a quorum of elders. All the leaders make decisions together. We have no king here at Infinite Red. So we do make decisions pretty quickly, especially if one person doesn't have a passionate opposite position. So when Jamon brought that up and then Gant and some other people, Darin Wilson, for example, other people who spoke at a lot of conferences, agreed with it. We decided almost instantly. Well, I mean there's a lot of things that get in your way. The first one is admitting you don't know anything about something you actually don't know anything about. And so listening is tough for people and especially tough for companies. The second thing is hubris. I've never done a conference. It doesn't stop me from doing the best one I can do and I'm not gonna listen to anyone and you know that happens. And the third one is making the right decision fairly quickly, listening to your team, and then actually putting no one in charge of that, giving no one actual time to work on it, and putting no money into it. This is basically Congress's full time job doing that. (laughter)
So we try to avoid that. I mean, I'm not just, it sounds like I'm just cheerleading the leadership team, which is kind of self-serving as I'm on it. But it's not just us, it's just the whole team. When we say we decided, Jamon read this article, a bunch of people have talked to agree with this concept of treating speakers well. We're gonna treat speakers well. The team doesn't roll their eyes and go, "sure." The whole company culturally said we're going to do this and they're going to do it. And truthfully, the leadership, we helped the decision-making but we didn't do much of the actual work for the conference.
I think there's conferences where their idea of treating speakers well is to just throw money at them. And that was not  I mean, I don't think that's the feedback we got from speakers. I mean everybody likes money. I mean don't get me wrong, but it's about making their experience smooth because no amount of money will stop the nerves or the feeling of not being appreciated.
If you make it easy for people to shine, that's what they remember. People remember the way they feel about things way more than they remember what was said or the logic to it.
So when you're doing something that's outside normal business parameters or normal business operations, how does something like putting on a conference cause distractions or disruptions and how have you worked through it as founders and how have you seen the team work through it as well?
That's a great question and I think one of the early pain points was just in process because  we're a consultancy and so we have a certain process that's set up for clients. And in this case we didn't have a client. We had an internal project, we had an internal champion, Shawni, but it's still a very different feel. Shawni wasn't handing us all of the requirements and saying go build this thing. We had to do it as a group, so we had to develop processes around that and that was something that was very interesting that took time to develop and in fact, we're still kind of working through some of those things, but I feel like we've learned a lot and there's a lot more shared understanding around how we make those decisions and things like that. So I think process was a pretty big adjustment for us.
Another thing that comes to mind with that is allocating actual team time as a consultancy. If anytime that you're spending on that, you're obviously not billing and you're not making revenue for the company. Obviously the hope is that the conference pays for itself by the revenue that comes in for it, but we still had to put a lot of time in on speculation that this was going to work. That's a very different thing than: give us a deposit and we'll start working and we'll send you bills. Again, internal allocation of resources was another adjustment that we had to make and also planning for the future and making sure that we had the revenue, the cash flow to make that happen. And Ken was really good at kind of identifying what we could sustain and what we couldn't as a company.
Part of the initial "should we do this" consideration was like okay, how many people would we need to do to break even? And we were prepared to be happy with break even and that turned out to be a smaller number than we thought. That made it something that we could grapple with and be like okay, if we can get 150 people into a room where, we think we can do that even if we have to go and individually invite 300 people in order to get that hit rate or whatever. And so it ended up being a lot more than that and that was awesome. But it gave us this margin of psychological safety when we went into it. It's kind of like, okay, yeah, we can do this, and we know at what point were losing money, what point where we're making money, at what point we can up the experienced because we've got enough margin to do that.
That's super important. What Ken just mentioned is any time we have an idea we go to Ken and say the main thing is what's our worst case scenario goal to make this viable? That helps us make a decision whether or not it's even a good thing to even try. Because obviously if it was 2000 people we'd be like probably not going to do that. You can tell me Ken, but I don't think it's super accurate. You do it for a couple of hours and come back and tell us what. Is that correct?
I can't predict the future. I don't actually know exactly what's going to happen, but if you can give it enough margin to be like, yeah, I think we'd be safe at this point, then you can usually get to a model like that pretty quickly.
I'm a little confused, to be honest. When we hired Ken, Jamon, he said he could predict the future.
Yeah, this is a little concerning.
The weird part is Ken was here before Jamon and our companies merged, but doesn't matter. It's time travel. So anything's possible. Just watch Star Trek. Knowing kind of the base goal gets us all a point to reach to. And then going back to Chris's question, how to get from 0 to 1, which is actually a very difficult problem. If you're an engineer, it's very difficult problem, if you're building a company and is just a very difficult problem period. But having a goal and then determining at least the first step direction and then you can see if it's kind of leading towards that goal is very helpful for taking that first step.
I do want to mention something else, as well. We did put a lot of resources. We have a tendency sometimes to put too much resources because we're designers and because we're software engineers, we like to build things and so we put a lot of resources into our app that was used for three days. We had beautiful design done and that kind of stuff. Not to skip ahead, but we're re-doing the conference this year. We thought, well, we could just reuse a lot of our designs and stuff and just change it to 2018. We didn't do that. (laughter) We decided to redesign the whole thing again because we just simply can't help ourselves.
Yeah. And going back to the concept of if it's only 150 people, I think that was our initial number. It rose a little bit later because we had some additional expenses, but if we only had to sell 150 tickets we could literally go and individually pitch people and say, "Hey, come to our conference," and try to sell them tickets. And we kind of actually did that in some ways. We went to our community, our Infinite Red Community Slack team, which is community.infinite.red and if you're listening to this podcast you should definitely join it. And we went through and kind of just said, hey, have you heard about our conference? Is that something you'd want to look at? Individual direct messages, individually crafted. We weren't trying to like spam everybody, but it was just more, let's get the word out there and the response from that because we had built a lot of goodwill with the community up to that point by helping them a lot of times with React Native problems and by releasing open source and doing all the things that we do in that community channel that a lot of people don't realize.
We had built a lot of goodwill and so the response was amazing and we were able to, in my opinion, just through the community Slack efforts that we were doing, probably sell that minimum number of tickets. We had obviously sold a lot more than that, but that was more additional beyond that. So it was definitely a factor. Well we at least know that we can go sort of virtually door to door and say, hey we have this conference. Hey, do you want to come?
What's interesting is like you're painting this picture that everything worked out perfectly. There were no hiccups in the process at all, and so what popped up as you're going through that was like, oh my gosh, didn't anticipate that one, or was it all just perfect?
Everything's perfect here at Infinite Red, Chris, any other questions? (laughter)
It really was pretty smooth. We were a little surprised by that. Some of the feedback that we got, we definitely overdid it on the food in some ways. That what people want from food is like fast and convenient and not terrible and we went for good but somewhat inconvenient and nobody wanted that, really. I mean they were like the food is good, but this was a pain in the neck and that was a pain in the neck, so that was something that we screwed up. That was partly my biases to be honest. I take responsibility for that one, but in the run up, in the planning, there wasn't a ton that really went wrong. Right? We didn't get major speakers bowing out. The things that we've heard of going wrong at conferences. To some extent we may have just been lucky, but there wasn't a lot of disasters along the way. There were things that we didn't do as well as we could have done, but we didn't get major disasters.
Yeah. And obviously this is from our perspective, Chris. And Shawni and Gant and some of the others that were more deeply involved in the process may have other perspectives and I think that no promises, but maybe this isn't the only podcast we do here at Infinite Red and if there is another one, then maybe the team can share some of those more kind of operational things that happen but certainly from our perspective, it went super smoothly. There was an energy to it and things did kind of align. I do think we probably got lucky. We probably got lucky in a lot of ways and the timing was right and the mood was right. Everything seemed to come along pretty well.
And Shawni worked really hard. I'm really trying not to swear so that Chris doesn't have to edit me as much this time, but Shawni worked really, really hard at the end of it. So a lot of it was that, to be honest.
Yeah. I want to do a quick couple of shout outs. Shawni worked really hard. Gant was our emcee, he's amazing in front of audience. Frank Von Hoven, which is one of our intermediate developers, he has a background in stage, which we had no idea and he ran the stage like a clock and he took care of all the backstage stuff, getting the speakers set up. It was amazing. That was just serendipity. You don't just happen to have that person. So I do want to shout out. There's more people we can shout out later, but yeah.
And I do want to give a shout out also to the Armory - The Portland Center Stage. It's a great venue and they did an amazing job. They made our lives a lot easier. There were a lot of things where we could just kind of pay them to do it and they did a great job. That was definitely a good find. Actually, Jason Brown who lives in Portland, a developer who I have been connected with for awhile, he was the one that recommended the Armory and it was a great choice.
There were some things that went wrong. The food was good, the situation and how it was served and stuff was a little bit problematic and stuff. And we learned from that. So that was a problem.
That was not our caterer's fault by the way. That was how we set it up and-
It was a little bit our caterer's fault (laughter), but I won't go into that. Another thing is we really tried to take the time to do a proper code of conduct and we are really going to enforce it and we took a lot of time and I think we did a pretty good job. We gave numbers out to text, if there's anything people to approach, if there's any problems. The snafu was we forgot to actually put a link on our website to it. So, that's just a really minor little thing.
Another problem of course is resource allocation when you have a bunch of client work. So we had our internal people, who aren't designers or developers working on it and that's just carving off a section of time for them, but we also needed our designers and developers to do work, which means they wouldn't be doing client work. And so sometimes there was resource allocation issues where someone was really busy with a client project and so that's very challenging for a company like ours with the people you have to bring off the field.
And then the last thing I would love to talk with everyone is we did have a little debate and issues around do we have our whole team there. We're 26 people. It's basically going to be a week. Do we have our whole team attend? Do we make our whole team attend? Do we ask them, do we have volunteers? What do we do? So that was one of the most challenging things in my opinion.
Especially since we're a remote team and some people are going to have to fly from Florida or Toronto or all over and so it wasn't just a matter of hey, you're here in Portland, can you make the drive down to Portland? But yeah, that was an interesting thing and I think that it speaks to how much we really cared about the experience of the attendees and the speakers that we did bring most of our team. There were a few that couldn't make it, but most of our team did go and we had roles for them. That's actually something we're going to I think we're going to do better this year where we're going to actually provide some training for our team. Some expectations around how they'll work and stuff, but they wore a specific T-shirt so people could identify them. They weren't just necessarily venue people or volunteers or something. They were actual Infinite Red employees and I actually feel pretty strongly about that representation because this is representing us to the broader technical community in a very strong way.
And going back really quickly to the code of conduct. Prior to our conference, there was an incident I think at Facebook's conference, I forget what it's called, and one of our speakers was affected by it and-
Was it F8?
Yeah, F8 I think. And so I kind of put a stake in the ground on Twitter saying, hey, this is not going to happen at Chain React. We're not gonna allow this sort of thing. It's gonna be a very strong stake in the ground. And so in my opening remarks I said, we have a code of conduct. You need to read it. You need to abide by it. This is not negotiable and I'm six foot four and I will find you. (laughter)
And it's even more challenging because you have to guess the URL. (laughter)
And by the way, quick shout out to React Native. We were able to deploy a very quick update to our app to get that URL on there and have it working.
Yeah, I think it was the app it wasn't on. Not our website.
And we're able to get that deployed in a hot fix. That was very cool. So we did stress that we made that very much a centerpiece and we were very, very happy that there were no incidents that were reported or anything like that, which was nice.
I do think assigning roles during the conference for our own team was something we didn't do as well as we could and we're going to work on it this year for sure. Some of our team was much more interested in working it. I mean they've worked it, but they weren't as jazzed about talking to people and that kind of thing. For me personally, it was great because my role was photographer. This project was a project I didn't personally work on internally. Jamon and Ken did, but I didn't. I was working on other projects at that time and so I wasn't really involved. I was the photographer and it was kind of funny because people saw me for the conference as a photographer, you have to constantly get in front of people, look at them with a camera, crawl under the stage to get a good shot and that kind of stuff. I'm just an amateur photographer by the way, but I have good equipment and whatnot. So everyone saw me and sometimes people will talk to me like, Oh you're the photographer for Infinite Red. I'm like, yes, I am. (laughter)
This is our CEO crawling under the stage to get a photo.
Yes, but what's very cool, I would go, well, what do you think of the conference? And they would tell me the truth because I'm just the photographer. And that was actually kind of cool.
That is pretty cool. And now that you've blown your cover, it's not gonna happen this year.
Oh no one's listening to this, Chris. (laughter)
Jamon you touched on the fact that Infinite Red is a 100 percent remote company putting on an in-person event. What kind of challenges went into making this event happen as a remote company?
We cheated a little bit in that we held it in Portland, which is where half our team is. But I will point out that our primary champion of the project lived in  Did she live in San Diego at the time or was it Reno?
She moved from Reno to San Diego while planning it.
So this is happening. She wasn't there to look at the venue. We sent some people in-person to the venue from the local area. And then we also flew Derek up. So this was I think it was actually Todd's idea. Did you come up with this idea, Todd?
Did it work out well then? (laughter) Then yes I did.
I think it actually did.
Then of course it was my idea.
Talk about Derek's experience there.
This is an example of putting proper resources. Derek Greenberg is one of our senior engineers, which from a business standpoint means one of our most expensive engineers, but he's a super foodie, kind of like Ken.
He's way beyond me.
He is beyond you. And Derek is a wonderful, wonderful, wonderful chef. I've been at his house multiple times and him and his lovely family hosted me and served me ridiculously good food. So he was the obvious person to choose what food we had. Now, the question is there's a lot less expensive people. That's horrible to say, but true. And Derek does not live in Portland. He lives in the San Francisco Bay area. So anyways, well we sent him up for, I think a day or two, and he went around and tasted all the food. And then typical Derek-style, he gave us an extremely detailed information about it. And that's how we decided on the food.
Amazing, he had the entire company hanging on his every word as he lovingly described this experience. It was actually pretty amazing.
I'm going to see if I can dig up the description and we can link to it in the show notes because I kind of want people to see this.
If you listened to our previous podcast, we talked about this a little bit. This is one our core tenants of Infinite Red is find where people shine best and don't judge them for things they do poorly. Judging a dog by how well it climbs a tree is not an appropriate judgment for a dog.
Carve the hole to the fit the peg.
Yes. Now none of us are the dog in this scenario. Well, just to be clear. But anyways, having Derek do that, finding out that Frank has stage experience, of course he's going to be there being the stage manager and that kind of stuff. We have such a cool creative team that have so many different personal hobbies. We really had a grab bag of awesome resources. It's really amazing.
Even Derek with his incredible attention to detail, one of the things he brought up in one of the meetings was that he was very concerned that we make sure that there isn't garbage around during the conferences, very clean. That we make sure that we keep the garbages emptied and stuff like that. So we made sure, I think with the venue staff, that that was going to happen. So just little touches like that I think go a long way and the team really stepped up to it. They took ownership really of the conference in a way that was maybe a little surprising even.
This is yet another benefit of hiring a team with with what we call nontraditional backgrounds, is that you end up with this much more interesting diversity of life experience and talents and skills, and it enables you to do things that you weren't originally planning your company to do. It's awesome. Honestly, it creates this opportunity for serendipity that is harder if you're full of Stanford CS grads.
Nothing against Stanford CS grads of course.
Nothing against Stanford CS grads. They're awesome, right? But any monoculture is going to have that issue.
Like Frank's background, I think Frank was in sort of a corporate America. He has an MBA and his background, he's done a lot of, like Todd mentioned earlier in the podcast, he's done a lot of stage work and performances and things like that. And he actually started coding fairly late. Well he had, he had been coding when he was a teenager and stuff, but he wasn't coding professionally until much later in life. So a lot of times you look at someone who maybe switches careers like that and they're kind of behind in some ways in the technical realm.
But what is amazing about that is that they bring all of these other outside experiences and skills to our industry. We kind of need that.
That brings up a really interesting sidebar about career changers, who I think sometimes have a hard time breaking into tech because everybody wanted a cheap person straight out of college or not even college. I think we found that the career changers, the later quote unquote juniors, although it'll take them a little while to ramp up, but once they ramp up, they can accelerate. Once they hit third year, they can pull ahead of a regular junior junior because of all those other experiences that come to play.
Didn't Robin, one of our software developers, didn't she work for a paper company, like a Dunder Mifflin-style paper company? (laughter)
She had a math degree and she worked as an analyst I think for a paper company for a couple years before taking a coding class and people love to rag on the coding classes. But to be honest, if you're good and you just need to learn to code, they're great. It's a very efficient way of doing that.
This is totally off topic, but we'd look in nontraditional areas and we find sometimes overlooked people who are truly awesome and frankly, I'm glad other companies are blind to this.
Well, this is a reflection of certainly Todd and my background. Ken came from a little more of a traditional path in that way.
Just a whee bit more?
I'm Jamon Holmgren and I did not go to Harvard. I worked in construction. I have a thousand hours on heavy equipment like dozers and excavators and stuff. Most people probably don't know that. I spent a lot of my career packing boards in construction sites before I started working in technology and so I was certainly a career changer and I think Todd, you had that experience as well?
Yeah, a little bit different. I started professionally programming at 25, I think. So I did not go to school for it.
Well, it helps that my own father was a career changer. He was physicist, meteorologist, like an academic meteorologist, and just kind of found his way into programming. A, I have some sympathy for that track, but B, honestly my experience with elite institutions also showed me that there's plenty of people at elite institutions who are not that good. It's actually no particular guarantee. It's not, as a gating factor, it's not all that. And when you take into account how much competition there is for those elite people, it just makes sense to look harder.
Just to clarify, we really don't discriminate against elite people. We just don't stack the weight on that side of the scale.
Ken, I have a quick question? You said your Dad was an academic meteorologist. Did he have a stage name for like all meteorologists? Like Jackson Hale, or something like that?
He wasn't a weatherman. He just had, he just had a degree in meteorology.
Jackson Hale. That's comedy gold right there.
Bringing it back to Chain React a little bit. So was the conference worth it in terms of the investment that you put in and if so, what will you do differently this year?
I don't know financially if the ROI was worth it. Ken can talk to that because we're a consultancy that does a lot of development in React Native, even if we lost money on it and Ken can talk to that, it would still be worth it as long as we didn't lose too much just for the marketing, the goodwill and the branding part of it. I feel we ended up selling out, for example, we never told the end of the story.
We actually did not sell out. I think we got close though and we certainly almost doubled our prediction, so that was a really good thing. This year we probably will sell out.
We made every speaker wear a bunch of logos. That's how I think we sold out. (laughter)
They all look like NASCAR drivers.
That's actually a good idea. I'll send that to Shawni.
Financially, it worked out fine. I don't think we ever are going to treat it as a massive profit center. I think the more money we're able to make, most of that we want to pour back in. We do have to account for our own opportunity costs as well as direct outlays, but I think we're fairly confident that we can run it that way. But I would say it was a success, sort of all the way across the board. We're not doing that much different. Like I said, we've tweaked the food. We've dropped a couple of things that no one seemed to care about. So like the social, nobody wants to stick around for the social. They just want to go out and interact socially with the people that they've met or the people that came with or whatever. And so we just gonna let them do that and not waste money on that. But I can't think of anything really big that we're doing differently. Can you guys?
I want to make one quick comment about the social. The cool thing about the Armory in Portland is it's smack dab on a street where you can literally go across the street to good restaurants. You can go down two blocks to good restaurants. So in that scenario, at some conferences I've been to, they're kind of out in the middle of nowhere. So you definitely want some social events. But in this case everyone wants to go out.
Yeah. For those of you who know Portland, it's in Pearl District. For those of you who don't know Portland, it's one of the best sort of visitor friendly walkable neighborhoods in the country, not just in Portland. I mean it's a really, really great neighborhood and that helped. And so our little catered thing probably was not as exciting as the other opportunities out there.
Now we did have a sponsor, Squarespace, who threw a before party. And that was actually a lot of fun. So that's the caveat on that. We're just talking after, I think the first day we had a social immediately after the conference.
I think bringing it back to the financial side of things, I would actually, from what I looked at, I would actually consider it a financial loss. Maybe if you just look at hard expenditures, we were probably in the black, but we also spent a ton of time and if you look at opportunity cost, we probably lost money on it. That again, like what Todd said, it wasn't necessarily the focus of what we were trying to do as far as making a profit center. And I think there's a little bit of a perception maybe in the tech industry that the conferences make tons of money. I don't think that's the case. If you think so maybe you should make a conference and see what you think. But at the same time, part of that was due to our refusal to kind of let anything be substandard, we kind of overdid it in a lot of ways. I think that this year we will probably sell more tickets. We have some things figured out already. We've sorta refined what we're doing. We might actually do okay on this year, but we're also giving more concessions to the speakers and things like that to try to make it easier for them. So there's a little bit of a mitigating factor there too.
Yeah. Even if it didn't make an actual profit, that's not super relevant to me. I think the return on investment is many fold.
Looking into the future, how does Chain React and starting your own tech conference, create a model or framework for maybe future ideas or big ideas that you might want to accomplish?
One thing it did, because we're a consultancy, because we do client work, we have that process down pat. We've redone that process over the years many times and keep on refining it. Internal projects for us is challenging. We don't do that very often, so this is our very first big internal project, so purely as a training or a learning device for our team it was awesome for them.
The first big project that isn't an open source project.
We actually regularly point to Chain React lessons and experiences when we're talking about other internal projects. It's actually been really good as a reference point. Do you remember this with Chain React? You remember that with Chain React? And it kind of gives a reference point for other internal projects. It exposed certain aspects of our team that we hadn't really considered before. Because it was such a different thing. I know that we as founders had a meeting after Chain React and talked about some of the lessons learned from that and I don't think we'll necessarily go through every last little detail of that, but it was very kind of eye opening to us about the way that we had structured Infinite Red. The title of this podcast is Building Infinite Red and I think that Chain React was a key forcing mechanism within Infinite Red to expose some things that we hadn't been exposed to before. If we just did consulting work, you tend to get some blind spots.
So Chain React was amazing for that. It was really, really good for that because it was so different from what we had done otherwise.
Worse case scenario, the team had a lot of fun doing it.
I think my favorite memory from Chain React was when it was done. (laughter)
I think that's Shawni's favorite memory.
Thanks a lot, Ken.
Sorry.
When Chain React was over, I think half the team went to a nearby restaurant and we were all exhausted. We had been up for two days just working from pre-dawn to dusk and there was kind of this feeling of let's just go get some food to eat and let's collapse into bed. We went to a restaurant and we sat in this booth and there were probably, I don't know, nine of us, 10 of us, something like that. And some spontaneous kind of reflective conversations started happening that were just amazing. One of our developers said, this is nothing I expected signing up at Infinite Red. This was an incredible experience to be involved in this.
Was that Kevin?
Kevin was was certainly on those same vein, but the person who actually pointed this out was Frank and I remember that very clearly. His wife was able to come and help us with the conference. It was really great.
Camille was awesome.
She was great. And then also my son Cedric, who at the time was 12 years old. He of course was on summer break from school and and he helped out. He had a t-shirt on. He was able to-
Cedric was awesome for a 12 year old. It was amazing.
Yeah, he's a good kid. And he helped out. He was great. He would talk to people, he would give them directions. If someone needed someone to run and get something. He was very on top of things and he was there at that table as well and kind of just kind of absorbing the vibe. It's one of my favorite moments at Infinite Red. It was kind of a result of all of the work that we had done and what we had accomplished at that point.
Correct. And Robin Heinze's father came and did some volunteering and we had a lot of people come and want to help. It was really, really fun in that regard. One thing I would like to bring up is the Armory is a very cool intimate setting. I'm not using that as a nice way to say small. It's actually not that small and it has a big theater, but it only holds about 500 people, which is about what we sold. So we're redoing in the Armory this year and so we have a cap on how many people can show up because it only holds 500 people. We actually had a big discussion after the first Chain React on whether or not we wanted to get a bigger venue because we could probably sell more tickets.
We decided against that because we sent out a survey to all the attendees. We sent a survey to the speakers and we got some feedback. Everyone loved the intimacy of the Armory. And the Armory, just real quick, it has a bottom floor where we had vendor booths set up. It's like an atrium. There's a big hole cutout of the top floor, so the top floor is like a donut. There is a staircase in the middle of the bottom floor that circles around and goes up to the top floor. So we had the whole bottom floor. We had a whole top floor. Up to the top floor, there was chairs, there was the coffee station, an alternative food station when we were serving lunch. And there were some vendors out there as well. Even if you were on the second floor, you're always in this room where all the action's going on. You could look down and see people. So although it's large enough to hold 500 people, which is a fairly large area, you can't put 500 people in a very small area. Fire marshals am I right?
Because of the structure of it now and then you left that room and went into the theater, which is more like a traditional theater, like a movie theater, but it was course has the stage and stuff because it's for presentations, but when you weren't in the theater you were always within earshot and always within line of sight to everyone in the conference and so although it was 500 people, it felt like there was 20 people there and I personally got to talk to at least half the people. Anyways, long story short, it was a big decision to say no. We want the feel of the conference to be the same, so we're going to cap on how many people we can attend, which does affect finances and that kind of stuff. Obviously when you scale higher, all of the little expenses get smaller and it's always better financially to be bigger than smaller.
Hello, Chris. This is Todd, CEO and founder of Infinite Red, for those who don't recognize my voice. It's a super important question. We run the company as a Council of Elders. The three founders all have equal power and equal responsibilities, but we all choose various parts of the company that we focus on. And one of my main focuses is the team, so this topic's very interesting to me.
I would start out defining our opinions on what different roles of management, leadership, coaching are, so people have kind of a frame reference. There is management, but that's a purely logistical thing. For example, we're a consulting company, and we have a lot of projects, usually six to eight projects going on at once. And we have to schedule those. So, that means putting blocks into holes on the schedule, figuring out resources, that kind of stuff. That is management. There's no real leadership going on there. There's certainly no coaching. I mean, there's some, of course; it's not a perfect science.
But those kind of tasks are management, in my opinion. We manage what's necessary, but we don't manage what's not necessary to manage or what would be better served by being a coach, to use a sports analogy, or being a leader. That's kind of the primary thing. We can talk about later what bad leaders do. One of the things they do just to highlight what I just said is they only manage; they never lead, and they never coach.
And then we have leadership and coaching. Could be the same thing, but I'm gonna break those up just a little bit. A coach's job is to find the best teammates that they can at the time with the resources that they have, and put people in the jobs that they're best at and maximize those people. Coaches don't say things like, "All players suck. I'm losing because you can't find good players," because it's literally their job to find those players and to maximize them and to put them in the best spot possible. That's what I consider coaching.
Leadership is everything else. Leadership is you're leading, and you're guiding people to where they'll be most effective. You're guiding people through problems. You're the first one on the battlefield, in my opinion, and you're the last one on the battlefield. You lead by example. It's everything else that goes in, all the soft skills of helping a group of people accomplish tasks and goals.
Yeah, thanks, Todd. This is Jamon, founder and COO of Infinite Red. I think one of the key aspects of maximizing your team comes down to trusting them and providing the right level of support. So, a lot of companies will put in place restrictive policies that are more along the lines of trying to kind of shoehorn their employees into behavior that they want to see.
And we take a very different approach here. We're very resistant to putting in place policies. We may give some guidelines that are more along the lines of ideas of how you might approach something, but we rely more on trusting them to make the right call, and if they don't make the right call, to respond the right way. And we can provide support for them if they need help, if they need encouragement, if they need course correction, whatever, we can do that in a supportive way and not so much in a management way. And that's what Todd's talking about when he's talking about the leadership.
But, yeah, it's about trusting your team. And it's about putting them in places where they can succeed and not putting them in places where they're not well suited, finding the right path for them. You can put someone in place as, let's say, a programmer. And if they're struggling, you can just sort of like flog them. You know, not literally, but just sort of put a bunch of pressure on them to get their job done faster. And that's how a lot of bad leaders approach maximizing their team.
From our standpoint, it's a very different approach. It's more of an open approach. It's about trying to find what they're really good at, and then letting them go, letting them do their thing. There are many examples within Infinite Red, which we can talk about, where people have taken the initiative and done things that are outside of their normal job description, but which they're interested in and which they're good at. And that is more where we see the maximization of the talent that we have.
How do you hire for culture fit within Infinite Red?
Ken Miller, CTO and founder. I would say the easiest way is always a referral. Always, right? I bet everybody's gonna tell you that. The hardest, almost impossible way, is just an interview of somebody off the street. One thing we've kind of done that's sort of in between is we've hired freelancers. So, from time to time, we have more work than our core team can handle, and we'll bring on a freelancer or two. And on a couple of different occasions, we've liked them so much we're like, "Hey, do you want a job?" And that's worked pretty well.
It's actually pretty difficult to hire for anything, much less culture fit. I am still dubious that getting a bunch of resumes, doing interviews, and choosing one of those people is any better than randomly picking someone. I'm sure people have done studies, and it's probably better, but sometimes it doesn't feel like it's better.
What we are particularly good at is we have a strong culture, and we have a strong idea of what our culture is. And we have a strong idea on what attributes that our people to have. We let a lot of our team interview. For instance, Chris here, when he was interviewed  I don't know how many interviews he had, but it's probably like 10. We let anyone on our team   and we're a team of 26 people   interview everyone if they want to. We try to get a lot of people to interview them.
Different people are looking for different things. For example, I am solely looking for culture fit. I assume that the people that came before me, like Jamon or Ken, if it's a technical position, already interviewed them for technical stuff. I assume by the time it gets to me that they're qualified for the job. So, I really just chitchat with them and try to see if they're a cultural fit.
Yeah, and one of the dangers with trying to hire specifically only for culture fit is that you can end up with a monoculture, and that can be a problem. And so that's something that we watch for. When Todd's talking about cultural fit, it's very much more about specific values that are kindness and helpfulness and things like that that are more about humanity and the type of person that they are, more so than maybe a specific culture, and I think that term probably needs to be defined a little better as we go through here.
No rock stars.
That's right.
Or ninjas or unicorns.
No, yeah. No rock stars or ninjas.
What about gurus?
No gurus.
Well, we'd have to see about a guru. I don't know, we'll see.
Yeah, so just real quick, our main cultural fits, the soft stuff, is supportive, kindness. I would say even creative would be one of mine now.
Absolutely. It doesn't matter whether they're a technical person or not, creative is absolutely one of our values  Todd, you've talked about  What was that that you sometimes say about creativity?
I do believe very strongly that the company and day-to-day work life should be fun, and as little stress as possible. And the reason I say that is the most creative and the best work comes out when you're having fun. Like, I like to joke around a lot. People sometimes say, "This is more of a serious matter, don't joke."
I don't agree. If someone's doing brain surgery on me, the doctor, I want him to be having a great day, feeling good, making bad, inappropriate jokes about my tiny brain, that kind of stuff. Because you know what, when you're in that mood and you're having fun and you're in that mode, you do your best work. I can think of almost no place where that's not true. I don't know if that's what you're talking about, Jamon, but when you're having fun, you're being creative. When you're being creative, you're solving problems with more than just pure nose against the grindstone.
Yeah. And some of the other attributes that we evaluate on are productivity, leadership, being pleasant, being a good communicator; those are all soft skills. And it's kind of interesting because I sometimes get questions on Twitter, "What do you look for in a developer?" And my answers are usually probably more soft skill than people would expect. I'm not necessarily looking for hard technical skills. That's not what we value as much.
It's always been very important to me that we make the work fun, that we find people that enjoy what they do, find as many as ways as possible to make them juggle. It's not always possible. Different clients are going to be different ways. Different projects are gonna be different ways, but as much as possible make the actual work fun as opposed to, what a lot of startups I've seen do, which is a lot of booze and free food to numb the pain of the work that you're doing. That's a very, very, very strongly held view for me.
It only takes about a week to build culture at a company because that's how long it takes to get the ping pong table delivered. (laughter)
And we have to deliver a ping pong table to every single employee's wing and we have this elaborate system for simulating the trajectory of the ping pong so you like hit the ping pong ball and you kind of measure where it went-
That's what we spend our time on.
You have somebody send you the  That's a lot of work.
That's a typical startup.
We put together a presentation for a change in some of our strategy and showed it to the team when we're all together in one location last fall. And one of the things we had was this sort of like seven points that we were looking for, and I actually pulled it up on my computer so I can remember what they were. It's creativity, productivity, quality of work, communication skills, being a pleasure to work with, consistency, and leadership.
Now not everybody is great at all those things obviously. Some people are more strong in the communication side of things. Some are more productive. Some are really, really great at quality. It's a mixture of those things that makes Infinite Red. But that's what Todd's really talking about when he's saying that he optimizes for the culture fit, what he looks for, the things that they do well. And all the technical stuff, I mean, it's important but people can learn the technical side of things.
The reason that we don't focus as much on raw technical skills  I wouldn't agree at all that we don't focus on it. We definitely want people who can do hard things. It's just that the world of software development began its life in a world where humans had to contort themselves into the world of the machine very heavily. You had to really, really intimately know how the machine worked, and that was a pretty rare skill; people who could kind of form the mental model that they needed to in order to work on these old machines.
Steadily, over the decades, the slider between the machine and the human has gotten closer and closer and closer to the human side where your job is not as much to mind meld with the machine, it's to really to intimately understand the human's problem and translate it into the high level languages that we use now for the kind of software that we do, application-level software. Like, we're not writing operating systems or databases. We're not writing Google-scale, massive data-crunching applications, that kind of thing.
For things where the human factors even all the way down to the technical level are the most important. So like manageability, that's a human factor even though it's highly technical. Having people with the soft and social skills who can also think in the abstract where you need to to be a programmer or in the way that you need to be a designer as well in this sort of breaking problems down in your mind.
We've seen many more project go awry because of soft skills than because of hard skills.
Yeah, I agree with that. There's a line at which, of course, all of our people have to be competent in their jobs, whether technically on the engineering side or on the designer side.
Yeah, I think it's a lot easier to test if someone who you are looking at to be on your team, whether they have technical skills, it's a lot easier to look at someone's portfolio and see that they're a great artist on the design side. These kind of real, tangible things. The reason we're not talking about it as much is not because it's not important or that we don't have these great skilled people, because we do, it's just a lot easier to determine that part. And by time, it gets to us determining if they're in our culture, we've already assessed that they have these skills.
I feel like that doesn't give us a competitive advantage to figure out the easy things that everyone can figure out. So I don't want to give the impression that we just don't care about them, we totally do. The soft skills or the cultural fit is where I think you can have a competitive advantage and where you can as a coach part of your job, select the best players for your particular team. It's a sports analogy. I don't know why I'm using all these sports analogies. I'm not even a sports person. (laughter)
The truth is that as far as hiring is concerned, I wouldn't say that we're necessarily great at it. And that's not to say that we've hired a bunch of people that aren't good, they're really great. I think in some ways maybe that reflects more of our ability to intuit what will work well and what doesn't. But I think that you get good at something by doing it a lot. And we haven't actually hired a ton. We've purposely have kept the team small.
I don't know if there's a sweet spot some place. I feel like being very small it's harder to do hiring because as Jamon says you don't get a lot of practice. Being large, I think it's also hard to do hiring because you have to have so many layers of filters that you get lots of false negatives and false positives just by virtue of the scale. But like, I wanna believe that there's this place in the middle, but I don't even know if I believe that. Hiring is just hard. There's no silver bullet.
There's also the turnover is a factor in this too. And we really don't have turnover. Pretty much everybody that we started from 2015 has stuck around until today and that's something that we're very proud of. That may change at one point, but we're very proud of that fact. It does mean that we don't hire to replace, like we haven't. And we only hire to grow and we're growing very slowly.
Jamon, that brings up a really interesting point in which, when Infinite Red merged from two separate companies into what it is today, there were two different cultures where, as a team, you had to learn new personalities and learn how to work with new people so how did that change this dynamic?
Yeah, from my perspective, it was  It actually kinda floors me how well it went considering what we had to deal with. At ClearSight, we were a  That was my previous company that I started in 2005. We had a long history, so some people had worked with me for a very long time. I mean, I hired everybody as a brand new junior. I mean, I didn't hire hardly anybody who had experience.
We were not remote as we discussed in our previous episode. We were not remote at the time. And we had a different business model the way that we worked at ClearSight versus Infinite Red, LLC, which was Todd and Ken's company at the time, they were very senior-heavy. They had all seniors. In fact, I think almost everybody at Infinite Red, LLC was older than me, and I was the oldest person at ClearSight. So that was an interesting aspect.
There was a lot of Metamucil at Infinite Red. (laughter)
This episode of Building Infinite Red is brought to you by Metamucil. Get your fiber in today. (laughter)
You have to keep that in.
Yes. So that was an interesting aspect because it was very different. We were in Vancouver, Washington area most of us and they were down in the bay area, a little different style there. It was just different vibe in the two companies, but it went really well, and that's something I think we should talk about.
I'll not paint as a rosy picture as Jamon did. It did end up very well through a whole lot of effort and going forward. I do want to interject real quick on the last thing. One of the qualities we look for, and it also plays into Jamon's comment about monoculture, I consider us a little band of misfits, and that's on purpose. And we're misfits in a variety of different ways all over the spectrum. I won't go into different ones, but we have a wide variety of misfits, and I think that's a very important part of our culture, which I enjoy very much.
We're the island of misfit toys.
Correct, except for we're not toys and we're not 
Yeah, there's no island and we're not toys, but otherwise, we're a totally the island of misfit toys.
This episode brought to you by competing metaphors. Metaphors; the things that we compete against. (laughter)
Yeah, the culture was quite a bit different. We put a lot of effort and this is a team effort as well as a leadership effort for sure, and it took a while, but the end results I do agree with Jamon, it came out really well. Obviously, we didn't have anyone quit, which is fantastic, which is a major accomplishment. And, of course, the two cultures changed each other, and we came out as a third culture.
Yeah, totally.
Which was very hard, but very exciting.
One of the things that happened when we merged was Vancouver, Washington is for the Pacific Northwest anyway, a relatively kind of conservative area. And obviously, we were here in the Bay Area, which is not a conservative area, and we were a little worried about that. Like we were a little concerned like, "How's that gonna play out?"
Especially during the time that it was, 2015, all of the stuff that was happening back then.
Yeah, and I think that we managed it pretty well in the sense that I think we set standards for how you interact with your colleagues.
We created special Slack rooms. People wanted to argue about politics, they can go and argue about politics in certain places and it was pretty much banned anywhere else, saying like, "You know, if you want to talk about these hot button topics, that's fine. Here's the ground rules, right? Like, you're always respectful, and you do it over there where people who don't want to have to interact with that don't." And that's worked pretty well. I don't go to those channels, and I don't really see it come up very much.
And people generally  Like, we will see people who we know have completely different viewpoints working together great and having a great working relationship and having mutual respect, and that is sort of the core value that we brought to that. And I think that's also the core anecdote to any of the monoculture concerns if you set the grounds rules that like, "Hey, you can disagree, but like this is how you can disagree. When you're at work, this is the way you that can disagree." Part of the reason we wanna grow slowly is so that as people come in with their different perspectives, which we really value and we want people to be able to share their perspectives, they abide by these rules about how we get along and make something together.
Is this an instance where policy is actually a good thing where you're setting-*
-maybe rules of engagement for how people should interact in certain arenas?
I mean, it's the exception that proves the rule a little bit. It's not that we don't have policies; it's that we don't want to manage by policy all over the place, right? It's sort of like, "Here's a few  Here's the constitution, right? Here's a few rules about you interact with each other," but then the rest is like common decency.
**TODD, YOU MENTIONED SOMETHING IN THE SLACK CHANNEL IN PREPARATION FOR THIS EPISODE ABOUT THE QUESTION, "WHAT DO ENGINEERS AND DESIGNERS CARE ABOUT?" AND YOU INCLUDED SOME FUN THINGS, BUT THE QUESTION I HAVE IS WHAT DO ENGINEERS AND DESIGNERS CARE ABOUT AND ARE THEY SIMILAR THINGS OR ARE THEY DIFFERENT THINGS?
The short answer in my opinion is, no, I find engineers and designers to be very similar. A lot of people think of engineering as math. I think of engineering, and I'm an engineer myself, as much more creativity, at least the kind of engineering we do, than more like mathematics and that kind of stuff.
To answer that question, what do they care about? I would love to actually hear Ken talk about what engineers really care about as opposed to maybe some other professions, what they care about. And I'm referring to stuff like money-
You mean, like what would motivate them? Is that what you're asking?
Correct, yeah.
So I always said that like you have basically three levers to pull when you're hiring. One is money, which is not as important to engineers as you might think. I think it's important that they feel that it's fair, but I've seen very few engineers ever be motivated by more money than the fair baseline. I mean, everyone wants more money, right? Don't get me wrong, right? Everyone would like as much as they can get, pretty much. All else being equal. But all else isn't equal.
And so lever number two is interesting work. That's a really big one for some engineers. Not as big for some other people, but for some people that's a huge lever, and you could like throw money at them, but if you have to work on a finance system or something that they just don't happen to find interesting, they're gonna be like, "I'll pass." I was always that way. I think most engineers frankly are that way or they'd be working at hedge funds.
And the third lever is lifestyle. How close are they to work, like do you have the ping pong table if that's what you care about, do they give you free food if that's something you care about, and for us obviously, the remote work piece is the big giant pillar of our working environment.
You know, it's gonna be hard for us to compete with Google or Microsoft or something just purely on amenities and dollars and things like that, but when our engineers maybe look around, they have lots of choices. They're great engineers and they have a lot of options, but they look around and they say, "Well, they're not remote work. They don't have this particular culture. They don't put a high emphasis on it." Maybe some of them do have remote work programs, but they're not a core part and piece. And so that's something that we lean very heavily on and the lifestyle part of it where families are part of what we do. If I have my 4-year-old daughter bust in and wave at the sales lead on the video call, that's fine. That's just a part of how we work.
And a huge part of our mission, I think, is that returning people to their families and communities so that they don't have to live in San Francisco Bay area or New York or wherever. They don't have to come in to commute. They can live in the town where they grew up. They can live rurally. We have a number of people that live rurally. They can live nomadically. We have one guy who lives nomadically. That's the closest thing I think we have to like a real mission, like a guiding star for like what we want to see in the world. And it's been central to our belief in remote work, that people's living situation should be based on their personal life and not on their professional life.
It's not just our remote work. We respect people as humans, more importantly as adult humans. I personally have an aversion to people controlling my time.
Well, controlling for no reason, right? Controlling just to control.
We don't own people's time. We don't own people's location. In my opinion, that stops being acceptable after childhood. Now, of course, if you have a responsibility and you've agreed to those responsibilities and you have a responsibility to show up at a meeting at a particular time, that's different. But we don't control people's time or place and I think time is actually a very important part to lifestyle which I agree with Ken, our team especially finds very important.
So the title of this episode is I think Maximizing Your Team or something along those lines, and when I look at the word "maximizing", we even thought about changing the title when we were first starting this, but because it feels a little bit off in some ways to our core values. It just occurred to me why.
We do believe that we should maximize our team, but not in a way that is purely Infinite Red serving. It's more about maximizing them personally, their particular lives. So we give up some productivity in order to maximize their flexibility. We give up some high bandwidth situations so that they can live remotely in other cities. We give up some things that maybe if we were strictly optimizing for maximum productivity would be better in certain cases. And although, even some of those are arguable. I think we'll probably talk about those in future episodes, but maximizing them is more about maximizing them as people and not just as employees.
I'm really glad you brought that up because, yeah, the title's a little weird to me as well. But our job is to lead people towards their best version of their work self. Obviously, everything we're talking about is an ideal and nothing's perfect.
But I used to ice skate, for example, and some coaches would just tell me everything's great all the time. Those coaches didn't care. Their job literally is to help me improve. So if I'm doing everything wonderful, then that's not helping me improve. I take the same approach with people and my job is to, in a supportive and kind way, as often as I can given my time help people improve. Well, a couple things for that. One is you want to find the right places for people.
Getting angry at a dog because it doesn't climb a tree as well as you wish it would is stupid. You can take a dog and push it towards the best version of a dog, but you can't make a dog a cat. I know, I've tried. (laughter) I'm just kidding. And that's super important. I think a lot of leaders  Let's call these people managers just to be derogatory. (laughter) A lot of managers will try to make dogs into cats and they complain to all their manager buddies over their cheap beer that employees all suck. And I've said this in a previous podcast, I'll say it again, employees don't suck, you suck. You're a bad manager. Just stop trying to make dogs into cats and try to optimize, make it the best dog that is possible given the time and the particular point of the path that that particular person is on.
I don't know why I'm calling the team dogs, I'm sorry about that. I love you, team.
I was gonna say, this is probably the reason we don't have any ambitions to become a very large company because, frankly, once you're at a certain scale, it becomes impossible to do what we're talking about. Like the company needs people to fill particular sized round holes, and they will expect people to shave off their corners in order to fit into the round holes. That's just reality. I don't even think that there's anything wrong with that exactly and some people thrive in that sort of environment, but we try to look at, yeah, what's the best version of this person and like how can they fit into our team rather than doing it the other way around?
And because of that we tend to hire a little more generalists than maybe a large company would where you can afford to hire a bunch of specialists that only do one thing. Even though we hire generalists, we're still looking for their particular set of properties, what they're good at.
Also, from a leadership standpoint, a leader enjoys working with people who have issues to work on. A manager, which once again I'm using as a derogatory term here, only wants the good people that they can be lazy about and just works. But think about that for a fact. Like I want to be a painter where all the canvas I get already have the paint on them. I want to be a house builder where when I show up to the work site, the house is built. Your job is to literally to help people improve in their work and to help them be the most efficient and the most creative and the most fulfilled that they can be. Why would you complain about team members who have problems? That's literally your job.
Team members who are awesome, they don't need me. We have them and that's great, and I still try to help them move forward, but, of course, the further along one's path to their ideal craftsperson or whatever, the less they need you. And, in that case, its more just morale and that kind of support. But what makes me excited as a leader is the people who have quite a few issues to deal with and how to creatively come up with a way to help them deal with that.
You're kind of hinting at it, Todd. And I think there's this underlying thread that in order to maximize your team, it's really about being a leader not a manager. So what are some of the ways that people can approach building a team? What does it look like to be a leader?
One, care. Two, work hard. Three, who knows? Four, profit.
That's basically it. I wish there was like a nice summary, a nice silver bullet going, "Hey. Be a leader trying to this one weird trick."
The CEO at a startup that I was at for many years where I built a team, he was like, "You know, I don't know what your magic is."
I'm like, "There's no magic. I just care."
And it can be exhausting at an intense startup. It can be emotionally, physically, super draining to do that really well. I had to rest like to the point like I went and took just a regular engineer job for a couple of years because it took a lot out of me, and so the hard part is not how do you be a great leader. That is, you care and you pay attention. The hard part is how do you be a great leader sustainably over time without it destroying you. And I think having co-founders really helps with that. This is what I've definitely discovered.
I agree. Some of my most draining weeks have been working on team issues, working on developing people and kind of working through all of that. It's something that you're not really trained at as a software engineer. You end up being, in some ways, kind of a psychologist or something along those lines where you're having to think about a lot of issues and melding personalities and competing priorities and all of those things.
I actually talked to my brother-in-law last night and one of the things he mentioned about his job is he went from doing some kind of individual contributor type work to managing a team. And he actually built the team. It was a design team. And he said that it took years off his life doing that because it's not something that came natural to him. And he is the type that absolutely cares. Like he is a very kindhearted, very nice person, and he really cares. And because of that, it was absolutely draining.
So I think it's across industries, across disciplines that sort of leadership is  It's hard. It's not easy to do, so that would definitely up on my list of things that tire me out in a given week.
One thing I want to interject real quick before I go on to my next point, never confuse kindness with weakness. That's a pet peeve of mine. It's sometimes the kindest thing to do is grab their hand and yank them forcefully out of the traffic of oncoming cars.
Secondly, I don't  I guess this is why one of my focuses is team, it doesn't drain me that much to be honest. I really enjoy it. Any day where I'm only interacting with our team as opposed to worrying about business problems or maybe interacting with outside people is a good day for me to be honest. I feel good about that.
As far as what does it mean to care and what does it mean to work hard? Well, one, get to know your team. If you can't say your team member's spouse's name whether it's a wife or their husband or whatnot, that's a problem. One of my goals is for us to all to be in a meeting with someone from the outside, and I can go around the table and introduce every single person, know about them, talk a little bit about them. That's huge; just simply knowing people.
Also, the other thing that's super, super important  And, gosh, we could make three podcasts out of this to be honest in my perspective. But one of the things that's super important is when someone does have a problem or they make a mistake or something like that, they feel comfortable coming to you. I had some person recently come to me and say, "Look, I overslept. I missed my alarm and I missed a meeting." It was a client meeting, and that's one of the things that is kind of no-no here at Infinite Red. But they came to me and said, "I just wanted to let you know so you heard it from me first." That's awesome.
Well, in this case, I didn't actually say much to be honest because they already knew what they did. They brought it to my attention. Like the end result was done by them. My real job was making them feel comfortable to come and tell me that. If you can have people tell you when they did something wrong instead of hiding it, that's a gold star day for you as a leader in my opinion. That's hard to do, but you have to make people feel comfortable. When they make a mistake, you almost celebrate the mistake because mistakes are what we learn, and you don't beat them up for it but you are firm, fair and kind in response to it.
And on the subject of mistakes, we make tons of them. What we're expressing is our goals and our practice. Just like engineering or design or any of the tasks that our team does, this is our ideals. Sometimes we fall down, and we try to sort of notice and correct. I'd much rather have a system that's built on that feedback loop than on one that is built on never making a mistake. That's part of our kind of our ethos of resiliency that we hope that we are instilling in our employees by embracing ourselves.
Yeah, we make lots of mistakes. One of the things I tell clients is, "Look, we're human. We make mistakes. I would ask you not to judge us on the mistakes that we make. I would ask you to judge us on the speed and the effort we make in correcting those mistakes because that is something we can control. We can't control this being perfect. We're not." And I think the same applies to our team, and hopefully if the team feels it applies to us because I would imagine we make more mistakes than most.
I think it's important because that's sort of how we met. We were all part of a Ruby Community, we were contributing to the open source within that community, and we were collaborating on some things. So from the very beginning, it was like, the community itself was kind of the fun part. I mean the technology was fun too, you know, don't get me wrong, but community was such a great part. It allowed for some opportunities including the ability for me to meet Ken and Todd and then of course, eventually get to know them. And so, we saw the value of community right from the very beginning, even before Infinite Red came to be.
I would agree with everything that Jamon said. Obviously, it's how we met each other. Open source community, speaking at conferences, which is a community event. I met a lot of my, I would call friends through such communities. But more than that it's a way for us to be part of something that's bigger than ourselves, bigger than our little company here and associate ourselves with like-minded people. And I tend to choose communities and hopefully I'm building communities of people that I respect and feel good associating myself with.
How would you define community? Because community is one of those words that, we all use the word but do we all mean the same thing when it comes to using the word?
I don't know what the definition of community is. Ken will know exactly I'm sure but to me it's just people who've decided to group up together around a particular ideal, a particular subject, a particular interest. I guess I could sum it up for myself, when I need something or want to express something, this group of people is the first people I want to express that to or ask for help from.
It's a tough thing to define right? It's one of those sort of squishy concepts, you kind of know when you see it. But trying to pin it down to what exactly is community, what isn't community is pretty hard. For us, community has largely been centered around open source. That is a very particular kind of community. But I'd say it's narrower than that too, right? It's not like we're talking to Linux developers, we're talking to people who have similar professional experiences to us. And that has always been the case.
Like you kind of flock to people who can kind of understand your pain. And so, for us, contributing back to the community in the form of sharing insight, in the form of sharing code has always been about saying, "Hey, you know what? We feel your pain, let's make it better together."
And one of the unique things about the community that we have been a part of is, it's never been about location. There's a community here in Vancouver, Washington. There's a larger community in the Portland metro area. And we're certainly a part of that. I go to meet ups, I go to events here in Portland. And they're good. And you do get to meet people and you have a commonality of location and also to a great degree, interest or technology or whatever it is that you're centered around in a meet up. But our community hasn't been about that, with the Infinite Red origin story. Ken and Todd, did know each other because of location, but it had already become remote before that.
I remember when I first started building some open source, one of the people that kind of quickly became a part of my little community there was a guy that actually still works for us here, Mark Rickert. He started contributing and he was over on the East Coast and I believe, South Carolina at that time. And he came in and contributed and we had a lot of great conversations and bonded on some things. There are a lot of interests that were similar at that time. And it was really great because the community could be centered around something other than just location, which I think is something maybe a little bit more new in the past.
It was kind of interesting. So you asked that question, which is difficult to answer, but as we talk more, which is a great thing about conversation, new things are coming to my mind. Community can mean very different things and we all belong to many different communities. One is around physical things. Jamon meant some location, but it could be, you belong to a community of men over six foot four, and you have your own, I'm speaking about Jamon here (laughter), you have your own problems and when you discuss things, there's a camaraderie that comes from a shared experience of a real thing.
Hash tag, tall people problems.
Yes, a lot of communities, they've grown from a seed of an idea or an ideal and that's probably more common in a lot of the communities we, well, most of the communities, from a professional standpoint, that we either contribute to or belong to or even, in some cases, create are around ideas and shared interest and that kind of stuff.
In what ways have you intentionally grown community? You've talked a little bit about open source projects, but what are some of the other ways that you have done that?
We use a product called Community Miracle Grow.
It works great. One of the things that occurred to me, I think it was, I don't know, a year and a half ago or something like that, was that we had this community. It had already kind of come to be, but there wasn't really a standard place for them to congregate. There were people who were kind of fans of our open source work, who understood what we were doing. They were interested in our conference. We created a Slack team. Slack of course, being the chat system that we use and we created a community version of the Infinite Red Slack. So people could sign up at community.infinite.red. They could go in there. There were different channels that kind of group people based on what they were interested in. Of course, there were some that were more popular, the Chain React channel, the Ignite channel, which is our open source React Native, boilerplate CLI system and also just React Native in general.
We pushed the community just to see if there's interest. And there was a lot of interest and we are able to also do some things like, people had some questions about Ignite. In this Ignite CLI, it actually directs you to our Slack channel and we have gotten to know some of those people and also have been able to lean on some of our community members to answer questions and diagnose issues. And things like that.
It's totally off topic. But I love how effortlessly Jamon inserts plugs first off into the podcast. It's inspiring. (laughter)
My Twitter handle is @jamonholmgren. (laughter)
That was not quite as smooth, but I still like it.
Once you edit it, it will be smooth.
One thing that is interesting is, how to you view Twitter in terms of community building as well?
Double-edged sword. Well, actually like the handle is a double-edged sword to a double-edged sword.
Twitter is an interesting one.
Yeah. Twitter is an interesting place.
I, personally, don't have an answer to that. Back when I used to promote my own personal brand, I used Twitter a lot and that seemed straightforward to me. But I got to a point, this being my third and final company, hopefully, for my life, where I'm much more interested in promoting Infinite Red than myself, and I have not figure out how to do that. I think Jamon does it much better so he probably has lots more interesting to say.
Jamon does it by being genuine, is the thing, right, he's just there, he's being genuine. He's not shy about promoting stuff that we're doing, but he's also not a spam feed.
Yeah. If I am spamming something like I have been this podcast, to be honest, I will kind of acknowledge that upfront. Like, "Hey, I was spamming this. It was just released. Give me a break." I'll back off after a bit.
I enjoy Twitter. It's opened up a lot of opportunities for us. Twitter's been a platform for us and it's been good. I love showing off my team's work and I had a one of my team message me the other day and said, "I love how you're always promoting your team. Telling other people about what your team's doing." That was someone on our team. I feel like there's a lot of really great work being done and nobody wants to talk about it at Infinite Red. So I guess have to because I want people to know what we're doing. It's very cool.
You know, this podcast in a way sort of came out of Twitter in some ways. It initially started with my friend, Kyle Shevlin. He and I were chatting a little bit and I was kind of lamenting that, "I don't do much code anymore, so I don't have a lot to talk about when it comes to answering questions on Twitter or kind of talking about various things." He was like, "Well, what about the business stuff that you're doing? That's interesting to people." He was just like, "You have a lot talk about."
And so, I put out a tweet saying, "Hey, if you have a business question, if you have anything. You know, I've learned a lot in the amount of time that I've spent doing this." And I got a really good response. A lot of people asking questions. It was really cool. And then the best part about it was that I could bring it back to Todd and Ken and show them the tweet and they would monologue for a bit or dialogue for a bit. And we would go back and forth and at the end of that, we would have something really interesting to say. And I could put that out there. It had my name on it, but I try to be careful about always tagging Ken and Todd in the tweets and saying, "this is kind of a amalgam of all of our responses."
And it worked really well and then once we kind of you had that experience then we said, "Well. you know what? We do have a lot to say. And so, since we have a lot to say, why don't we actually say it in a little different medium." I mean that's this podcast.
So Twitter has been very influential in a lot of ways and some ways, responsible for this podcast. But definitely a shout out to my friend, Kyle Shevlin for sparking that idea.
Jamon is like my Twitter agent. (laughter) Like I have more followers because Jamon has like quoted me than from anything I've ever actually tweeted myself.
Ken's a pretty private person and he has a lot of incredibly insightful things to say that will forever die in a Slack channel somewhere, if I don't go out there and say it. (laughter)
So. Yeah. I can't help myself.
Honestly, I feel very lucky to be co-founders with Jamon.
Yeah. I agree with that.
Awww, thank you.
Because you'll go out and do that kind of thing and it's just totally natural for him. It's not like we're pulling teeth to make him do it but it means that it gives us the kick in the behind that we need in order to get out there and talk to people.
I think what's interesting though is as you're talking though, Jamon's one type of person that you would need in community. Ken, you're obviously the other type. And then there's Todd, who's the jokester that that brings the lightness and levity to the community so it's like, I guess community makes sense in this context with the different personalities.
I was seriously hoping that you're going to say, "Well, nobody really needs Todd."
Well, Todd has feelings. And so, we want to make sure that we acknowledge those.
It's not true. We totally need Todd. But Toddit would have been amusing. (laughter)
In that context. Leave the jokes to the professional.
Leave the jokes to the jokester.
But one thing I want to say before Todd jumps in here, is Todd is the sort of you know, he keeps things light and stuff like that but he always has very strong convictions, very strong things that drive who he is and that comes out in our community very much so. That's a very core piece to our community that I appreciate about Todd.
So I want to clarify a few things. A, Todd does not have feelings. (laughter) No, I'm just kidding. You know, it's interesting because I'm a very outgoing introvert, which is funny. And I have no shame whatsoever, but for some reason, I don't promote as much as I used to in the past. I don't know why. I'm glad we have Jamon to do that. This is inside baseball so maybe not very interesting to people but 
Todd, you were pretty good about promoting Infinite Red before I joined.
That's true.
Infinite Red from our perspective. Because we were kind of first to the RubyMotion scene. I think Todd and Ken came in a little later, but they quickly kind of grew like a plague all the way throughout. (laughter)
Okay, that's the wrong analogy.
No, keep that.
They grew very quickly throughout. And it was a very intentional thing now that I know Ken and Todd, I know it was intentional. It wasn't just a happenstance.
I guess this podcast is lot about us. I always feel weird talking about just our perspectives and stuff but Jamon's comment about us, growing like a plague is true. And I think one of the things that I've learned being a  So I started out pretty shy, introverted person, but one of the things I learned is don't wait for people to invite you to communities, invite yourself, wedge yourself in every  And just keep on wedging and until a point where they're like, "Was Todd ever not here? I don't remember." Even though I was one of the last people to join, I feel like I was always there just because of shamelessly, endlessly, relentlessly wedging myself into every every situation.
Well, we live in a world where, for a lot of things you don't really have to ask for permission. You want to make a library, make a library, publish it. You want to make a newsletter, make the newsletter, start publishing it and invite people to join it.
I think for a large stretch of my career, I would kind of sit around thinking, "Well, I'm not sure if I'm the right one to do this." There's this sort of, I guess it's kind of an imposter syndrome. It's kind of just the shyness, just the laziness to a certain degree. And what we found was like, if you just show up, and you start you know sharing what you have, sooner or later you're going to find people who are interested and that's what's happened.
And I think there are a lot of people on our team that are more like Ken than Todd and I. You know, Todd and I don't have imposter syndrome in that same way. (laughter) We tend to be maybe a little over confident in some ways. But our team is probably a little more, at least many on our team are more like Ken. But it's great because they add so much value and we can kind of bring them in to the community through their association with Infinite Red and the things that were doing. That is a way of building a community, is to bring people along with you and kind of promote and show them that  Show other people that they do belong.
I agree that Ken represents a lot of people in our community, in the development community. Not necessarily the designer community. We talk a lot about developers but we also have designers and stuff.
You know, I'm 46 years old I've been doing everything in this industry for now, 20 some years and I have evolved a lot over time. The truth is I'm never going to be invited to the country club. Never gonna happen. Just reality. My attitude always been, "Fine, I'll just buy it someday." (laughter)
You know that's obviously just kind of a metaphor, but the point is: invitation is overrated. That's all I'm saying.
I was always a very shy kid. I have a six-year-old daughter and there was something that I have observed about her because she's actually kind of different from me. It's a bit of social skills that seems to come naturally to her that I am a little envious of, but it represents what we're talking about here.
So I remember there is an occasion where we are at a playground and they had one of those tires swings, where the tire is horizontal and it's got like three chains that support it so you could kind of go in every direction. And there was some kids there, who were playing on it and they were, I don't know three, four years older than her. There were calling over to their parents to come and push them, the parents were like talking and ignoring them. And so Luna just comes up and starts pushing them. Doesn't ask. She just starts pushing them and the kids are like, "Oh, okay." And they invited her to come up on the swing with her after that because she didn't  She just did it.
But she did it in a way that was like, "Hey, I'm gonna help them." Or she didn't ask to help them, she just helped them and maybe that doesn't work in every circumstance but it seems like it's going to work in a lot of circumstances, where if that's how you introduce yourself to people, they're going to trust you in a way that they wouldn't otherwise.
So that brings up a great point. One of the things for instance at our conference, Chain React. One of my kind of high GAFOs or one of the things I cared about a lot, was to actively try to include everyone in the conference in the conference. A lot of conferences I see is just a small group of cool kids and the rest of people sitting in the corner and inspecting potted plants, myself included. So since I was part of creating a conference how do we minimize the cool kids and maximize the majority.
And so when we're building community, the people like Ken's daughter, don't need our help. They'll just naturally join and be part of it and that's wonderful. But I gave a lot of thought on how to get the rest of the people because you could go to a conference and you could have the worst presentations, the worst content in the world, but if you are actually included in a way that you naturally aren't, you're going to go away loving that experience.
And so, that's actually one of my personal goals in life is how to bring that experience that the cool kids get naturally to the majority of people.
Well, and I think the most advance version of that is to enlist the cool kids as social instigators. Take their natural social skills because that's usually what that is, right? And have them come and bring everybody else along on the fun and games.
I read an article a little while ago, where a grade school student was kind of bullied and sort of kind of ostracized at her school. And she ended up moving to a new school and someone said, "Hey, come sit with me." at the cafeteria. And it was one of the cool kids. And she ended up making an organization that promotes come sit with me and basically go out and find these kids that seem ostracized, that nobody likes, whatever and just invite them to come sit with you at the cafeteria because it can change lives. And I actually sent that over to my son just saying, "Hey, you know  " Because kind of  He's looked up to at his school and he's a very kindhearted person. And he really liked the article too. And I think that that was something that he can do at his school.
That's definitely something that we still, as adults, there's still that dynamic of come into the group. So we really cared about that with Chain React and that definitely came across I think.
And our Slack community and some other communities. The great thing about out community is whether it's a developer community, the designer community, we belong to the open source community. We tend to be, I think more than the average human being, we tend to be a nicer group of people. I don't know if that's true, but it just seems that way.
When recruiting a team, I invite people over to the table. That's how, this is going to sound horrible if our team's listening and they're not all that way. But I always look for people who are underappreciated in all aspects of life. And it makes for such a fantastic team because those type of people tend to be more appreciative, they think more about others. I love our band of misfits that we call Infinite Red. And we've got a variety of different misfits and I highly recommend finding people who don't naturally walk up to the tire swing.
I'm interested too, with that philosophy of the band of misfits: How does building this greater Infinite Red Community impact the internal culture of the team?
I think internally people didn't totally get why we were doing it because it did seem like a lot of time that we had to spend doing it. We had to be out there answering questions and fielding requests for help and things like that. And we're still kind of figuring out what our role is with that; I think we've gotten a little better at that. Also the community is starting to become more self-sustaining, where there are people who are answering questions who are not Infinite Red people. But we've also made some really good friends there. And I think that the Infinite Red team has benefited from the community in that way.
We don't get full participation from everybody. We get some people, you know, Kevin, Steve and some others who are a lot more active in the Infinite Red community Slack especially. And that's okay. We're not expecting everybody to be kind of the social butterflies, but we do get a lot of value from that. I think people see that. And they also see, I think Chain React probably had a bigger impact than the Slack community in a lot of ways. Almost everybody was there and they got a chance to see how we are regarded in the community and how they're sort of looked up to as Infinite Red employees. They're a great team so I think they should be.
What do people or even companies get wrong with building communities?
I know that one thing that definitely comes in is neglect. Communities will die if you don't continually spend time making sure that you're paying attention to them, making sure that you're keeping the core principles alive. Things like that. So neglect is a really big one and you are sort of signing up for an obligation at that point. You need to make sure that you adequately pay attention to what's going on.
Now, I have other communities that I've started and still maintain outside of Infinite Red for personal interests and things like that. One has 4,000 members. It's kind of an interesting one. And that community, we started it, grew very quickly and then it sort of became more self-sustaining in a way, which lends itself to maybe taking it for granted that it will continue to just kind of keep rolling right along. But luckily I was able to get together a really great group of core moderators that all have very similar goals, although very very different backgrounds. And that was really great way to handle that because they all, at different times, have time to make sure that the community is going strong. So neglect is very much a big one. Make sure that you don't neglect the community.
I haven't done as much as Jamon, for sure, but it seems a very challenging endeavor. So if I'm a listener and I want to create a community. I'm going to run into lots of problems, I imagine. What are similar kinds of problems you've run into Jamon? Were you able to solve them? Are they still problems? That sort of thing.
In some communities, and actually in many communities, there's like dynamic that happens where people will try to find the edges. They will try to find what the moderators will allow and what they won't. Often what they do is not explicitly against the rules. Like if it is, it's easy. You just delete the comment, you let him know, whatever. Often what they're doing can be kind of sort of defended as being within the rules, but is still a toxic behavior, when it comes down to it. It will turn into something that's much worse. And usually moderators are under moderating. That's usually the way that people deal with it. They under moderate. You know you don't want to stifle people, you don't want to get calls of censorship and things like that, but really you should probably moderate more than you are and it's a really key aspect of maintaining a community.
I've found that that's definitely the case. Early on in this other community, there was someone who was sort of misbehaving and I posted a very strong response to them and told them if they did it again that they were going to be banned. And it was helpful because it kind of set the boundary. This is what we're not going to, we're not going to allow this. It has been good because from that point on the group sort of started self-policing in a way. They kind of understood where the boundaries were.
This topic of boundaries is super important. Another place that shows up particularly with anything open source or any other kind of content that you're maintaining, is an incredible sense of entitlement that you'll run into. And the burnout that can create in your team or the people who are working on that software with you. People will be like, you know, "This sucks." Like, "Why haven't you fixed my bug?" Like, "I submitted it months ago. You people are amateurs." Kind of like, "This is free. You paid us nothing for this."
Keeping a healthy boundary about that and figuring out how to be responsive to the community without being a pushover is really important, if you're going to have a long-term software project or any other kind of thing that falls in that category of kind of collaborative content.
Yes. I agree with that a hundred percent.
What are some other characteristics of a thriving community? So you've talked a little bit about moderation. You've talked about boundaries and policing, entitlement. And so, what else is there?
One thing that isn't probably obvious if you've never done it, is how much promotion it actually requires. And you want to do it in a way that's consistent with the rest of your values but you have to put the word out and it's not going to happen on its own. That was definitely a sort of a stumbling block I had around open source, in particular or blogs or any of these things. Like, you have to tell people. It can feel really uncomfortable to a lot of kind of maker types. It feels weird that you have to convince people to let you give them stuff for free. But you totally do. You absolutely do. It's really important and finding the right, "Here it comes. Here comes." You got to find the right balance. (laughter) Finding the right balance is really hard. I think we're getting pretty good at it, but it's a non-optional part of this kind of work.
Well, because it's not really free, right? Because you only have so much room in your Slack sidebar for another Slack team. You only have so much mind share available for various things. And also people have been bitten in the past, where they've join communities that have either died, have been toxic or are just so noisy that you can't keep up. It just sucks all your time.
Yeah, well, any of these things. Whether it's you're trying a new library. It requires some time and effort on your part. And you have to know that you're not going to get sucked into it. I mean there's probably this question in the back of a lot of people's minds kind of like, "Why on Earth do you do all of this? If it has all of these challenges and nobody pays you for it, like, why is it worthwhile?" Todd, you want to answer that?
No, I want to say a bad joke.
Okay. Go ahead and say a bad joke.
I don't know if you're aware of this, but the Hoover Corporation is actually working on a vacuum cleaner that sucked time, never mind, I did that wrong. (laughter)
You're right. That is a bad joke.
I gave the punchline in the joke.
You're right. That's a terrible joke.
The project team was  Eventually, they gave up on the project because it was too much of a time suck. I just messed that up. (laughter)
I think we have to keep that in.
Let me do it again. I don't know if you guys know this, but the Hoover Corporation was working on a temporal vacuum cleaner, but they eventually gave up on the project because it was too much of a time suck.
I think I liked the failed joke attempt better.
I like the failed joke better. Yeah.
Well, yeah. Because that makes me the joke.
I mean okay, so let's address the elephant in the room. Is there promotional value for us in terms of the rest of our services? Absolutely. Almost any attention especially if you know, basically positive attention is going to be good for us. It's a really expensive way of getting that attention.
Let me be clear about that. If that's the only reason you're going to do it, go buy Google ads. Seriously. Like, don't do it. If it didn't have any promotional value, I don't think as a business person, you know, me, as the person who looks at the finances that I could justify the amount that we spend on it. If that was our only goal with that.
So we have to do it partly because it's just who we are.
Absolutely. It gives us an audience and it gives us the ability to  Like I did when I promoted this podcast there. If you join the community, by the way, I'm going to insert one of these seamless advertisements. If you join the community at community.infinite.red, your get access to things before the public does. We actually will go in there and and announce things and say, "Hey, you know, come check this out." And we get early feedback and stuff that way.
It's really cool, but it also gives us an audience. So we had you know 2,000 people that I could "@channel." (laughter) And yes, I did it and we put enough money and time into the community that I didn't feel bad about doing it once in awhile, once in a blue moon. And I said, "@channel you know, we have a new podcast and go check it out."
So that's definitely the promotional value, the built-in audience that we have that we've already built a rapport with because we have put in the time to actually show them who we are and they buy into that already. There's a lot of value there.
It's a great source of folks that we already know or are sort of somewhat aligned with our values to go and find freelancers and that sort of thing. So we'll frequently get people just emailing us saying, "Hey, can we work with you?" And we usually don't have openings. So it was like, "Hey, you know, we don't have openings right now, but if you go hang out here that's usually where we go first."
We've gotten a lot of great contributors that way.
We have.
Hopefully that's win-win for everybody.
I'm still a little curious about this idea of, should every company build a community around their products, employees, and way of thinking?
Not necessarily.
Wouldn't you say that one would kind of arise naturally though?
Maybe. There's probably something to be said that, if you don't intentionally create the community, you're going to get a community whether you like it or not and it may or may not be aligned with what you're trying to do. But there's so many different kinds of companies out there that some of them are going to make more sense that way, some of them are going to get less sense that way. For us, given how collaborative what we do is, it makes perfect sense but there is plenty of companies that are just like us that don't cultivate that. So it's kind of up to you but this how we did it. This is how it works for us. And I think there's going to be people who resonate with it.
Putting on your future facing hat, in what ways would you like to see the Infinite Red Community grow and mature?
Upwards. (laughter) Oh, you didn't say direction, you said ways. Sorry.
I think from my standpoint, I'd like to see a little more deeper interaction beyond the more active channels. Something that's a little more beyond that. We have some ideas. We're not ready to announce anything yet but if you go to the community, you'll get first access. (laughter) I'm just relentless, aren't I? (laughter)
But the deeper interactions, the more value, the better connection between everybody. I think that there's going to be more of that coming. We are going to continue to invest in the community in a way that is very meaningful. Keep an eye out for that. It's already pretty awesome, but we have some ways to make the directions deeper. I'm not looking for numbers. Like we have 2,000, I think almost 2,100 people in there right now. I'm not necessarily just looking for 100,000 people. What I want is for those connections to be more meaningful.
It's not just our Slack community. I would consider our React Native Newsletter, which we have about 10,000 subscribers to be part of our community, the people who interact with us on open source. We have a variety of open source projects to be part of our community and of course, the listeners to this podcast is also part of our growing community. Community is a big umbrella, I think.
There are some things that we still need to work on with the community, for sure, but I think we do this probably better than a lot of people, a lot of companies.
Ken's absolutely right. If you're doing community for promotion, good on you. Probably not the highest ROI. It's like general branding. You can't put a number on it but I think clearly from a business standpoint, it has its values and ways that we can't quantify or articulate. It's not for everyone. I think every company should find things that they can do to help the world and their business, but for us, it dovetails well with our culture.
You would think it would be when you launch their app or their site, or something like that, but I often find that actually to be a little bit anti-climactic 'cause there's so much going on. There's usually already plans in place for a version 1.1. It's not usually like everybody gather around the big green button and then the founder pushes the button, and it goes live. Although a little side note, Mark Rickert, who is one of our developers has released an app to the app store while in free fall during a skydive.
That is true. We can link to it and there's a YouTube video of it. But that's not usually how it works.
It wasn't a client app I don't think. I think it was one of his apps, but still.
That was a pretty cool way to do it. But no, you would think that would be the most exciting time. The exciting time is usually during design, for me, because I feel like you start getting a lot of enthusiasm, the energy. A lot of those things start coming out during the design process. And when we get a chance to use our design process some clients will come to us with something already designed, others will come to us who need design. When they're going through the design process, it's really exciting, you can see a lot of the possibilities. The development side of things is also fun, but a little slower moving.
I agree with Jamon on the design side. Once we get through the product development and start getting into design, probably past the wireframing and into some more concrete examples, it's pretty fun to see the client get really excited. Especially if it's a situation where they show people who are interested in their product, or their stakeholders and investors, or whomever, and they had a good reaction to it.
I would add the second most fun time with clients is once there is a beta or an alpha available for their beta testers. And again, they send it to them and they use words like "blown away," or something like, that's awesome. I'm not gonna lie and say, that's always what happens, but those two times I think are the most fun to me.
One of the things that Jamon wrote in Slack that was interesting is: what are some common assumptions that clients bring to the process that have to be corrected?
I don't know if there's anything that's common or consistent across clients. There are some things that come up. I would say, depending on the experience level of the client with software product development, we may have a little to a lot of teaching to do. And that's one of the things we like to do is teach.
I find it particularly fun when our start-up clients are newer, they're not on their series B or something. Because there is a lot of moments that you can help them and give them kind of golden information. Both from our personal experience running start-ups, but also we work with a lot of start-ups. So we've been through this before.
There are some misconceptions about software. Not necessarily from our clients, but from people who weren't a good fit for us. For example, it's very common in the world at large, to believe software is orders of magnitude cheaper than it really is. People also get very used to the quality that they see in apps like Facebook or Gmail, or these kind of things. And they think they can spend less than a car to get those things.
When you're in our industry of course, that doesn't seem super logical, but from their perspective it makes sense. An app costs nothing, or $1.99.
Or $4.99, so of course something like that seems cheap. What they don't know, of course, is Facebook has tens of thousands of employees.
And even a smaller app, let's not chose Facebook, which is huge. But like Instagram, for example. And not what it is now, but what it originally was, probably cost half a million to make.
Yeah, I think I saw that they put $250,000 into their MVP originally. And it's a very simple app when you look at it, compared to a lot of apps out there. I think that's definitely something that, as Todd said, it's not necessarily the clients who end up being good fits for us. But usually we get calls from everybody, all kinds of people.
Well, even those prices are reflective of just how far software has come in terms of developer productivity.
Because half a million dollars doesn't even get you a house in the Bay area. And the people building your house, most of them are being paid 20, 30, 40 dollars an hour and not $200 an hour, or $100 an hour. The Bay area is full of software engineers being paid $150,000 a year and up, many that are way higher than that. And you can still build software for half a million dollars, which is actually is pretty impressive when you think about that in terms of it's inputs.
Another interesting thing that the clients don't necessarily realize when they come to us is the impact that the design process can have on their product. Usually you're thinking of design as making it look pretty, making it look nice. But there's a whole lot more that goes into that. The visual design aspect of design is usually, maybe, the last 30%, something like that. It's not the bulk of the design work.
But there's a lot of value that can be added there. You can avoid expensive mistakes during design by spending the time upfront to really learn as much as you can about your core customers and the features that are necessary. Because software is expensive, so you wanna build as little of it as possible until you really know the direction that you need to go.
Yeah, and I wanna be clear. You can make, for instance, a mobile app for $100,000 to $200,000. It's not a half a million. But something that's larger could be millions as well. Just wanna make that note on that price there.
I think another misconception that some clients might have when they come into it, is they don't understand necessarily all of the breadth of things that need to happen to make an app. We've had people come to us and want to build an app, but they don't necessarily realize that they also need a server and they need some sort of cloud connectivity. They might need offline support. They might need access to certain APIs for GPS or whatever.
And beyond that, how to get through the app store. And how to get through Google Play. What is a compelling app store listing? What does that look like? You know, what screenshots are important?
And one of the most successful apps that I've ever been involved with, which is called A Dark Room by my friend Amir Rajan, he actually only has one screenshot on the app store, and it's a very uninspiring one. But he has millions of downloads. It's just, he hit it right on the head.
You know which store is incredibly hard to get through? IKEA. (laughter) Just saying.
It's true.
We've mentioned before in this podcast, but it's worth repeating, design is not how things look. Design is how things work. And through the very first part of our design process is product discovery. And that's even before how things work. That's what product is you want to make at all.
Since we work with a lot of start-ups, we also sometimes coach them, if they need it on coming up with a customer acquisition plan and a revenue plan, which their investors, prospective investors that they pitch to, will definitely ask them about, having pitched to them myself. So design is very important and it's also one of the most difficult things that we mentioned in a previous podcast was getting from zero to one. Product discovery and design really help our clients get from zero to one.
And they're starting a business, you know, it's not just building an app. They're starting a business, or they're continuing a business that they already have. And there's a lot that goes into building a business for sure. I think that's one of the things that, maybe some friends of mine who might message me and say, "hey Jamon, I've got this app idea, it's a billion dollar idea." (laughter) "Promise not to go off and rip me off. I wanna tell you it."
And it's fine, you know, the ideas are a very necessary part of this, they're a spark. They're really important. But the execution side of things involves designing and building the app, which we can do. We're really great at it, we've done it a lot of times. But also, the business side of things.
There's no one right answer to how to build a business. You can see that with many different business models. And that's the tough part. Now, it can be very rewarding though, the whole journey and it's been really fun to watch our clients build business models that are sustainable and come back as they grow, as they succeed, they find new opportunities and they come back to us and say, "hey Infinite Red, we need some new features. We need a new app. We need to rebuild the app for maybe a different purpose." Those things are very fun to see.
Ken, you had a great thing about ideas, when people have an idea for a business. You've talked about a lot and I'd love to hear your thoughts on that.
Oh, and how they're not usually worth the paper that they're written on. (laughter)
Where this came from was that, like back in the days of the dotcom boom, when everybody and their brother had some amazing idea. I would be at a social dinner with somebody and they would be like, they'd whip out an NDA and be like, I wanna talk to you about this idea I have and I need you to sign this NDA. And I'm like, "No. I'm not gonna sign your NDA."
Ideas, per se, are not worth very much. Right? A high level idea, per se, is not worth very much. Like my idea's like, "hey, I have an amazing idea. What if you took a car, then you made it fly?" Right? And people will be like, "that's an amazing idea." Now, how are you actually gonna do that?
And so it's kinda like, just because I have this amazing idea, "oh what if you made cars fly," doesn't mean that when somebody goes and actually makes cars fly that I have any right to that idea.
Mm-hmm (affirmative).
Right? Because the high level idea by itself, although cool, doesn't actually get you there. It's the millions and millions of other good ideas that follow that, that really make something work.
Jamon, do you wanna tell the dating with music, I could tell you wanna tell the dating with music story.
That's exactly what I was gonna interject. So Derek Sivers, who founded CD Baby, he has a YouTube video, it's very short. We can link to it in the show notes. Essentially it's talking about ideas versus execution. And the general premise is sort of this, that he met with a friend of a friend, and they were having lunch. And this guy had this billion dollar idea. And he says, okay, what's this great idea that you have? And the guy kind of leans over, very intense, and says, dating with music. (laughter)
And Derek's like, is there anything else? (laughter) Is this  He's like, no, dating with music dude. And it was  he's like, okay, this idea is worth maybe the price of a lunch. Right? Like, the execution of it is the multiplier, you know, you can have a multiplier  a great idea, not execute it at all, is really not worth much.
A bad idea, executed really well is also not worth all that much. But a really good idea executed really well, is a multiplier that becomes your billion dollar idea. I don't think it necessarily tells the whole story, you know, that particular anecdote because there's also timing and other things like that.
Well and that idea isn't even a multiplier idea. That's like a hint at a maybe multiplier idea. Right?
He was just being nice to the guy.
He was being nice, right. So it's kind of like, when I say there's a chain of ideas, the first germ of the idea is the kind of idea that someone might get when high. Kind of like, "hey man, what if it was like dating, but with music. Yeah." (laughter) Right? That's exactly a high person's idea.
I would almost bet money that that was a high idea. But anyway. The next thing is like, oh well you get people to put in their music that they like and we match people up. That's starting to be an actual idea.
Right? That's starting to be like, what's the actual hook. And even that, there's still, like well how does it work? What's the UX? What's the viral engine around that?
It's not just programming. Like, we're all programmers historically, so we're gonna tend to see all of the stuff that's gonna go behind that.
Mm-hmm (affirmative).
Really, it's the product development of design that, or really, what's important. And a lot of the details that matter, are sometimes the ones that are not obviously to your competitors.
Almost always.
Almost always. So this idea that your super secret idea is gonna make everything work is, frankly, BS.
You have to keep having those good ideas over and over and over again. Every techy who's been in Silicon Valley, or a similar environment, and around the sorts of people who have these sorts of ideas, every single one has a story of being approached by somebody who's saying, "hey I've got this great idea. I'm gonna get you in on the ground floor with it. But I just need somebody to make it."
Mm-hmm (affirmative).
And we'll split it 50/50. Young techies fall for this. Very quickly you learn, uh, no. You'd better have a lot more than that for that to be a 50/50 bargain.
I'm not even joking when I say that in San Francisco at least 50% of your Uber drivers will pitch an idea to you on your ride.
We got pitched in an Uber, us three. We were in an Uber not that long ago and we got pitched on an idea.
And I think that it's kind of interesting because the apps that do tend to be more successful that we're involved with, they're often not big ideas. They're good ideas, they're not like huge ideas. They're existing companies that have a need that their customer base has kind of expressed, they can see it's fairly obvious. And they come to us and they say, hey we need really good execution. And that's what we're good at.
They've identified the need. Have a lot of the infrastructure already in place. They already know how they're gonna monetize it. They already know how it's gonna impact their business. They just need a really great app. And that's where we really plug in.
Now it has been kind of interesting to watch start-ups where they don't have that in place and how they develop that. And where they go with that. It's much more risky. A lot of them do fail.
And one of the things that I've heard from some of those clients sometimes is, "Jamon, why aren't you so excited about my idea?" Now I'm not trying not to come across excited, I am excited about their idea. It's just that I've seen so many of these where there's certain other parts of the business that they lack.
From my standpoint, if I was in the business of picking winners and losers, I'd probably be doing my own start-up, right? But, honestly, there's a lot of moving parts. There's a lot of variables. And not all of them are in your control.
So I think it's been really cool to see the ones that do succeed. See how they piece it all together. I have a lot of respect for them, it's a difficult thing, but it's very rewarding. And then, of course, the companies that come in, like, we just started a project recently, this week actually I think. And they are an established company, they have a very big user base. A lot of people have heard of them, but they need a much better app. And they need a better app experience. And that's really where you see the clients that really shine.
There may be a few people listening who are kind of mentally going like, "hmm, is that me?" What I would say is, if you think it's you, it might be. (laughter) If you wanna know, like I wanna do this thing. And I don't program and I'm not a designer, like, I don't know how to make these things and I don't really wanna be that person. If the idea isn't what's important, then what is important? What do I bring to the table that is gonna help me succeed and help a company like Infinite Red, or even just an individual programmer who I happen to find? What am I bringing to the table that will help beyond the big idea?
And there's really two things. And they're big ones. And you need at least one. And preferably two. And one is, access to capital. Not just building this, not just paying us to build this. But all the marketing and everything else. Right? You're gonna need money. And you're not gonna want to be in a position where when you run out, it just dies. You need to have a plan for that. That's number one.
Number two, is access to audience. If you have one of those, in good form, then you can usually get the other one. Having both is ideal. But those are the two things, those are the things that the makers that you're coming to work with, don't necessarily have. And so, if you wanna know what you can be busting your hump to be doing right now, it's getting those things.
And then, if you have those and you come to somebody with your big idea and you want them to turn it into something real, you actually have something to offer.
One of the things that I think Ken and Todd bring to this conversation that I don't necessarily bring to the conversation is I haven't been on the other side. I've been a consultant for a very long time, so I see our side of it. But both Ken and Todd have worked for start-ups, probably who have used consultants. And seen the ones that have succeeded. Ken you worked at Yammer and there was an acquisition that Microsoft made there. And so it was a successful exit.
And then of course there are some other start-ups that you and Todd have worked at that failed. That's something that I, maybe, don't necessarily bring that perspective to. But the consultant's side of it for sure, I see all kinds. I see all kinds of start-ups that rise and fall.
I hope no one takes this as a reason not to try, for sure. I would recommend to focus on your customer acquisition strategy and your revenue strategy. You have to remember Zappos when it came out, and if you're not familiar with Zappos, it was a large company and eventually hired by Amazon, and they sell shoes.
Acquired, not hired.
Sorry, acquired, not hired. They sell shoes, which is probably the second oldest profession in the world. (laughter) So, obviously not a new idea. Hey, I have an idea, I'm gonna sell shoes. And you're like, horse shoes? Space shoes? No, shoes, like you put on your feet.
But they had some innovation ideas inside there. Mainly extreme customer sport, and the big one was, buy five pair of shoes, send back four. Good ideas, but once again, there's a series of little ideas, like how do we allow them to buy five pairs of shoes and send back four and still make money? There's a hundred and fifty ideas in there, maybe a thousand ideas in there that matter.
So it's hard to be an A-list actor, right? But if no one tried, we'd have none. So you can succeed. We get a lot of clients and sometimes their very obvious that they'll see just because they have a lot of experience or they just really understand. But we have people who don't know what they don't know. And don't know what they know yet, and that's fine too. Those people may succeed also.
The number one problem that we see is under capitalization. Over capitalization can be a problem too, incidentally. If you raise too much money all at once then it can lead you to be too profligate. I've definitely seen that at start-ups.
It's way harder to say no.
Yeah, that's a problem with venture capital backed companies that have just seen a bunch of interest all at once and then they have issues with that. But, under capitalization is definitely a much bigger problem because it means that every single decision you make, you're terrified.
If your problem is over capitalization, please send an email to hello@infinite.red.
We can help you with that problem.
Today's episode is brought to you by, too much money.
I'm actually being serious. (laughter) I mean, we're joking. But I'm also serious. Like, we actually know how to make your money go farther.
Yeah, and I agree with that. And we can also help with saying no. I think that that's actually one of the things that's probably surprising about working with us, is often we are pushing for not adding features.
This is sounding like a commercial this time.
Yeah, I'm sorry, but we're not the only ones. I'm just saying that experienced people will tell you no. And you need that if you've got a lot of money.
I think that's an important port, you look at some consultants and their not necessarily pulling in that direction, but we want people to succeed 'cause obviously that looks good on a portfolio. It's a benefit to us.
One of the things we've always said, and we tell customers this, if we finish your project early, and don't spend all of your money, I'm sure you're gonna come up with more ideas. You know? It's not like we're gonna miss out. It's never been the case.
If we finish a project early, the founders aren't just pocketing the rest of the money and going home. What they're gonna do is say, what about 1.1, let's get on the schedule. Let's move. There's always something else. 'Cause during the process of building an app you learn so much. And there's always more ideas.
I've never seen a software project where at the end people were like, phew, I'm sure glad that everything that we could possibly think of was in that. (laughter) Like, that has never ever, ever, happened.
You never know. There was that app where you just said "Yo" to people. Yo.
Yeah, didn't they raise a whole bunch of money to add more stuff?
And what happened to that app?
I don't wanna rant about VC. Some VC's  not all. Some are great.
Another thing, going back to your original question Chris, which we've been talking a lot about, is, common things that customers or clients may not understand. Another one is just the pure complexity of software. It's hard to understand because it's not in the real world. You can't hold it.
In your house, if you ever owned a house and had work done on the house, you'll know that doing something in your living room is relatively cheap. Doing something in your bathroom is extremely expensive. Doing something in your kitchen is extremely expensive.
The reason why a tiny room like the bathroom is so much more expensive than a huge room, say like, your living room. Is because the bathroom has tons of different contraptions in it. Lots of different moving parts. Lots of different things can go wrong, from your sinks to your plumbing, fans, lighting, that kind of stuff. So the number of pieces matters a lot to cost.
Because software is virtual and because we can fairly easily throw on pieces. Software tends to be an order of magnitude, or more, complex than any other physical machine. A bathroom, even a car engine, is less complex than software is.
It's compensated for somewhat by the fact that our tools are also more powerful.
I mean, there's countervailing things there, but your point about the complexity is right. If you run out of lot when you're building a house, then your contractor says, hey we can't build there, your lot ends there.
There's no such constraints for software and that makes it easy for things to get kind of hairy.
If you completely disregard our part in the complexity, meaning we have to build all the moving pieces and test them and make sure that they coordinate together. Even disregarding that, sometimes people are shocked at how much they have to think about, and they're not building it all.
If you just said, I wanna login screen, for example. Every app has that. That's simple. Right? The number of questions that you could be asked by someone like us, to someone who's less experienced will be shocking. And they won't have the answers to it. And each one could be thought of.
Now of course we always give people common things that they should do, or whatever. But if you were to really think through the whole thing, just that one screen is way more complex than anyone imagines.
Recognizing our experience, the fact that we've done hundreds of apps and encountered so many different scenarios, I think is important for working with a company like ours. I think back, in prior years, there have been some projects that haven't gone as well. And one of the common traits of those projects is that the person I'm working with, they feel like they kind of know it all, because they do have a pretty big picture of it, and they want to put their vision down into software.
It often comes with blind spots of, what are you missing here? So having a high degree of trust and communication between the two parties is one of the hallmarks of a successful project. We certainly respect what the founders bring because they have the vision, a lot of the times they have a much closer relationship with their potential users than we do.
Absolutely.
We're not trying to impose our view of what that might be. But we can often bring things, like Todd was saying about the login screen. Like, you didn't think of this aspect like what happens if you forget your password, or if you don't have access to your email or something.
Or you're on a plane, or Facebook changed the rules and half the users can't login. That kind of stuff.
Another thing too, is we sometimes experience this when we get designs outside of our company. Now, a lot of designers are great, but they're never have been trained in, or have experience in software design. Our designers are classically trained designers. They can do all the normal things people think of designs, but they chose to specialize in software and website design.
So, sometimes when we get an outside design, we never used to do this, but we kind of now require it. The bare minimum is we'll do a half week of design review. And we did one recently. And from a cursory look at their design, it looked like they had everything. Looked good, seemed to make sense. The design looked fine.
But after a half week of a couple of our designers reviewing it, they went through in great detail and produced a map of the whole app and how everything interacts with each other. And the flows and the different actors, different type of users. That kind of stuff.
There were dozens of screens, right Todd? Like dozens.
There were a lot of screens, and probably half of them weren't in the original design at all.
It was striking 'cause you could see the outline of the screen, it was empty and there's a title of whatever that screen was supposed to be.
So that's an example of, even at the design part, where you have to factor in all these different scenarios that you may not have thought about. And how the user would experience it if those scenarios happen. And also make a business decision whether or not you're gonna address some of those scenarios. Sometimes you don't because it's a very small minority of your users, edge case as we call it. And it's just not worth  the ROI and something like that would be poor.
So that's something too, where it's just half the app is really missing.
And that's where, I think having that high degree of trust is really important because then our spidery senses are saying, hey, there's something missing here. Let's spend the time up front, I know you wanna get started right now, but let's spend the time up front to map this out and see if everything is here.
I'm actually curious when someone comes to you with an idea, how do you know when to start challenging the idea? And when to write the idea off?
I wouldn't say that there's very many ideas that we would write off. Because lord knows if we knew which ideas were going to succeed in this business, we would be billionaires already. And frankly, the people who are billionaires don't even necessarily know. There is a healthy degree of luck in terms of like, who ends up on which gravy train.
But, that said, there's always gonna be a variety of factors that go into whether something is successful. Some of them are universal. And some of them are highly specific. And it's a little bit of a judgment call on which is which, however. We think that things like software quality and good UX, these sorts of things, are basically universal. Like that humans are humans.
In those regards, we are going to push for what we think is right. When it comes to the intimate understanding of the customer, the end customer, right, the people that these start-ups are trying to attract. That's where we defer to them. We're always looking for clients who clearly have that intimate understanding of their customer.
And this sort of leads into another point, which is that, someone on their team, whether it's the founder, if they're the only ones. Or someone on their team, had better really have that intimate knowledge. And they're gonna have a full time job working with us. Basically.
Right? And that's also something that I think people have not understood. It's kinda like, hey, here you go make the software and I will dip in periodically.
Uh-uh (negative). No. Yeah, you gotta be really committed because you're the one who really understands that like, so we're gonna be working with you to go after this. And we need you, obviously.
Not just to write the checks, but also to tell us who this person is and what they're really gonna need. And sometimes our idea of a universal solution won't work for something specific. But that tension is really important. We're always fighting for those sort of universal values, but we're also listening to hear what specific values are and the ways that they might override universal value.
Yeah, and there's not one right answer and one right design to solve any particular problem. I would pile on with Ken, the people coming to us, the founders or the department heads or whomever they are, coming to us. They really wanna understand the end user and be able to articulate that to us. And over time we learn them too.
And some industries have very strong cultures that you have to be within, and if you don't speak that cultural language it instantly turns off those people. It's not just culture, but for example, we did a project for a company called PRO-TREAD, which does training for truckers. I don't know if they're the largest, but if they're not, they're probably closest to the largest in the country.
And this traditionally was done if you had a trucking company, you would set up computers in the corner and then when that driver was by their home base, they would sit at that boring computer and do the forced training that they're required to do by law.
Not fun. No one wants to do it. The people at the company don't wanna pay for it. Truck drivers don't wanna do it. Of course it does increase safety and stuff, so it's important to do, but it's just human nature not wanna do something that's, you know.
And I believe, Todd, that PRO-TREAD was one of the first to even computerize it. Before that is was paper tests and in classrooms. So they were kind of moving that direction already. Now this was another iteration of their platform.
Correct. And this is a great example of an idea because it's simple, everyone understands it and it's obvious. Truck drivers spend a lot of time in the sleeper cabs of their trucks. At truck stops and whatnot on the side of the road and stuff. So, obviously making the training mobile was important because the training materials being on a tablet or an iPad was important. Making it not so painful for the person, so that it's not  If you're the manager telling the drivers that they have to take this testing, getting 50% less push back because it's not as painful is a big deal to you.
And also, they do need to not just get through the training material, they do need to understand it and internalize it. It actually does help, even though no one wants to do it. So the basic requirements was, it has to be mobile, it has to work inside of a sleeper cab on the side of I-80. And it still needs to maintain their already high level of guaranteeing that people actually pick up the information, and they had a variety of ways to make sure that happened. And also, be more engaging and not as painful. That was the directive to our designers.
I believe that when they first came to us they sort of envisioned the app looking basically like their web version and no real changes other than that. And we talked to them, this was a situation where we had a great rapport with the owner of PRO-TREAD and we're able to talk with him and explain where design could really add a lot of value to a touch interface.
Yeah, so we actually did re-design it, not just to make it more mobile appropriate, let's say. But to really push those goals they had. Now, designers and us and them now understood the goals. I just stated them. Fairly straight forward, the goals.
However, we can take those goals and we can design to those goals for sure, but we probably don't know truck drivers as well as our client PRO-TREAD does. So them having been in this industry for a very long time, really understood the nuances that would make meeting these goals through design possible. Having them really understand their users, having us really understand how to solve problems. Us having the problems be both simple, straightforward and well defined, that was a successful project and although maybe not as exciting as Uber for gerbils. Because gerbils have to get around too, and no one likes to walk.
Well gerbils do, actually, don't they?
They kind of do, yeah. And they like tubes. So maybe be like Elon Musk's 
Hyper loop.
The hyper loop for gerbils.
For gerbils.
Yeah, so that's a very exciting, so if we had a client came and said we want a hyper loop for gerbils and we respond, "of course. Who doesn't?" But it's just funny, but teaching truck drivers important lessons is more fulfilling when you know, when it rolls out, there's gonna be tons of men and women out there on the road having a slightly less painful day because of something worked on. And probably saving some lives. It's not as sexy, but it is very satisfying in my opinion.
Yeah, I totally agree. I actually have five uncles who are truck drivers. Very strong truck driving kind of familial influence. And maybe one or two of them might actually listen to my podcast here. So, hi uncles. (laughter)
But what I think is kind of cool about this is I do know truck drivers. I didn't get a chance to work on that project myself, but there's totally a personal connection there. I understand what they go through and the types of things that they care about.
I only have one brother and he owns a shipping company and he has lots of truck drivers, so I'm going to trump your four uncles. (laughter)
Let's have them fight. They're all six foot four.
Although in the past he did drive, so, but anyways. Yeah. Ken, how about you buddy?
Any truck drivers there at Harvard?
Aww, pick on the Harvard kid.
No, I don't know any truck drivers. (laughter) You got me.
Today, brought to you buy Captain Obvious. You can cut that, that was a bad joke.
This is Ken Miller, by the way.
It happened very organically for us. To be honest, I don't know that we could've done this company this way before Slack. Because the tools that came before, Hipchat and IRC and Yammer, even though I worked there. Sorry, Yam-fam. They just didn't quite do it. Right? They didn't quite create the online atmosphere that we need to work the way that we do.
Does that sound accurate to you, Todd? I feel like once we found Slack, we were like, "Holy crap, this is epic!"
I think there's a few alternatives. Hipchat, at the time, wasn't good enough. There were a few alternatives we investigated. I would like to mention at the beginning of this 
This is Todd Werth, by the way.
I would like to mention at the beginning, I imagine that a lot of companies in this podcast will need to be paying us an advertising fee. Like Slack.
We actually adopted Slack before we were remote. We had  I think we were using Google Hangouts or something. Or whatever of the myriad Google chats there are out there. They have like 12 apps. We were using something else in person, and then we started using Slack organically right when it first came out.
Sorry about that noise you all heard. That was me throwing up a little bit in my mouth when you said "Google Hangouts". (laughter)
We'll talk about video-chat in a minute.
By the way, this is Jamon Holmgren.
It was  Initially, we jumped onboard. They did a really good job marketing themselves. We had used Hipchat a little bit, but it just wasn't what we expected. We started using Slack. That was in early 2014, I think it was? I don't think it's a coincidence that within a year and a half we ended up going remote. I think that was one of the enabling tools.
We got used to it in the office, but it enabled remote work.
To talk about chat apps or chat services is important, but on a more general standpoint, I would say how you approach it is actually try 'em and do it. A lot of companies seem to just use whatever is available and not look for optimum solutions. If trying three or four different chat systems is too onerous for you, that's probably the wrong attitude, in my opinion.
You think, "don't settle". Don't assume that the first thing that you try is the only thing, and then conclude that remote isn't gonna work because the tool that you tried sucks.
We tried a lot of tools at ClearSight, before the merger. We tried  I can't even name them all, to be honest. Part of it is because I like  I'm a gadget guy, I like to try new things and see how it goes. There was actually a lot of skepticism around Slack because they're just yet another tool that they had to log into and pay attention to. "We already had the email, so do we really need this." It was kinda funny, when I went back and looked at our inner-company email, just tracked  I think I used the "everyone@clearsightstudio.com" or something email address to track how often we were using it for company communications. It just dropped off a cliff after Slack.
The amount of email, the volume of email that was flying around went way, way, way down. In fact, I remember we used to send GIFs in the email threads, and stuff. There were elements of the culture that we have today in Slack going on in email threads. Slack was just so much more well-suited to that. That actually came about very organically. We had tried a bunch of different things. We tried Slack, and it just picked up steam, picked up steam, picked up steam.
I don't  I'm not even exaggerating, I don't believe I've ever sent an email to anyone at Infinite Red internally. I don't think so.
Unless it's a forward from someone external.
Correct. I think there's people on our team who probably don't check their email very often because they don't have a lot of  
Yeah, if you don't do sales or any kind of external outreach  
Yeah. That was a sticking point a few times, when people were sending out the emails, and we had to  They were wondering why people weren't responding, it's because the variety of people never check their email.
It is funny, because email does still, it is still a tool that we use for remote communication with outside clients, especially people first coming to us. But as soon as we can, we get them onto Slack because we've found that that level of communication is the least friction, it's very seamless. Slack is definitely featuring very centrally in our remote-tool story, for sure.
Rather than just  I'm sure a lot of people out there use Slack. If you don't, give it a try. But rather than just gushing on Slack, I do wanna say that the important part here is we did go through a lot of different chat services. You have to give 'em some time. At first, for example  We do love Slack, but at first it didn't seem that different. There wasn't a bullet list that's like, "Oh, this has feature X", it was a bunch of little, subtle things that made it work especially well for us.
Part of the meta-point there, is you have to treat your tools really seriously. Right? Google and Amazon and all these big companies, any well-funded start-up, whatever, they're gonna lavish a lot of attention on making an office that works for them. Right?
Mm-hmm (affirmative).
They're gonna create an office environment very thoughtfully. I've been to a lot of these offices. A lot of them are very thoughtfully considered. Right? They're designed to create a certain atmosphere. For example, I was at the Square offices once. Huge, cavernous room designed to create a sense of energy. That's the open-office mantra, that sense of energy. They had these little cubicle  nicely designed cubicle things where you could go if you wanted quiet. Clearly, noise was the default.
That architecture creates a culture. At least it reinforces a culture. As a remote company, your tools are your architecture. You either need to buy them from people who design them in a way that works for you, and Slack seems to work for a lot of people, or you build things that work for you, or you create norms about how they're used that do the same thing.
We've done some things on Slack, we've done some things on Zoom, to create that sense of being together.
Todd?
I would like to add emphasis to what Ken just said.
Imagine a time that someone puts into an office: architecture, the layout, the furniture. Rearranging it multiple times, placing stuff. Now think about the time that companies you've worked for put into remote tools. Anyone out there with their hands up saying they spent about 30 minutes on their remote tools  
Ever!
Yeah. It's not surprising that one is superior to other in those organizations. I would pile on, like Ken said, and take the same amount of effort and consideration of your tools as a remote company as you did with everything else in the physical space if you're a commuter company.
I'm interested, too, because as you're talking, you're talking about the difference between physical architecture and the architecture of your tools that allow you to do remote work, and if everyone's using Slack, and it looks and functions the same way, what brings the sense of uniqueness to a company that's using the same tools?
Me. Just me being around makes everything unique, wonderful, and amazing.
To answer the real question, you have to take Slack  One of the great things about Slack, 'cause it's highly customizable, you can add plug-ins, you can add all sorts of integrations. We're gonna talk about other tools than Slack. They literally just pay us a crapload of money just to talk about this.
I wish.
I wish.
You don't take the vanilla. The point of a tool like that is you take it and you make it your own.
I did see someone tweeting about switching remote companies. They quit one company and they got hired by another. They did mention, actually, how similar it was. You go into the same place; you sit down at the same chair; you have the same computer in front of you; you log in to a different Slack, and you start working. Right? There is some level of consistency there. In a way, that's a very good thing. You can be comfortable very, very, very soon.
There are plenty of things to learn about a new company without having to also learn new office layout, new office norms, policies about who can put their lunch in the fridge and who can't. I don't know what else. It's been so long since I've been in an office, I don't even know.
I think there is some level of normalcy there because people do use similar tools.
Like Todd said, you can customize Slack to work the way that your company needs to, and you can customize other tools as well. Since we're programmers, since our team has a lot of programming capability on it, we do actually build a lot of glue code in the scripts and things that will help tie all the tools together.
In most organizations that have adopted chat tools, whether it's Slack or something else, they are usually billed as an internal supplement replacement for email. It is great at that, don't get me wrong, but I think something that gets lost in the way people talk about in the way we communicate now is that  Let me tell a little story.
I used to be a big fan of Roger Ebert. Rest in peace. Brilliant writer, right? Super enthusiastic. He was very critical of the way people write online. Very critical of things like emojis and emoticons. I think, while I respect him a lot, I think he completely missed the point on that.
The point of that is, although, yes, we type to communicate online, it's not really writing. Not in the way our English teachers taught us. Right? It's typed speech, really. Right? It's a register of communication that's closer to the way that we talk than it is to the way that we would write if we're writing an essay or a blog post.
One of the things that I really like about, Slack for example, is the rich way that you can communicate without it looking junky. It doesn't look like something awful or 4chan or some of the other really junky-looking message boards that have that level of expressiveness. It gives you the level of expressiveness so that you can substitute for the lack of facial expressions and body-language, but it's not writing. You don't write  you don't type into Slack the same way you do. It's much closer to the way that you talk.
For a remote organization, where we're not on Zoom all the time, although we are a lot, it's super important that you have that level of human expressiveness in your medium, in the medium that you're using to replace spoken word.
Three comments. One: Zoom is the video conferencing tool we use, and we'll talk about that in a second. Two: I don't spend much time on 4chan, Ken, so I'll take your word on that one. (laughter) Three: just to give an example, talking about customization and you might be asking yourself, "Okay, Todd, I've used Slack. I've used chat. What're you talking about?" Just give you a few flavors.
The simplest is creating your own channels that have some sort of cultural significance to your organization. One of ours is called "Rollcall", where we  It's the digital equivalency of walking in and out of the office. "I'm here this morning." "I'm gonna go get my car worked on." "I'm back." It's not just status, it's also  not just whether you're working or not, but it's a way to communicate basic, little life things in a short way.
We have another one called "Kudos", where we give kudos to people. Which, at first, I thought, probably, wouldn't take off, but it actually did. It's where you give kudos to people for things that they did well, and I'm really shocked how many people give kudos and how many people respond.
That's obviously just using the base tool and choosing what content to put on there, and how to organize. There's other things, too. Obviously there's things like code-repository integration, a code bug-reporting integration. We integrate with other companies' Slacks. They have a Slack channel, we have a Slack channel, and they connect so that we can do that with our clients.
All the way to we have a custom Bot we wrote for Slack. Her name is Ava. She does a variety of internal processes for us. She's kind of  In the old days, you'd have a database and you'd have a Windows app written to connect your database for your company, you'd do things in there. We have a lot of internet SaaS-tools. And then we have Ava that integrates a lot of them together.
Todd, can you give an example of something that Ava does for us?
Yes. There's some basic things that a chatbot might do. For instance, you might wanna ask her where Jamon is, and she'll tell you the information she knows about Jamon. It's a lot of operational stuff. For instance, our Project Manager, Jed, has to produce weekly reports for clients. Ava produces those for him. Stuff like that.
Stuff that you would normally do, like I said, in the old days, in a desktop app personally.
Todd came up with Ava quite a while ago, actually. It was sort of a toy to start with, just playing around with it. He had some ideas where it might go, but over time we've actually invested more and more resources into this internal chatbot and it's proven to be quite valuable. It's saved a lot of time, reduced the amount of overhead that we have to have tracking things because it's able to do a lot of process things.
So far, she has not escaped and murdered us. (laughter)
Not so far. I'm working on that.
That's a win.
There's some tiny things. She's just a way for us, if we need to program something that we have a sticking point like, here's a very simple thing that took me five minutes to ruin. We do a lot of things on Mondays, and constantly wanna know what last Monday was, or Monday three weeks ago. You can literally just say, "Ava, what was Monday two weeks ago," and she'll tell you. That's a very tiny thing.
Generating project PDFs or generating project reports is a bigger thing, obviously.
Another tool we use to communicate, non-verbally in Slack, is "Reactions". Someone'll post something and we react to it. I think this is pretty common in Slack teams and this is something that Slack did a good job of coming up with a cool idea. Usually you think of up-voting and down-voting, but when you have the whole range of emojis, including custom ones and animated ones and things like that, it can be a very cool thing.
One interesting example of this: we have an integration with  Ken, what's the service we use for Chain React tickets?
Zapier.
Zavier. Zapier, yeah, and it connects with Eventbrite, and that basically will post any time someone buys a ticket to Chain React, which is our React Native conference, of course, happening in Portland in July. You should buy a ticket. (laughter) We get a notification, and it pops in there, says who's coming. When we're getting down there  We were getting down to the last few advanced workshops that were available, someone started putting a number emoji underneath it. 10, 9, 8, 7, 6, like that. You can see then, at a glance, how many were left. It was very cool how we were all collaborating on that.
When someone would buy the advanced workshop, Kevin VanGelder, who's our resident Windows guy, he would put a little Windows emoji on there because that's part of the advanced workshop. It was just a cool way to communicate and collaborate without even using words.
I think the important part of using reactions or emojis or Slack Responses  Reactions, if you're not familiar, Slack is  It's simply, someone posts a message, and instead of responding to it, you can post a little image on it, like heart, or a thumbs up, or a vote-up, or whatever. Slack Response is an automatic system that, when you say X, it outputs Y into it. One Slack Response that Jamon hates is that when you say "I'm not a big fan", it posts this picture of this really, really small fan. It's hilarious. I love it. (laughter)
Really hilarious.
Every time someone put  We had some that we had to remove, 'cause they just came up too much. Every time you'd say "founders" it would show the Three Stooges, which is "Accurate", but
It was "founders' meeting".
Oh, whatever.
But still, yeah.
It was accurate but a little too much noise. The point is, it's very important. We've probably added a huge number of Slack Responses, a huge number of our own emojis, and the emojis you can use for Responses. A lot of them have become very cultural. Just to give you a few examples: my cat, Calle, that's short for Calle Berry, I took a picture of her paw. And, of course, cats, if you just do the front part of their paw, it looks like they have four fingers instead of five because their fifth one's back further. We came with this emoji and this thing where, if someone does a really great job, they get a "high-four", instead of high-five, and that's Calle's Response.
I didn't actually know that was Calle's paw.
Oh, yeah, that's Calle's paw.
That's cool.
So that's a cultural thing that I created one day, and it just kinda stuck. It became a "high-four"; it is an Infinite Red thing, you get a "high-four". We have other things like that, too, that are very specific to our culture, where you have to explain to people who come in what that means.
I would definitely customize it, make it fun. We don't worry too much if clients see it. We're not doing anything inappropriate. At first, there was discussion, "Is it professional if they accidentally trigger one of the Slack Responses?" "No, but does that really matter?" "No," in my opinion.
It depends on the Response. (laughter)
Of course.
There were some that were a little over the line and that, without context, could be a little startling. We removed those.
Yeah, that's true.
But for the most part, yeah, just something that's quirky. Hopefully, we all have clients that, at least the people who are in the Slack room are able to appreciate that.
Another one that's totally part of our culture is, there was this early picture of me looking into the camera with a stern face. That became the "shame" emoji. That's been used ever since. Every time someone wants to throw shame upon someone, my face is there. I don't know if that's good or bad.
There's another one that's quite disturbing, of you, Todd.
Oh! When you say yes "yis", Y, I, S, yes that is disturbing.
"Yis dream."
You have to work here to 
You had to be there.
Some of the things that came from my experience at Yammer, where a lot of the company was run internally on Yammer, there's a couple of really big advantages to that. Especially, at an all-remote company, where the vast majority of conversations happen there. One is that there's very much less pressure to include people in meetings just because, just in case they might have something to say about it. Because if you've having a conversation in Slack, you just pull 'em in. Right? After the fact, and they can catch up.
But the other was, there was an ethos at Yammer that was, there was this pat question which was, "Why is this private?" "Why did you make this group private?" "Why is this in a private chat?" Making closed conversations justify themselves, rather than being the default. Particularly when we invite other people into Slack, I notice there's a little period of training, where people will instinctively start DMing, 'cause it's like "Well, I need to ask Ken this question."
Say we brought our bookkeeper in, right? They would ask me 'cause I was the contact. I'm like, "Ask this question in Finance." Right? "Ask this question in the Finance channel." Which happens to be one of the private ones, for a variety of fairly obvious reasons. By asking in the channel, then the other people who might be interested can just observe.
That's one of the ways that you compensate for the lack of that serendipitous, overheard conversation that people are so fond of in a office.
In Episode Two, we talked about the philosophy of remote work. Todd, you actually made a comment that was really interesting to me. You said, "When the leadership uses the remote tools, they immediately get better." Why do you think that's the case?
Human nature. I'll answer your question with a little story. I worked for company  This is circa 1999. I don't know. I didn't work for 'em; they were a client of ours. For many, many years they were very much a Microsoft shop. They had no interest in testing anything on other platforms like Mac or whatever. We worked for them for nine years, something like that. So this is all through the 2000s.
It was frustrating for people who wanted to produce websites that were universal. If someone opened 'em on a Mac, it would actually look good and not look horrible. One day, one of the VPs who was above the software group bought an iPad. I think, about a year later, he bought a MacBook. Once he had that iPad, all of a sudden, it'd become very important that things look good on his iPad, which is funny and horrible at the same time.
It is just human nature. If you use something, it's much more front of mind than if you don't. Even the best of people suffer this. If you have a mixed company, meaning you're part remote, part commuter, one of those groups is gonna be a second-class citizen. Period. If 10 people are in a meeting, and eight are remote and two are in the office, the two in the office are gonna be the second-class citizens. More often, it's the vice versa, right?
Getting everyone on the same page gets rid of second-class citizens. If you wanna make the best remote environment, either getting the majority or getting the people who have more power in the remote situation will increase your tools' quality big time.
That's for sure. We've seen that internally at Infinite Red, as well. When we use the tools, which we do, leadership team is probably the heaviest user of the remote tools in a lot of ways. There are situations where they're just not good enough, and we make sure that they get changed, for sure.
Zoom is a good  Zoom, the video chat, video call system, is really an interesting one because it has worked the best for us in terms of video calls. We've used a whole bunch of them. We've used everything from Google Hangouts, Skype, Appear.in, which is pretty decent. Pretty frictionless, actually. I like Appear.in for how fast it is to jump into it, but the quality is still a little bit sub-optimal. A few others as well.
The nice thing about Zoom is that it allows you to put everybody into a grid pattern. It has a gallery view, which is really cool because then you feel like you're having a meeting and not doing a presentation. That's something that came out of us doing sales calls and internal meetings where we kinda felt like, "I don't wanna be the person on the big screen," right? Feel like your giving a presentation. "I wanna feel like this is a meeting with everybody in an equal place." It makes people feel more comfortable.
That was a situation where we were using the tools for various things and found the one that, I think, has worked the best 'cause, as a leadership team, we needed it.
Yes, as far as video chat or video calls  We actually need a name for that. What do you say if  It's not really video chatting.
Video conferencing?
I don't like 
It's not exactly "conferencing".
I don't like the term.
Video meeting?
Video meeting.
Yeah, there needs to be a term for that. We need to coin a term for that, at least internally.
Zooming.
Zooming. Well that's  That's not tool-specific.
Slack as a tool is much stickier, in the long term, probably, than Zoom is. At the moment, Zoom is, by far, in our experience, the best quality.
Mm-hmm (affirmative).
But that could change.
Slack  there's a lot we've invested in customizing and it would be harder, but  Although, we have invested some in Zoom, which we can talk about a bit.
I would say Zoom is our favorite for our situation. One of our clients is BlueJeans.net, which is not really a competitor, but they do video conferencing. BlueJeans is really great for many things. One thing is they do every platform well.
Mm-hmm (affirmative), yep.
Which, Zoom, and a lot of the other ones don't necessarily do. Now, we're all mostly on Macs, and it works really well on that, so that works out well. Also, BlueJeans.net has a lot of additional features. Where we basically just need video conferencing; Zoom is so superior. Google Hangouts is horrible. Please, please stop using Google Hangouts.
Don't use Skype. Don't use Google Hangouts.
Well, Skype  
Skype has gotten better, but  
Skype's quality is great, but it does a max of six people. We have 26 people.
I disagree that they're quality is great.
I was being ni  
Even domestically, I've had problems with it. (laughter)
We have Microsoft people listening.
I was being nice, Ken.
It crashes a lot on Mac.
The point is, here, you should demand rock-solid video 99% of the time.
If that's not what you're getting, look at another tool.
This extends to the internet bandwidth that you have available at your place of work, too. Some people that were really scraping by on 20Mb or something connections, and it was impacting video quality, and  
On what tool?
No, their connection.
Their internet connection, yeah. That was something that we, overtime, got everybody to upgrade to faster and faster internet. I think that was a success for, pretty much, everybody. They have pretty acceptable internet, now, at this point.
Some aren't as much. We have a person who's a nomad and travels around. We have someone who's in extremely rural Canada, up above Toronto, Tor-on-toe, I'm told is the proper way to say that. Zoom does very well in bandwidth, so the people that do have limited bandwidth, that works very well. We actually have meetings, 26 people in Zoom, which before would have been crazy. Skype limits you to six, which I'm not sure how useful that is for most meetings, but good for you, Skype.
The only thing it's not so great on is battery-life, if you're using a mobile device.
It sort of trades CPU time for bandwidth.
It does, yeah.
One of the things that Zoom doesn't do, that we've sort of built a system on top of, is permanent conference rooms. We've found this to be very useful to say, "Hey, let's jump into this 'conference room A', or 'conference room B'." We have better names for it. We name them after rooms in the boardgame Clue.
Trademark Milton Bradley. (laughter)
There's a billiard room, there's a conservatory, there's a study, kitchen, et cetera. We have different uses for those different rooms. Some are for sales calls; some are for  One is called Kitchen, which we use for the kitchen table, it's basically where people just jump in there, and work together in relative quiet. It's a cool little concept.
We actually built an online, like a website, as well as a desktop app that shows a Clue board with the different rooms that light up when people are in them, and then it puts avatars of who's in that room, including guests, which is very cool because I can go in there and say, "Hey, look! Chris and Todd are having a meeting over there. I'm gonna jump in and see what's going on." I can just click in there, and it opens a Zoom window, and I'm in their meeting.
For example, currently, Chris, Jamon, Ken and I are in Study. We have Kevin and Ryan in Library, and we have Jed in the Billiard Room by himself. I'm not sure what that's about. Maybe playing a little pool.
This goes back to the notion of tools as architecture. Consider the experience of being in an office, and you want a meeting. You say, "Hey, let's meet in Fisherman's Wharf." I was in an office where they named things after San Francisco neighborhoods. "Let's meet in Fisherman's Wharf." Everybody, after they've been oriented into the office, knows where that is and they just go. That's it, right? That's the experience, right?
Furthermore, if you wanna know where somebody is, you walk around the building, look into the rooms, and see that so-and-so is in Fisherman's Wharf, so they're in a meeting, they're busy. Now let's look at what it's like to be remote, without a tool like this. "Where's the meeting? Okay, I gotta ask somebody. Oh, okay. Oh, did someone start the meeting? Oh, no, no, okay, somebody needs to start the meeting. Alright, gimme a second, I'm gonna start the meeting. Here's the Zoom URL."
Oh, God!
"Okay, you gotta invite somebody." "Do you remember the Zoom URL?" "I don't remember the Zoom URL." "Okay, hang on. Okay, I got it. Here you go." That's the UX, right now.
Of the base 
Oh, jeez.
 video conferencing tool, and it's no wonder people hate that!
Yep.
Can you imagine?
Yeah. It turns out  We've had to increase the number of rooms over the years, right? But how many do we have now? Eight?
Eight.
So we have eight rooms now?
Eight current rooms.
That's pretty much fine.
Mm-hmm (affirmative). For a team our size, that works well.
We usually don't fill all of  I think, yesterday, I looked in there and there were six in use, which was kind of a anomaly, but 
In an office, we can keep adding those as long as we need to.
That's right.
This is a case where I think we've created something that is actually better than what people who have an office have.
Right? Because you can, just at a glance, see where people are. Nobody has to even tell you what room they're in. They just say, "Hey, we're meeting." You go look at the Clue board, and you see where the people that you're meeting with are, and you join the room.
It's just one more little piece of constant friction that we've eliminated. I love it. I think it's a fantastic tool.
Yeah, I keep the Clue desktop app open all day long while I'm at work. It's also cool to see the little avatars and stuff. Makes me feel like I'm at work.
When we first started, you did have to push  This is a very common interaction. "Hey, Todd, I need your help with X." And I'm like, "Let's have a meeting" or "Let's jump in Zoom" or whatever. "Which one?" "I'm already there. I joined a room as soon as you said it." "Which one?" "Open Clue. (laughter) Look for my name. Click on it."
That only took a few weeks, to be honest, of constantly just needling that to the point where, when someone says, "Hey, I wanna jump in a room," they look and they see where you jumped in.
That brings back the importance of having the leadership on the tool.
That's right.
This tool actually came out of a side-project. I think Gant and AJ, two of our engineers, came up with the idea and built a prototype, and put it out there. It was  I remember being, initially, a little bit skeptical that it'd be useful and it's turned out to be a really key part of our remote experience.
That's actually an important point. No one asked anyone to make that tool. No one asked for permission to make that tool. They made it. They turned it on. Now, we've had tools that people've made. For instance, my tool Ava, which, now, is very useful, originally was Dolores, which is from HBO's great TV show, "Westworld". Dolores never caught on. She didn't do enough important stuff, and so she just kinda died.
Later I resurrected her as Ava, which is from the movie "Ex Machina". Excellent movie, by the way.
It's still kind of a disturbing allusion, though.
It is, but it's  It's a great movie. And then the next movie he did, which was "Annihilation", was fantastic as well. Anyways, not important, obviously.
The point is, no one needs to ask for permission. They can make tools. They do. They put 'em out there, and they live or die based on whether or not they're actually used. We do sunset things that just never really took off.
You're mentioning a lot of tools that enable remote work, that enable productive work. What are some tools that you're thinking about or are in place that help with focus and eliminating distractions? 'Cause sometimes, people new to these environments can look at these tools going, "Man there's so many distractions. How do I work?"
I actually think that's one of the biggest benefits of working remotely, which is kind of counter-intuitive. You think, "Oh, there's so many distractions when you're working remotely." Actually, you can turn off Slack. You can turn your screen to "do not disturb". You can shut off Zoom. You can turn off you're email. You can close all of those applications and just have the app that you're doing the work in, you're writing a blog post, you're writing code, you can just have that open. You can turn on a "do not disturb" mode in Slack that'll actually tell people that you're currently away.
If you use the tools that are available, remote work can actually be much better, because what happens in an office? Someone can't get a hold of you on email or Slack, so what do they do? They hop up and they walk over to your office, and they're like, "Hey, did you get my email?" (laughter) "Okay, I will check my email, eventually, here. Is this really important?"
One of the things that we do is  This is kind of funny, but we'll actually say "I'm going offline for three hours, 'cause I'm gonna focus on this thing. If it's really important, text me." Our phone numbers are there, right? Nobody's gonna text you, 'cause that just feels like a complete intrusion. Right?
It does happen. Like, if it's a genuine emergency.
It does happen if it's like an emergency. But that is so rare. That is awesome, because you're adding a ton of friction, but you're still giving them some way to get to you. I think that's a good property of remote work, that you can actually focus more in those situations than you can in an office.
Yeah, try to turn off all the noise in an open-concept office. Good luck!
Yeah, an office is distracting by default. You have to use technology to get some focus. I can't think of any tool that we use just for focus. Right? It's about human habits around how they use the tools that are already there.
I think there are some, Ken. I don't personally use them.
Yeah, yeah. I mean there are things, but there's nothing we use as a company.
No, but there are people here that use, for one thing, they'll use the various timer apps that tell them to stand up, or if they set a timer for focus  
I've used the Pomodoro timer.
Yeah, there are things. What's cool about remote work as opposed to depressing cubicle work (laughter), is you can set up the environment  
Soul-crushing commute work. (laughter)
Soul-crushing commute work, SCCW, I like it. In those situations, you have to go to the lowest common denominator. If 50% of the people are very productive and get focused with music, and 50 can't at all, you're gonna have no music. When you're sitting in your own environment, whatever that environment is, whether it's your home, or a cafÃ©, or co-working space, or whatever it is that you've chosen to be most efficient in, when you're sitting in that environment, you can control and make it perfect for you to be able to focus.
Personally, if I'm doing design work or visual work, I play music. It gets me in the groove. If I'm programming, I cannot have any music. Or if I do have music, it can't have any lyrics in it. That's a focus thing. I tend to like to work more in the dark, strangely. I love light and I live in a very sunny place, and a very sunny house, but I have noticed that I tend to get more in the zone in dark and often late at night, for me personally.
I'm the same way, Todd. I have to fake my brain into thinking it's late at night by closing all the blinds and turning the lights off. And it actually helps productivity.
Yeah, that's interesting. I used to have this problem at every company I worked at. Even, say, I shared a room with four other people. One office, and four. I would wanna have all the lights off and have a desk lamp so I could see. No one liked this. Having the fluorescent lights on  I didn't take cyanide, but I do believe I shopped online for cyanide, just saying. (laughter)
So this is in your browser history, now, forever, man. (laughter) There's a FBI file on you.
Oh, there's been a FBI file. Come on. If you don't have a FBI file on you, what are you doing with your life? (laughter)
At the old ClearSight office, we had some fluorescent lights, and one by one they would burn out. Nobody would tell the maintenance guy because they just liked that they were burning out. (laughter) Eventually it got quite dark in there and everybody, they just wouldn't even turn on the light.
I would like to make a confession. I have purposely broke some lights in offices.
"True Confessions with Todd Werth." (laughter)
You don't want true ones. No, that actually  
That's Season Two of the podcast. (laughter)
That actually is very true. Sometimes you just have to 
Civil disobedience?
Yes, I like the way you phrased that. Makes things more noble and less selfish. (laughter)
Yeah, right. Guerilla productivity.
We have some other tools to talk about, too, right?
Oh, yeah, we have other tools to talk about.
Should we talk about some of them, or 
But enough about Todd. (laughter)
I'll be here all week. Do not eat the veal.
One of the tools that has been really helpful for us is Google Sheets. Obviously, that's the spreadsheet program in Google Apps. We  We're having trouble  Again, this is pre-merger. We're having trouble figuring out how to schedule people. It was just a real pain. Eventually, my Project Manager at the time, came up with a system that involved sticky notes on a board that were, across the top were weeks, and down the left side were the names of people. We could just put sticky notes. My wife went out and bought a whole bunch of different colored sticky notes. We'd put the same project as the same color across the board.
You could, at a glance, see who was working on the same project. You could see how long it was going to be, as far as number of weeks, and every week we'd move 'em over to the left and add another column. That eventually migrated onto Google Sheets, 'cause, of course, that doesn't work so well when you're remote. The collaboration tools on Google Sheets are extremely good. It's very, very responsive to having multiple people on it.
When we do our Friday scheduling meeting for the next week, and beyond, we'll all pull open the sheet, and we look at it, and we can all update it  If we see something that's wrong, we can update it. We can change colors of the backgrounds. It's worked really well for, now, two and a half years. I think that's a remote tool that has actually been quite useful for us for quite some time.
Not only does it give us forward-looking data, but it also gives us backward-looking. We can look at previous years and see what projects were we working on at the time, who was working on what, all the way throughout. It's been a very cool tool. We're just repurposing Google Sheets to use as a scheduling tool.
Another tool we used to use  Jeez, I can't remember what it's called. What was the [inaudible 00:43:17] tool we used to use?
Screenhero.
Screenhero?
Screenhero, yes, of course. I remember when Screenhero was  It was eventually bought by Slack and is being integrated into Slack. We used to use that a lot, but truthfully, the tools in Zoom for screensharing stuff became superior and so I think almost everyone pairs with each other Zooming.
Another tool we use is RealtimeBoard, which is a sticky board analogist tool; the designers  
Designers love it.
The designers used it a lot, but we also use it in leadership and the developers, I think, are starting to look into it. It's great for brainstorming. It's a real-time tool, kinda like Google Docs or Google Sheets, where everyone can use it at the same time, and you see everyone using it. That's been really great.
The designers use the heck out of InVision, which is a wonderful tool for showing designs, getting notes, and collaborating with clients, collaborating with the rest of the team, and that kind of stuff.
Another tool we use for project management a lot is Trello. If you're not familiar, with it, it's a great project management tool. It's a Kanban board, if you're familiar with those. Not only do we use Trello, we also integrated  Ava connects to Trello, produces reports from  Ava connects to Airtable, which is another interesting mix between a database and a spreadsheet. We use Airtable and Trello. Those are some other tools we use.
Something to mention, also, is that between Slack and Zoom we have some redundancy, because Zoom has rudimentary chat and Slack has video conferencing. It's not as good as Zoom's, but it's there, and we already have it. For example, when Slack is down, we have Zoom channels that we can all do basic communication in.
That provides a certain amount of resiliency for the work environment, and that's very helpful.
Yeah, it does go down every so often. It's funny because our company comes to a screeching halt when Slack goes down.
Yeah, and that's a valid criticism, I think, of remote working.
We do have the redundancy so that people can at least, basically, keep going.
We all know now, if Slack's down  It was, actually yesterday, coincidentally.
If Slack is down, we go into Zoom chat. That took a while to get people  It's funny 'cause we don't use email and stuff, and we use that so much. We could jump into a meeting. We've done that in the past, before we had this redundancy we would just jump into a meeting room and kinda like, "Hey, what do we do?" It was like the lights went out and everyone was confused at what to do.
It's actually kind of amusing if you think about that. A bunch of virtual people wandering around in the dark wondering what to do.
We have a lot of redundancy of internet connection. Someone might be having internet issues, but not everybody is having internet issues. That's a pretty big deal. I remember the office internet would stop working and, even though we were all in the same place, yes we could collaborate, no we couldn't work 'cause we couldn't access  
Couldn't get to GitHub, can't get to
 Dropbox, whatever. Which, we do use GitHub, we use Dropbox. There's a little tool that I use that, I would say, about a third of the company also uses. We're on video calls a lot. When you're on a video call, sometimes it's nice to have a cough button: you hit a button and it mutes you for just a second, so you can cough or whatever. This one's called Shush. It's a Mac app. You can buy it for three bucks or something. It turns your function key into a mute button, so you just hit that button and it will mute you for a short amount of time. Or you can double-tap it and it turns into a push to talk button, which is nice when you're in a big group.
Mm-hmm (affirmative). I don't use Shush, because I use a hardware version of that. I have quite a lot of audio equipment and video stuff. Pretty sure, in the remote podcast, we talked about the importance of having good equipment and spending a little money on good equipment. You cheap managers out there, stop doing that; you're horrible people. (laughter)
Also the background of your video call is really important. That was actually something Todd really emphasized when we first started. I will point out that he has the messiest background of all of us, right now.
Well, to be clear, I have two cameras. One is a wide angle which I use for the team so I can move around and stuff; and I have a tighter angle I use for clients, in which case, what's behind me is very specifically chosen to be a background, and I keep that incredibly clean.
I just say that to tweak Todd, because he's the biggest champion of having a good background.
Yes. Jamon's horizon, right now, is extremely tilted, and it's been driving me crazy the whole time, but I'll get over it. (laughter)
I know. I can't unsee that.
In my 46 years on this planet, I've learned not to mention that, even though I really, really want him to straighten his camera.
It doesn't help, Jamon, you've still got a vertical line that is  
I'll tell you a funny story about backgrounds. Poor Ken. Ken had this very nice  I don't know what it was. What was it, Ken?
It's a bookcase, right, (laughter) but it's IKEA furniture, so it looks  
It's IKEA?
It looks like a dresser. Yeah.
This whole time it was IKEA? We thought it was important. We felt bad for making fun of it. 'Cause it looks like a dresser. It was right behind him, and it looked like Ken was sitting in bed (laughter) with his dresser behind him.
Yes, reinforcing every stereotype about remote workers. (laughter)
Right. We kept on bugging him, and he said, "It's a really nice bookcase." I didn't realize it was IKEA.
I didn't say it was a really nice bookcase. I said it was a bookcase. (laughter)
It looked like a dresser.
It really did, in fact.
That's because it's IKEA furniture, so it's looks like that.
I guess the point is, how things appear is more important than what they actually are. This is something a lot of people aren't familiar with. We have different people with different levels of quality of what they produce as far as visually or audio. I think the general takeaway is take some time. You are almost doing a mini-television broadcast, and you wanna be  I wouldn't say the word "professional", because it's not stuffy, it's fine if you're wearing your tie-dye and your shorts, but you should make it a pleasant experience for the viewers.
Yeah. You should look inviting, and it should look intentional.
Mm-hmm (affirmative).
And kept.
We have some other tips for remote video meetings that, I think, are on a blog post that we created. Was that you, Ken, that wrote that post?
Yeah. We could do a whole podcast, frankly, on how to have a good video meeting.
We can link to that in the show notes.
We can link to that for now.
That is a podcast I wanna do. I do wanna point out to the audience who can't see us now, we're recording this for your listening pleasure, and I put pleasure in quotation marks 'cause I don't wanna oversell it. But, we are actually on Zoom, so we can see each other. Jamon, thankfully moved his camera so we can't see the horizon any more, which is crooked, but right over his left shoulder is a door-line that's incredibly crooked. I appreciate the effort, Jamon, but come on. Have some dignity.
I will point out that I'm moving out of this rental in a week because I had a house fire, Todd. (laughter)
Oh, jeez. You can't pull a house fire out every time there's a criticism.
The only thing in my background is my Harvard diploma (laughter) because it's all that anyone cares about.
Yes, exactly. Over my shoulder, I'm thinking about putting my not-Harvard diploma.
"Narvard".
It'll just say, "Not Harvard."
Sometimes we just invite Ken's Harvard diploma, instead of Ken, to meetings. (laughter)
Yeah, I just put it in frame and then I walk out. (laughter) I'm like, "I'm just the janitor."
I do have one final question, as we bring this episode to a close: Is there any tool that you use outside of remote work or in your daily life that you wish existed as a remote tool.
Blow torch. (laughter)
Elon's got that for ya.
Not a tool, completely, but here's something  I have ideas for tools that'd be cool in the future. We have the concept of "kitchen table". This is a real quick story; please, bear with me. The three of us  I don't know if Ken was, but there was multiple of us of the company who were speaking at a conference in Paris. We rented a large Airbnb apartment in Paris, and a bunch of us were staying there. It had a very large kitchen table. When we weren't doing stuff individually, we'd all sit around the kitchen table, and we'd work together.
We would just sit there, like you would at a library in a university or something like that, and work. We wanted to recreate that in  virtually. The simple solution is we dedicated one of our Zoom rooms, the "Kitchen", to the "kitchen table" and you can't use that for anything else. If you just wanna be around people, but you're working, you're not really saying anything, as if you're in a library  I guess we should do the library, but whatever  you'd go in the kitchen table and just be around people. Sometimes people say things and have little conversations, like you would in an office, but typically you're just sitting there working together.
That's cool. It's missing a few features which I'd love to see. For one is, if you're not  Say there was a group of people working in an open office, and they're in the center and you're on the perimeter of the office. You see them working together there, the "kitchen table", now we have that, with our tool, we can see who's in the "kitchen table" and they're there. Great. But you can also, even if you're far away and they're dim enough  not dim, but the volume's low enough that it's not disturbing, you can still hear them, and sometimes you'll pick up on little words that may interest you.
They'll mention a project you're on, or they'll mention a personal interest that you're interested in or whatever, and you can choose then to go walk over and join them, because of that kind of low-noise but informational thing you're getting by being in the perimeter. I would love to somehow integrate that into our tool, where you could have a low-murmur of people in the background of the meetings that you're not in, and listen for things that might be interesting, something like that.
I don't really know how to think about that question.
I find it very interesting that none of us can really come up with a tool that we wish we had. That's a fantastic answer.
I mean 
I think there's probably tools that, eventually, we'll get that will be like, "How did we live without this?" But I don't  I can't think of one.
I can imagine in the future, basically a VR setup.
Mm-hmm (affirmative). Yes.
If VR gets to the point where it feels natural; it's comfortable to wear the equipment, it's not a burden just to have the stuff on your head, and the resolution is to the point where you could have a virtual monitor in space, and you can have that feeling of actually being next to people. Then you could, in theory, have the best of both worlds, where you can drop out and leave the space if you want to. You can also be in the space and be available for that.
I think that would be pretty nice, but 
There is a tool out there that's  I think they're, maybe, in beta right now. It's called Bigscreen VR, it's by a guy that I know, Darshan Shankar, who's on Twitter. I met him on Twitter. He's doing this Bigscreen VR system. It's very much what you described, Ken. Right now, it's only on Windows, and of course the VR headsets are still evolving. But apparently the new Oculus Go or Oculus Now, or something, is apparently quite good  
Yeah, they're getting better.
It's also likely, they said that within the next year, that it'll come to Mac 'cause they're working on it.
I think another threshold, though, is the quote-unquote "retina" threshold, to where the resolution of the headsets is such that you can't, in terms of resolution, anyway, you can't tell the difference between that and something that you're looking at.
Yep.
You could actually make a projected display without any compromise.
I agree, in the future that's gonna be wonderful. I do have some current ideas on how to add spacial stuff to our tools to give us proximity information of each other, virtually. Kind of what you would get if you were in a VR situation, but without having VR. Anyways, there's some interesting things there.
Yeah, we've talked about making an ambient audio device, something like that, that can just sit there and  Kind of like "kitchen table", but without the video. There's a bunch of things we've talked about, but not of them are things that exist today. They're just things that we've thought about creating or  yeah.
We received a question from the community, community.infinite.red, it's a Slack community that we have. Trent asks, "Hey Jamon, I'm enjoying the podcast. Will you guys be covering hourly pricing versus project pricing? It's a question we're dealing with right now. Which do you guys prefer, and what are some lessons learned to bring you to that choice?"
I think this is a really great question. Todd, do you wanna talk about what we're doing right now? And then we can go into maybe what we've done in the past, and what brought us to that choice?
Sounds good. Yeah that's a great question, and it's actually a really tough one to deal with. So, what we do now, is we do weekly pricing. We charge per person-week, and we call it "person-week" as opposed to "a week of work" because it could actually be two people working maybe half a week each and that would be one "person-week." Because we're doing person-weeks, we have a point system. So, 100 points equals a person-week. We don't track time. We used to, and we can talk about that we used to bill hourly. We don't track time, we don't actually know how long things take, it's just, we estimate our tasks in points, and if we've reached a hundred or more per person-week and we charge per person-week, then we're accomplishing our goal.
There's a bit of a tension between time and value, and this has been something that we've dealt with, I mean, I've dealt with, since I started my first consultancy. Of course, value-based pricing is kind of a holy grail of pricing for consultancies, and we've heard this for a long time, that you should charge for the value, not just the time that it takes. So an example, this would be fixed-bid pricing, where you're essentially betting on delivering the software in a reasonable amount of time, but you're getting paid on the value to the client.
The problem is that our costs are not based on value. So, we're not necessarily paying our people based on the fixed-bid, a percentage of the fixed-bid, or something like that. There are industries that do that, but ours is not one of them. So we're paying people salaries, and our costs are over time, and so if something takes a very long time, then our profitability and the ability of the company to remain financially solvent is threatened.
Conversely, you have, of course, hourly. We've done that in the past, and the nice thing about hourly is that it corresponds, obviously, very tightly with the amount of time that it takes to do. But the problem is that every hour is not equal. You have hours that are maybe really valuable, you've automated something and in a lot of cases you're actually delivering more value than the client is paying for, quite a bit more. And then there are others where the person's getting spun up, or they're hung up on a particular problem, whether it's their fault or not, and that turns into a bit of an issue, because then you're billing hundreds of dollars an hour for something where the client isn't really getting a lot of value. So I think that's why we ended up where we are, in a way.
Yeah, both have issues. When you're doing hourly, it might seem to a client that's more fair, but it's not. It means every time there's a bug, or any time there's an issue, we basically are nickel-and-dimeing them, and they don't necessarily like that. We have to spin up someone, like Jamon said, where in our value system that we use now, they don't see any of that. We fix the bugs because it's part of the value of that particular feature. It does mean, though, sometimes, that we can produce a feature faster than the hourly would've been, and so they get charged, I guess, more for that.
There's a couple of different ways that hourly works out sometimes, though. There's certainly the very literal, like, you sit there and you run a clock, like the way a lawyer would, you actually have a little timer that shows exactly what you're doing. When I worked for a large sort of corporate consulting company, Big Five-style, back in the '90s, I remember my first week I was filling out my time card, and I filled in the insane hours that I worked, because that's the kind of work that you do. And my project manager comes over to me and he's like, "No no no no no no no no, this is not what you do." And he took my time card and he filled in "eight, eight, eight, eight, eight." (laughter)
That's ridiculous. But
Right. So that's how the Big Five work, often.
So it's completely fake in that situation.
It's completely fake. It's basically pretty close to what we do now, which is that weekly billing. Where an hour is just a way of measuring a week.
To answer the question directly, you know, do we prefer hourly or project-based, we prefer hourly.
Hourly leads to less problems in the long term because the trouble with fixed bid, although it seems like it's appealing It's appealing from your point of view, if you think you can be really efficient, and it's appealing from their point of view if they think you can't. But that's exactly it right there, it creates this adversarial relationship. Todd?
Yeah, clients all not all, but many clients think they would love a fixed bid. And in truth, they will hate a fixed bid. Ken's right. Fixed bids create an adversarial situation. Even if both sides are extremely They're at the table in good faith, and they're trying to do the right thing and do their part and stuff, it still means that the client is trying to get as many hours as possible out of you for the same price, and us would be trying to do as few hours as possible. Like I said, even if you're both being very nice and very ethical in the way you're billing, that always creeps in.
It also means that you have to lawyer every change. You'll have companies that have change order systems that are pretty complex. Clients hate that. When I talked to especially start-ups, one of the things I say is if the project we're working on at the end ends up exactly as you envisioned at the beginning, that's a huge red flag. That means you didn't listen to your beta testers, that means you didn't think at all during the process even after you got in your hands what could be better, it means a bunch of different things.
So, we have a pretty strong process, but it's designed to be flexible. We wanted it to be flexible. So when we get to the point when we do estimation after a research phase, it's fairly accurate. The likelihood that it will actually produce your project for this estimate is extremely low. Not because we're incompetent I'm sometimes incompetent not because we're incompetent, but because you're gonna make a bunch of changes, and we welcome that. We don't lawyer that.
But that's a little bit difficult, there's a little bit of education involved in getting people to understand that fully.
One of the objections is that, well, there are other companies that do fixed-bid, and they seem to do just fine. They're able to sustain that and their customers are generally happy, and things like that. But I think there's a hidden cost in there that people don't take into account. Which we've sort of driven a stake into the ground, we've said, "Hey, we're not willing to go down this route." And that is that those companies put the burden of hitting those estimates onto their employees. They essentially say, "Okay, well, we estimated this amount, you're not done yet, so you're gonna stay late until it's done." And they push, and push, and push, and they really, really just drive the screws in on their employees. Maybe not overtly, maybe not directly, but there's a culture and an expectation of being able to hit those estimates that puts a lot of stress on the employees.
Yeah, that doesn't necessarily look like a slave driver. It can look like a "Rah-rah, sleep when you're dead," "work hard, play hard." "Rah!" But like, that kind of corporate culture. There are firms out there that I respect that do fixed-bids, and they seem to make it work, and that's fine. But in our experience, someone is paying for that somewhere.
There's another type of fixed-bid which isn't just slave-driving your employees into the dirt. It is, you think it's gonna cost $100,000 on this project, you bid $800,000. So no matter what, unless you're ridiculously off, you're fine. The problem comes in when clients want both the lowest possible price and a fixed-bid. That just It's not really possible.
So, our system is different. And Todd, I'd like you to talk a little bit about why our Because, we are giving an estimate with points, and we're trying to hit those points, so it may feel like a fixed-bid, but do you want to explain what we're doing differently, where it really does change over time as you do a project?
Yeah, so we do spend a decent amount of time doing research, architecture, that kind of stuff, before we estimate the points. So we're not just doing a ballpark estimate. We do a ballpark estimate at the beginning, but that's a few hours of our time. But we spend a few weeks or whatever doing research, architecture, that kind of stuff. And at the end of that, we produce an estimate in points.
So those are fairly accurate. Obviously, anyone out there who does software development By the way, everything we're talking about here is for development. On the design side, we do fixed-bids, and that's a different discussion. The gentleman who asked us the question was more towards the development side, so that's what we're talking about.
So, our estimates are based on a whole lot more information than a lot of people do. And we do have clients who want an accurate estimate earlier, and we just have to push back, because in that situation we have only two options: We either push back against them and try to educate them in the process and help them do a successful project, or we lie to them. (laughter) And unfortunately a lot of companies just lie. They just come up with a number, they act like they put some thought into it they didn't. I worked for a consulting company in the late '90s where the way we estimated was we asked the sales person how much they could afford. That was our miracle estimate. Which to me, I hated as an engineer. I just loathed it. I'm digressing a little bit here, but I don't want to make it out that our estimates are super accurate or that estimating software at all is an accurate thing at all. We know it's not.
One of our sort of colleague companies out there calls them "forecasts," which I really like. People understand, like, a weather forecast is not necessarily going to be accurate. It's like, "Based on what we can see right now, this is what we think is gonna happen." And everyone understands that. So I really like that as a bit of language.
Yeah, we should call it "forecasts."
I'm tempted to steal that, but (laughter)
The other cool thing about a forecast is it's known: the further out you are from the date, the less accurate the forecast is, and the closer you get, the more accurate, and that's very true in our situation as well.
That's a great point, Todd, because we will definitely adjust those estimates as we get into things, and as we learn more. And I try to, I do a lot of the sales calls now, and one of the things I try to do is set the expectation that over time, the estimates will get more and more accurate, as we know more. The same thing with the weather forecast. You look at the ten-day, and you look at day number ten, and as you get closer and closer, you're gonna see a better and better forecast. And it's not uncommon for that to change even quite drastically, because weather systems can get delayed a little bit or something, and that can impact which day they land.
Unless you live in California, in which case our weather never changes.
Yeah. No, I live in the Pacific Northwest near the Columbia River Gorge, and nobody understands the weather here.
Our weather's hot and sunny. Tomorrow? Hot and sunny. The next day? Hot and sunny.
What if it's-
And then a terrifying thunderstorm. And then hot and sunny.
Once a year, we have terrifying water from the sky. I live in Las Vegas, Nevada, which is in this very small patch I'm totally digressing here but it's a very small patch in the US with the most sunshine out of the whole US, and it's just basically Las Vegas and around the desert area here. I think it's something ridiculous like 300 and some days of pure sunshine. Which is nice, as I lived in San Francisco for 20 years, and it is the opposite of that. And I enjoyed that for a long time, but I enjoy this. Anyways.
So one of the things I wanted to bring up is, and we should talk about estimates. Because estimates are a big part of how you charge. And it is a difficult problem, and we have all sorts of issues that, I think, would be very interesting for listeners to hear that they're not alone in, and that we're still struggling with.
Nobody has a magic bullet. Nobody has a magic bullet on that.
It's a soft problem, it's definitely a people problem, and it's something that I'm actually actively working on all the time. But to finish up what we were saying before, we do find that weekly billing has worked out very well. It does require education. Your clients may instinctively go, "Okay, well they're just doing this to make more money because they're gonna get it done way faster, and they're actually gonna charge me this extra money, and they're not gonna do anything."
And that's a perfectly normal human reaction. But one of the ways that we added some sugar to that tea is we say, "A bug comes up, sometimes bugs take five minutes, sometimes bugs take a half a week to fix. That's all included in that estimate. You don't have to worry about that. No nickel-and-dimeing." When the estimate goes up, say we add person-weeks to the overall estimate, and then maybe we add some calendar-weeks
By the way, we have typically a minimum team of two, and most times people work on one project full-time, so if you have a two person team on a project, we're producing two person-weeks per week. From that, and the number of points we estimate, we can calculate the calendar time, as opposed to the person-week time. And the calendar time does get extended, and the person-weeks do get extended. But it's always not always, but it's usually from changes, and we try to be very good about being very transparent in explaining, and the client should know what all those changes were. They hopefully have approved them, and that's what adds the person-weeks and that sort of thing.
There are some times where we will feel like maybe we made a mistake, in such a way that it was maybe, we're not comfortable charging the client more for a particular thing. And in that case we will adjust what we're billing for a particular chunk of a project. And we'll take on that risk. There's a shared expectation of being reasonable in this. If a client's asking for something, then we're gonna bill more. If we make a mistake, then we'll try to rectify that as much as possible. But it does have flexibility built in, and that's important. But then also, like you said, Todd, the bug-fixing is built in and things like that. That really helps mitigate the amount of risk that the client is taking on.
And truthfully, it's much easier for people doing the actual work, because they don't have to constantly, "Oh, this three-hour task is now a five-hour task, I have to ask permission for those extra two-hours, and it's just a lot of paperwork and a lot of thought about stuff that has nothing to do with making a great project."
But yeah, and I also want to add on to what Jamon just said, the way we deal with issues Let's say the value wasn't there, we had some problems, we typically deal with it on the invoicing side. We tell our people, "Okay, for whatever reason we're not gonna be charging for these person-weeks." But from their perspective, it doesn't matter. They're estimating points, they're working during the week, they're getting at least a hundred points per person-week, and they just keep on going forward.
We'll adjust it on the back side, on the invoicing side so that our process keeps going and we have accurate data, even if we're in a situation where we made a big mistake or something like that, and we're not charging them for, say, a few weeks or whatever.
Yeah, totally. And Ken, would you wanna talk about the chronic problem of under-estimating? 'Cause I know this is something that's near and dear to your heart.
Yeah, I don't know why engineers I don't know if they want to feel like they, you know, they're really fast, or they feel guilty, or if it's imposter syndrome, or whatever it is, but it is a chronic problem. Engineers will estimate too optimistically. So we have sort of structures and practices, and this is not an easy problem to solve, right? But we have sort of structures and practices in place to sort of counter-act that, hopefully, whether it's sort of checklists like, "Have you considered these sort of failure cases? Have you included the bug-fixing and the testing time? Is the testing time including every platform that you could possibly use this on?" Et cetera, et cetera. Todd?
Yeah, this is a problem we have not solved. We really try to hire, and I think we have hired, really decent, ethical people. Which is fantastic, and that's the intention, and I very much enjoy working with almost everyone here (maybe not Ken, but that's okay). (laughter)
You can't fire me. (laughter)
I cannot. I've tried many times.
It's a perk of the job.
Actually, it's funny, because I've been working on this a lot lately. We hire good, ethical people, which I very much enjoy. But they tend to feel more guilt, and they tend to be a little They contemplate it and worry about it a little too much, to be honest. And so we do have chronic under-billing.
One of the things we do is, we ask them for estimates, and we never ever up to this point I've ever said, "This estimate's too high. You need to reduce this estimate." Because this is the estimate they're giving us, and they're gonna do the work, and it's not fair for us to come and say, you know, "You said it's gonna take a hundred points, I think it'd take 50 points." And of course when they do it and it takes a hundred points, they've failed, but only because in my opinion it should've been 50. We never do that. We never push back on that.
So you would think that just human nature, in order to alleviate stress, they would say, "Okay, that's gonna take 50 points, but I'm gonna make it a hundred and 50 points just to give me an allowance." No one does that, surprisingly. That is not the problem we deal with. It could be just our team. Probably not just our team, I'm sure there's a lot of people out there who do that.
I mean, I've seen this everywhere I've ever worked, right? People wanna feel like a hero, people don't It's not as much fun to think about all the ways that things go wrong, well, depending on your personality I guess. But yeah, the ideal way that we're always striving toward is basically, the engineer gives us as accurate and conservative of an estimate as possible. And then in terms of how we present it to the client, if we feel we need to make an economic adjustment in order to get a sale, for example, then we will do that on our end. We don't want it baked into the estimate.
And Todd actually ran an experiment with our own engineers at one point. He took a screen, I think it was a login screen of a project we'd actually already done-
-and sent it to several engineers and asked what their estimate was. Do you wanna talk about that, Todd?
Yeah, I've done a few of these to try to kind of understand this problem. In that case, it wasn't clear what kind of project it was, whether it was a mobile app, an iPad app, a website. I did that on purpose. I also didn't give them any requirements other than I gave them a screenshot. Which is not untypical to get from a client if we didn't do the design, to just get the screenshots. So I wanted to see A) how they approached the estimation process, and B) what their estimates were.
I'll skip to the spoiler part. The lowest one was like three hours? This is back when we did hours, we weren't doing points. The highest one was like 46 hours. So the range is three hours to 46 hours. Some people, their estimate wasn't accurate for obvious reasons, they got back to me within five minutes and didn't ask any questions. And that was more on the junior side, and that's perfectly fine. Estimating is probably one of the most difficult things that we do, and so it's understandable when people with less experience do it less well.
But the interesting part is that a lot of people didn't even ask what platform it was on. The person who did 46 hours, the highest one, had a huge write-up of all the reasons why it was 46. And when you look at it, you're like, "Yeah." Because it seemed very simple. Like, it's a login screen. It's two text inputs and a button that says "Login." But there's actually a huge amount of stuff. A lot of people assumed they were just doing the screen as opposed to actually making it work, like, making you log in to the backend, and Facebook integration and all this stuff. But the fascinating part is how different it was and their different approaches.
It should be mentioned, though, just for the record, that the way this exercise was set up was intentionally, on Todd's part, very vague. Right? It wasn't like, "Hey, I need you to do this for a client so that we can get a good estimate." It was a very off-hand But the range of responses to that very vague setup was illuminating. Because some people are constitutionally incapable of not treating that seriously. (laughter) And some people are like, "Whatever Todd, I've got work to do." Right? So there's gonna be a very broad range there, and the range of real estimates is probably not gonna be quite as wide. But still.
Ken has a particular personality, and so does a few other people on our team, where he really didn't like the "gotcha" part of that question, the vagueness of it. And he felt like I was looking for a real answer and he was set up to fail on the real answer because I didn't give him any information. That wasn't the point of it. I actually didn't care what their answer was as much as the process by which they went around the answer. And I didn't say that, on purpose, too. And so he was a little bit like, "You're setting me up to fail, I don't like this, go to hell." Which was kind of funny. But it's funny from my perspective, but it's also illuminating. For people with that type of personality, that's the reaction they have to that, and that's a very real thing.
Well, it's also, like, if you just ask me a very vague off-hand question, I'm gonna devote a vague off-hand amount of attention to it. Right? And I think a lot of other people are gonna be that way too. It's kind of like, "Oh, okay, without any further information, why am I gonna spend an hour breaking down this problem for you?" Or however long it takes.
I will point out that mine was both quick and accurate.
Yeah, I hate giving Jamon a compliment, but I thought Jamon's was one of the more accurate, and he did it very fast, and it was very thorough.
We brought Jamon on because he's lucky.
That's right. I have a rule: Every quarter, I randomly fire one of our team. And the reason I do this is very simple. I don't want anyone unlucky working at our company. That's a joke, in case anyone thought it wasn't. We don't horribly fire people because they're unlucky.
But yeah, so that's a very interesting thing on that. There's other interesting things too. Another experiment I did was, I had people estimate something simple again. Then they gave me the estimate, whatever it was the numbers don't matter, but let's say they said 10 hours, and this is once again, back when we did hours. If they said 10 hours, then I would say, "Okay, what's the likelihood are you 100 percent confident that you can do it in 10 hours or under? Are you 90 percent confident? 80 percent confident?" And then I would ask them, "Okay, how about eleven hours? How about twelve hours, how about thirteen hours?" And what I found is that the first estimate they gave me, almost no one was confident they could do it in that time. Which was fascinating-
Yeah, it'd be something like 60 percent or something, and then you'd have to go quite a ways up before they were 90, 95 percent confident.
Correct. So I'm not sure exactly what to make of that, except for, that's a phenomenon.
I did ask some of our employees that were doing an estimate to include a confidence factor. And that estimation is not done yet. It should be in the next week or two, and it'll be interesting to go through that and see where they landed.
Yeah, that would be interesting.
There are some other reasons why you might not be confident. Maybe there are a bunch of unknowns that we will have to dig into before we'll know for sure, and there's no amount of hours that would satisfy that necessarily. But I think that that's something You should give a number Again, we're not doing hours, but doing the point system you should have your estimate units, of course, for each task, but then also include a confidence factor. And that might be a percentage or something that you're confident. I think that's an aspect that maybe will be helpful going forward.
To be clear, that's a hypothesis. Jamon has at this point, we haven't tested that. So take that as an idea.
That's exactly right, yeah.
Another thing I asked them was, it's very fascinating, the same kind of line of questioning on giving them a very simple thing to estimate. And then I asked them, "Does that include tests? Does that include QA? Does that include bug fixes? Does that include any production issues when it goes out to the real world?" All over the map, whether or not they included, very few people said it included all of that. So when you asked them, "How long will this take?" They didn't take that question as, "How much time will you spend to have this completely done and you never touch it again?" Very few people took it that way. They more took it as, "I could get it done and in the app and then later we would debug it or test it or make changes or whatever, but that's not included in my estimate." So that was a fascinating result, also.
Now, I don't have any recommendations for any of this, other than it's very interesting to see how people's minds work, and how different people's minds work differently when they're given a task to estimate how long something will take.
There's a couple of ways that we can mitigate that. Ken mentioned earlier, checklists. I think those are probably under-utilized. That's something that we should use more. So when you're looking at a screen, you'd have a checklist of things. And maybe some of them don't apply and you just mark them off. But some of them are definitely
Yeah, there's something else that we're trying, which I've never really heard of anyone else doing, I've never encountered it before. We're trying to keep a database of past features so that instead of sitting and de novo every time, sort of like thinking through step-by-step every feature, you say, "Does this feature feel more like this one or that one?" Right? And then you just take the number that we actually empirically determined previously.
So it gives you kind of an anchor point, and then you can determine if it's maybe more or less than that.
The jury's out on whether this could work as a system or not, but.
What does "de novo" mean, Ken?
From the beginning, from new.
So, you replaced "from new," which is two syllables, with a three syllable word, "de novo." Okay, just making sure I understand. (laughter)
It has further implications, but whatever, Todd. Feel free to make fun of my vocabulary as much as you like.
I would make fun of your vocabulary, but the word "vocabulary" isn't in my vocabulary, so
Obviously.
It's a vicious circle.
So I think it's good maybe for us to go back a couple years, maybe. When we merged, we had We try to be a little bit unconventional in our thinking. We try not to bring a lot of preconceived notions into what we're doing here, and think things through de novo, you know, start from the beginning, start from you like how I did that? start from first principles and kind of look at it in a way that "Okay, can we innovate on this? Can we look at it and come up with something new?"
And we did, actually. And I don't actually remember whose idea this was, maybe one of you does, but we had the idea, "We're gonna bill hourly," was what our initial thought was. "We're gonna bill hourly, and then let's have a base salary for all of our developers and designers, but then pay them per hour billed that they personally billed." And it was an interesting experiment. I think we ran it for probably a year, maybe it was two years? Something like that, with varying success. And we learned a ton of things that you wouldn't when you just start out as salary employees. I will point out that we are now on salary. But we should talk a little bit about that experiment and what we learned there.
Yeah, that was We had specific goals, and we had tons of good intentions for those goals. And like all good intentions, we fell on our face. But that would be a very interesting podcast in itself, the lessons What we did, what we went through, what we changed to, and the lessons we learned during the process.
I think to just kind of give it a really quick little thing, since we've teased it here, one of the things that we found is that people are generally not that motivated by money. Because they can certainly bill more hours and make more money, that was one of the benefits of the system, if you were very productive
A couple people did.
Yeah, some people did.
Some people took advantage of that.
Yeah, for sure, but it was not anywhere near even a quarter of those people. So that was good to know. Other people, they were just motivated by different things. They were motivated, it's not that they're not motivated, but it just wasn't purely by money.
Another thing was that there were some situations that ended up not really being very fair. So, some people would be in projects where bill hours were very easy to come by. And others where we really either had to supplement their bill hours or something along those lines. It also didn't really encourage collaboration between people, so there's some silos.
The benefit to the company, obviously, is that if we're having sort of a down month because, you know, it's cyclical, then your costs go down. And the benefit to the employee is if you're having a really busy month, then you're getting paid more. But ultimately, that whole system, we went away from, and went to the system that we're using today.
Yeah, I can, in my opinion, it was a complete failure. That being said, it was, I'm pretty sure, originally my idea. And like I said, great intentions, but I think that was one of our biggest failures, to be honest.
We learned a lot. I think that was the big thing. And those lessons will stick with us.
We learned a lot, and we changed, and, you know But I think it was more painful than it should've been.
I forget where I sort of read/heard this advice, but basically, when you're starting a new company, you're trying to do something innovative, you should limit what you try to do that's innovative. Focus your innovation where it really counts, and then don't try to innovate too much in the rest of your business practices. I think that that's part of what we learned there.
Even setting aside all these sort of incentive things, there's a bunch of things that just work better when people are on salary. Right? Their benefits work better, insurance works better
Vacation time.
-vacation time works better, there's a bunch of things where there's a whole ecosystem of support for how to run a business. And if you try to innovate in how you do that, you cut yourself out of all those things, and make yourself less competitive on the labor market. You make yourself You know, you spend more time on things you shouldn't be spending time on. And so, you know, I think we've become in some ways a more conventional company in certain aspects, so that we can stretch out into places that we still want to stretch out.
It's so interesting you said that, Ken, because I literally give people that advice when they're starting out producing an app or a website or whatever it is. For the things that don't matter to your particular customers, or don't matter to your particular business, stick with tried and true. That's well-known, you don't have to worry about that stuff. Put all your innovation and your avant-garde ideas into the things that really differentiate your company from other companies. So it's so funny that you said that in respect to our company, because although we didn't apply it ourselves, it's advice we give.
Well, I had heard that advice before we did all of this. And the truth is, when you're there, you don't always know which one is the most important, right? So that's gonna happen. But it's worth bearing that in mind, to always be asking yourself the question, like, "What really makes us different as a company?" And if it's not this thing that we're doing and spending a lot of time on, maybe rethink that.
I'll personally admit to hubris.
What?! Never.
"We can do anything, and we'll just apply our big brains to it, and we'll figure it out."
Big brains are not the commodity that's in short supply. It's time, right? It's time and attention.
I think I'll actually disagree a little bit, here. We've actually gotten the feedback that we all agree a little too much here. So I'll play the part of the devil's advocate here. I think it was well worth trying, and I think it was actually based on some things that we
I think in certain cases, actually, it could work, I think it could be actually be something that a particular company could actually make work. It's just that we didn't like some of the side effects of it. Sort of like, taking a certain experimental medication. Maybe it works, but the side effects are not worth it. And I think that that's actually where we ended up with that. I wouldn't, like Todd said, I wouldn't necessarily classify it all as a complete failure. I think there were parts of it that were a failure. And I'm happy with the system we have now, but I'm also very much happy that we tried that.
It was 90 percent a failure.
It got us to the point we are now.
Well, sure.
What's your confidence level on that, Todd?
I am 90 percent confident that it was a 90 percent failure.
Do you guys wanna touch on psychology and perception in the role of pricing?
Oh, man.
**THAT'S SOMETHING I WAS KIND OF THINKING ABOUT AS YOU WERE TALKING.
Yeah, actually, I do have some thoughts on that. So, one of the questions that comes up is, "When you are selling fixed-bid or hourly, what do clients think? Is it hard to do?" And I've found that neither fixed-bid nor hourly are particularly hard to sell. Both are well-understood.
Our current system takes a little more explanation, and so I think that's something we need to continue to work on, our messaging on. But most people understand them. Some people have a problem with it. They'll say, "You know what, we're not willing to do hourly. That puts too much risk on us." And that's totally cool. It's not something that maybe they're not a good fit for us.
Well, yeah, the thing is, whenever you're asking a vendor to assume risk for you You're paying for it somewhere, right? You know, if they want you to be the insurance, then you're paying them to provide insurance. Either that, or they're mismanaged and they're gonna go out of business and then you don't have support.
You know, when we switched to weekly, I was concerned that we'd have trouble selling it. It doesn't seem like it's been too big of a deal. For the most part, people still mostly care about the total number, correct? And how you get there?
Correct.
They're not as, they're not usually as concerned with We've had a few cases where We had something recently where the upstream source of funds was a grant that had rules about how it's charged, so there's things that come up around that. So sometimes we'll make exceptions. And we have at least one enterprise client that we still use hourly. But for the most part, this has been pretty popular. We feel like it has the best of both worlds in some respects, that it has more predictability than hourly, but it still has built-in flexibility that a fixed-bid doesn't.
Our team definitely thinks the weekly is a success. It wasn't that difficult to convert clients from hourly to weekly, and for new clients, they don't seem to mind whatsoever. It's interesting from our team's perspective. Sometimes they could be working more than they used to, because they have to fix these bugs or whatever, but because they don't have the stress or the guilt, a lot of times of the hourly, they still like it better. It's kind of counter-intuitive, in that way.
Yeah, I think there's three vectors, or three metrics that you would go off of, you know. "How satisfied is the client?" "How stress-free is it for the employees?" And then, "How much do we as owners like it as a business model?" And from those metrics, I feel like all three have been a success.
Yeah, it's definitely been a success. I think we could definitely do with hourly, but I think the weekly billing has been a huge success. I'm 90 percent sure that it was 90 percent a success. (laughter)
As far as the psychology from the client standpoint? We understand One of the things we do, we hire a people who have a lot of experience, either they ran their own small businesses, they ran teams, that kind of stuff. We have a lot of people who have real-world kind of business experience. We're definitely not business consultants, per se, but we do work with a lot of start-ups who need some basic, not basic, but need some of our business consulting.
And one of the things that we do is we understand the risk involved. And there's a lot of companies like us don't talk about this at all. For example, from a client's perspective, it's a big purchase. If you're spending 100,000, 200,000, 500,000 dollars? That's a large purchase. If you're a start-up, that's a risky thing. So we try to really think about their risk.
Now, we have our own risks, too. We could put five people on a project for a few weeks, incur a huge amount of money, and they could just never pay us, go out of business, whatever reason. So we have risk as well. So we're not here just to alleviate all their risk and put it on our shoulders, being the insurance risk, insurance Ken just mentioned. But we do try to figure out a way to have a nice balance between us helping them with their risk, and them helping us with our risk, and just being up-front. Like, "This is risky, you don't know us. You've had a recommendation, maybe you liked us during a sales call so you're choosing us, but you really don't know us."
And we're a huge believer in gaining trust over time. So at the beginning, or whatever that word is Ken had, I forgot now, already, at the beginning, the risks are much higher. So we do put a lot of thought into that. Some clients, to be honest, aren't a good fit for our system. We're very happy to help them find someone who would better fit the system than us. So we do lose some clients, for sure.
One way that some clients have asked us to share an undue amount of risk is when they ask us for hourly with a cap. That is sort of the worst of both worlds for us. If we finish early, we make less money, but we also take all of the risk of when it goes over. So we really do refuse, essentially, to do that.
Now, there have been some situations where we've put such a cap on ourselves because of particular circumstances, but we don't work for clients that demand that sort of thing.
Yeah, we have a general rule where we strive not to work for free. Which sounds funny, especially if you're in a different kind of business than ours, but it's actually super common for businesses like ours to work a lot for free, for nothing. And it's actually, in my opinion, a rampant problem in our industry. So we really strive not to do that.
I think that would probably come to a shock for a lot of people. If you're selling hamburgers, the concept, "Well, you know, 30 percent of the people walk through today, you're just gonna give them the hamburger for free." That would be shocking to them. But that's kind of like what people like us do, too much so, in my opinion.
Anything else on the psychology from the client standpoint that we could talk to, or talk about?
I mean, pricing is a huge topic.
Could you talk about pricing per week or per hour, the psychology? Because I know you've discussed this in the past, Ken, and I'd love for you to tell people.
Yeah, so one of the things we We've tried a bunch of different ways of pricing. So one of the things we did before, we would only bill for extreme, like the instant we step away from the keyboard, the timer goes off. When we first started, we tried to do this. So we would charge like a pretty high hourly rate. But then, the actual number of hours burnt would be low. Nobody liked that. Nobody understood that, it was much better to bill in the way that people kind of understood about that.
When we would bill hourly, like an hourly rate, we're much more likely to get really kind of angry responses sometimes. To people who didn't really have a sense for what software costs. Because what people will do is, they'll look at the hourly rate, and they'll compare it to how much they make. Right? They'll go, "Wait a minute, that's what a lawyer makes!" Or something. It's not actually what a lawyer makes. But we would get this very visceral reaction to that.
But by doing it weekly, where we've kind of smoothed all that out, then they can kind of approach it more like a product that they're buying. Kind of like, "Well, it comes in this many chunks, and okay, that makes sense." So that, I think, was always one of the benefits of fixed-bid for people. Fixed-bid in sales has always been nice, because you can just say, "Here it is, and that's your price." Although, it's 100,000 dollars, they were like, "Well, my budget's 150, so I could do that." Right?
And with doing this weekly, although it's not quite there, it is a little bit like The way we're doing it now is a little bit like fixed bid plus an extremely well-oiled change request process, basically.
Yeah, exactly.
And that seems to solve both of those problems. Where it's like, they can look at that and instead of being some unknown number of hours, weeks seem like they're easier to kind of grapple with. And that's exactly what we want, right? I don't think we end up charging more, particularly. But it does come in these chunks that are easier to grapple with. They know what size the check are gonna be that they're writing next week because it's gonna be a certain cadence. It's not the surprise every time. It just seems to work better. Go ahead, Todd.
People will pay extra money to remove the surprises happily.
Yes, absolutely.
I don't think our weekly is more money, but even if it were, they would be happier. It's so funny, what Ken said is they associate their salary with their hourly, or even if they take their salary and divide it by 40 and divide it by 52 or whatever, and they compare it to ours, and they think, "Wow, these people are getting paid a massive amount." Of course, they don't see all the other business stuff. There's actually no
They're not counting the overhead, they're not counting the things that they're not having to pay for.
I'm not complaining at all, but it's just a fact of our business: we actually have fairly low margins for a business type. Our team is extremely expensive compared to other businesses, extremely. Not saying we overpay them, I'm not claiming that, it's just the nature of their jobs.
Yeah, and another aspect of this, and I realize we're going a little long here, but another aspect of this that we could talk about is that with the point system, it's not 100 points for each person, it's if we have three people working on it, the whole team needs to deliver 300 points. So they work together to divide up the work in such a way that maybe someone's doing 150, the other person's doing 50 but they're doing a lot of client communication. And allow them to divvy up the work in a way that makes the most sense to them.
Where with the hourly bonus structure that we had before, that would actually hurt the person doing most of the communication with the client. And that was a problem.
That's huge. And that was a decision we made. And because we chose that, meaning that we don't track individual contributions. I mean, technically we could probably figure it out based on Trello cards and that kind of stuff. But we don't track individual It's team-oriented. So if it's three people, like Jamon said, it's 300 points. And we give them the flexibility to figure it out, how to be the best, most efficient to do those 300 points that they can. And I think that's worked out really well.
It has some downsides. It is harder to keep metrics on individuals that way.
Yeah, a lot of what we do for that is to simply ask their teammates how it was to work with them, try to encourage them to be honest about their contributions and things. It's not a perfect system, but we are able to track individual contributions a little bit better, just through the perceptions of their teammates.
I do it more efficiently, I get 'em all in one room and I say, "Out of all of you, who's the worst?" (laughter) And then I let 'em It's kind of like that inspirational movie, Hunger Games?
The inspirational movie?
Yeah, so, and it's quite efficient, and you get right to the meat of it, literally, sometimes, to the meat of it.
Literally.
And what they say is, "You are, Dad, you are!"
And I remind them once again, I'm not their father, that's Darth Vader. Fact.
There's a lot more we could talk about here on this topic, this is probably something we could revisit at a future
You may have noticed that we like to talk? Especially Todd. But, yeah
My words are all very small, so I need lots of them.
We get very passionate about very dry things, sometimes.
There's some things to be said, too, on the subject of billing It's a touchy subject, because although you can say that clients can be difficult in certain ways in regarding to this, it's all Assuming that the client isn't a jerk and they're just trying to squeeze a rock for as much blood as they can, and let's assume that's the case, and most times that is the case. From their perspective
Wait, you should be clear on what you're saying is the case. 'Cause otherwise, you mean Most of the time, they are not trying to be jerks. That's what you're saying.
Most of our clients
Okay, good.
Most of our clients are really great, and they're showing up, and they're partnering with us, and we're both working towards the goal of making something awesome. So if they are being difficult in a certain way that we may complain about in the background, they always usually have a reason why. It's usually a miscommunication, it's just something that they're misunderstanding on their end.
And like you said, presumably they're getting the software because they need it for some reason. Right? And it's a lot of money
It's scary!
Yeah, it is scary!
And the last thing they wanna hear is, I mean, if you're doing a bathroom, you don't want a contract to come over and say it's gonna be from 50 dollars to 50,000 dollars. Which may be a true statement, but you don't wanna hear that, that's horrible.
Well, one of the ways that we can mitigate that is if someone does have a fixed, like, hard-cap budget, which does happen and we understand when that is, then something else has to be flexible. And usually it's scope. We're not gonna compromise on quality. We wanna deliver really quality experience. But scope can be adjusted, and if a client is willing to work with us on scope, we can accommodate a tighter budget and still deliver a quality, but narrower scope, piece of software.
That brings up something very interesting, Jamon. It is a trade-off between low-price and low-risk. So, if we crank up the risk, we can give a quote at a very, the lowest price possible, because it may change. "We think we could possibly do it at this price." The easier thing to do is have a much larger price that reduces risk, but they're almost guaranteed to pay a lot more. Some companies hate the first one. They'd much rather have a much bigger price that's reliable and low-risk. Other companies, especially if they're really lean, they would prefer the first one. And the problem from our perspective is, we don't know who's who. And it's hard to get them to tell us, or they may not even know. So when you choose to go down one of those paths, do we give them as lean as possible estimate but we know it's much more likely to change? Or do we give them a much larger estimate that reduced the risk? When you're doing that, you're kind of choosing your customer at that point, too. It's all very complicated.
So I thought a good topic today, one of the reasons because I'm personally interested actually, hear what Jamon has to say and Ken has to say, and of course I'm sure they're interested to hear what I have to say. But the topic is when you start a new business or you're an entrepreneur doing multiple businesses, or anything of that particular area. What are some of the biggest fears, anxieties, apprehensions, that you might have you know before the process, during the process, whenever? I find this very fascinating, because I imagine a lot of people, well maybe some people who are listening are experiencing these right now and A) it'd be great to hear someone else express the same thing so they know that they're not alone in this, and B) it's kind of interesting to think about yourself. It kind of, it's not something you typically sit down and think about, so if you two don't mind, that'd be a really interesting subject for today.
Sounds good.
Yeah. Well I think back to when I started by business. It was 2005, and I was working for a home builder at the time, so I had a, you know, decent job. It was an office job. I was doing I think cad design and marketing for this builder. Not really doing programming. But I decided that one of the things that  well I had, prior to this time, I had thought, you know I'd be really nice to own my own business at some point. It'd be something that I would aspire to. And I think that part of that was my dad owning his own business and knowing a lot of entrepreneurs kind of played into that. I thought it would be an interesting thing. I've always been a little bit independent. Want to kind of set my own course.
So I started thinking about doing this and talking with my wife, and at the time I had a six month old baby. That was my first kid, my son, who is now 13 years old. Around actually this time of year is when I decided that I was going to do this. What helped was an opportunity that came up. So the apprehension of how do I get my first customer was sort of already taken care of. My uncle had a bunch of work that he needed done, and he asked me if I wanted to do it kind of on the side, or as a business, and that gave me the confidence to pull the trigger and say, let's so this. Because I had a built-in customer right away. But I do remember the first month sending my bill over to him, and it was only eleven hundred dollars, and that was all I had earned that whole month was eleven hundred dollars. And that was a wake up call to me that, hey I can't just expect the money to come in, and that was definitely  I sat up and noticed.
Yeah, that's really interesting. So when you started ClearSight, that was your first company, correct? At that time?
That's right. Yeah, ClearSight. There were other points along the way where I was sort of I got kind of gut-punched. Many times along the way. One was when  my first business was doing websites, but it was also doing CAD designs, so I had essentially two business, and the CAD design part of it, you know designing homes, designing remodels, those sort of things eventually dried up, because remember that was during 2008, 2009 the housing recession kind of came along and that impacted the designers first, because we were the first ones in the process. People stopped taking money, equity out of their homes to do remodels. They just stopped doing it. So basically the whole market dried up.
I remember my uncle told me, "I don't have any work to send you anymore." And I had a few accounts myself, but they were pretty slow too. And I kind of sat at home for a few days and felt sorry for myself. But in typical Jamon fashion, I was like, well I guess it's time to go do this myself, so I went out and literally started knocking on doors at offices and stuff and handing out my business card. Wasn't too successful at that, but it was at least doing something, and then things turned around eventually.
Since you had a new baby at home, and obviously you're married, and you're trying to support them.
Did that add any worry to you at that time?
Yeah, for sure. It certainly did, because any worry that my wife felt was reflected back on me because I feel very a sense of responsibility that I need to be making sure that we're not losing our house. Making sure that we can keep food on the table, things like that. So that was a lot to process. My health definitely suffered because of it and a few other things, but there was a lot of stress involved with that. I think that if I were to go back now, knowing what I know now, I could very much have probably pulled out of it much faster. I could have found a better path, but you live and learn.
I'm sure there's more to tell about that story, but I'm curious to hear your thoughts Ken.
For me the biggest worry was always money. Right? I mean, since I came out here to Silicon Valley, I had the dream. I had the Silicon Valley dream for sure. I wanted to start my own company. And to a certain degree, the Silicon Valley dream as sold is not sold accurately. Right? It's sold as this sort of fantasy. And the truth of the matter is you have to have more resources than is reputed in order to do the Silicon Valley way effectively. You need to know VCs or people who know them. It helps to have affluent parents who can bankroll you not making any money for years and years and years. I'm luckier than most on all of those accounts, and even I found that very intimidating, challenging. And especially living in the Bay Area, once you have established a life in the Bay Area, the idea of not taking a salary for a couple of years is utterly terrifying if you don't have a big pile of money.
In fact, I wasn't really able to do this until I had a little bit of a windfall from the Yammer acquisition to lean on. Basically just enough to let me barely scrape by for a year for which I'm still very grateful 'cause I probably wouldn't be here today if I hadn't had that. And there were some scary fricking moments. There've definitely been a few extremely close calls financially. So I don't  that fear I think was justified and surmountable. Let me put it that way. Right? You can definitely figure that one out, but I'm not gonna lie. It can be super scary sometimes.
For me, the biggest mental shift that got me where I am now is that I had always had in my head this sort of venture capital model, because that's what I knew. Right? Because that's the kind of company I'd worked for. I saw how that process basically worked. But it always felt wrong to me. Right? Like, I was always like, what's so wrong with profit? What's so wrong with actually making a business that can support itself fairly early on? And I think it was the Paul Graham post that was like, the difference between a start up and a small business. And a start up is specifically optimized for hundred S growth or nothing.
And that's what venture capitalists want for the most part. Right? No venture capitalist wants you to be one of the nine or ninety-nine that don't make it.
Mm-hmm (affirmative)-
Nevertheless, the model is set up that way. The model is set up so that only one in ten or less have to make it. And so once I realized, oh no all along I wanted to make the lifestyle business, basically, the small business.
I just wanted to point out that especially in Silicon Valley the term lifestyle business is a semi-derogatory term.
Pejorative, yeah.
Yeah to refer to a normal, actual business.
And I always found that amusing when they said lifestyle business it was insulting you, because you make a profit. I always thought that was funny.
Yeah, right. It's sort of like the Silicon Valley model is for people who would rather be a billionaire or nothing. Right? It's kinda like a shot at a billionaire is worth way more to them then a pretty good path to a millionaire. Once I realized that that was the exact opposite of me, I was much happier and I could actually work towards something that mattered. Right? And not even the millionaire part, right? It's like, if that happens, that would be awesome, but it's more creating the environment that I wished that I'd had.
When it comes to fears and those types of feelings, do you ever feel maybe that you are missing out on those wild rides?
Do I have FOMO for the-
Yeah, a little bit of FOMO.
Sometimes.
FOMO being, of course, fear of missing out.
Yeah, living here especially. I think that's inevitable.
Right. Because we're not set up for just rocket growth at Infinite Red.
I've been at enough companies that ended up making everybody thousandaires or worse. Right? Or negative thousandaires in at least one case. I had a friend, he seemed like he was living the dream. This was way back when in the first boom. Right? He seemed like he'd lived the dream. Right? He was just an engineer at a start up and he was suddenly a millionaire overnight. And then within six month, he was a negative six hundred thousandaire with a gigantic tax bill.
Oof.
The whole model has kind of lured a bunch of people into the stock option thing. This is what I'm talking about specifically. I think there is absolutely a place for the venture capital model, but the stock option compensation model that a lot of people have done, is kind of a raw deal in a lot of ways, but that'd be a whole other topic, so-
Yes
Just real quick, I own tons of stock and stock options that are worth absolutely zero-
But, if I ever run out of toilet paper, I am set.
So Todd, you started a business well before Ken or I, and you know I actually I don't know if I've ever heard the story of your very first business and how you went from being a software engineer at a company to owning your own business, and I'd like to hear about that from the perspective of the topic of this episode which is about fears, and uncertainty and things like that.
Yeah. Yeah. That's great question, so I've owned three businesses. This hopefully is my last one here at Infinite Red. My first one was in 1999. We started, it was three of us, it was also a consulting company like Infinite Red which lasted for nine years. It was a little bit different. Real quick, we did mainly enterprise, not start ups, larger companies, that kind of stuff. And our model was kind of to be subcontractors. So we had a lot of relationships with other consulting companies.
One of the things we did, is we did really hard things well. So all the other consulting companies, like especially at that time it's gonna sound funny, but you'd have companies coming to us saying, "Look, we're doing most of the project, but they want something on the web, and we have no idea how to do that." And we did. And we knew Visual C++ and we knew all sorts of things. And so we specialize. We were higher priced because of that, and we'd come in and do the fun parts, in our opinion, which was really great. This is circa 1999. That one wasn't  there wasn't too much anxiety from it. It was a small company, so later I'll talk about most of my anxiety at Infinite Red come from my worry of the 25 families I'm responsible for.
It's not so much myself, because I do not have affluent parents. Well, most of my relatives are dead now, but I never really worried about money. I mean worst case scenario, I can be a developer. I'm pretty darn good developer, and I can make good money at that. And I moved out of the Bay Area, so for me my lifestyle is much cheaper than it used to be. So I don't worry about that so much, but I do worry about everyone's families who work at Infinite Red.
My first company, we didn't have that. It was all just high level people. There was three to six of us, depending on the time. And we kind of just slipped into it. We had our first few big customers before we even started. So that wasn't really stressful at all.
The second company, which came after my first company, I went back and worked for companies, for other start ups as an employee, and that's how I met Ken. Ken was my boss. And I was doing that mainly just 'cause after nine years running your company, I was just kind of tired, and I wanted to be an employee for a while. And I did that for about three, three and half years. And Ken, sorry boss, it was super relaxing, easy. You work like seven and a half hours a day or whatever.
This has been noted on your permanent file.
You know, regular jobs often are pretty lax compared to start ups. As an aside, I was in a pizza parlor once, and I saw a sign behind the wall. It was obviously the pizza parlor was owned by a person, it wasn't a chain, and the sign said, the only thing more overrated then running your own business is pregnancy. Which is true, if you do it for low hours and high pay, you really should rethink that, but there are lots of great reasons to do it.
Any who, my second company was venture capital backed company which means we didn't use our own money. It was intentionally designed to do the hockey stick which means go from zero to very high very fast, and we had investors. And we had to pitch to venture capitalists and angel investors, and we had all the kind of normal Silicon Valley stuff. And that lasted for about a year and a half, and I cherish that experience, because it taught me a lot about that process from the inside. It was completely a failure which is fine. The fears in that, once again, were not personal, because as I did right after that, I went and got a job with Ken.
And I made plenty of personal money. And because we weren't investing our money, the VCs were, there really wasn't a lot of anxiety there. I would say the main anxiety there was performance. Meaning it's kind of depressing when you're failing, and sometimes you have a great success. We did one month, especially. And we were shooting to the moon for a whole month, and it was super exciting. So it was just kind of a roller coaster of anxiety for that kind of business. Yeah, Jamon?
I think it's really interesting to hear you and Ken talk about the idea of, well I can just go get a job as a developer. Because for the longest time, I didn't feel that I had that option. Whether that was reality or not, I don't know. I was basically, I kind of thought of myself as just building websites. I just built websites for people, and I didn't really think of myself as a software engineer. I just happen to be someone that happened to built websites.
Knowing you Jamon, and the quality of engineer you are, you are completely wrong. You could have totally got a job, but I get why-
-from your perspective you felt that way.
Yeah, well and it's a matter of  it highlights how important just knowing the scene is.
Right. Yeah, totally.
If you know the scene, yeah if you're an engineer, even like an old rusty engineer, like we're going to be before too long.
Too late, Ken.
Too soon and too late.
Even if you're an old rusty engineer, you can figure it out. Right?
Right, yeah.
The demand is so overwhelming and so consistent and so pervasive that-
-if you know sort of the ins and outs-
Even you Jamon could get a job is what you're saying.
Even I could get a job.
No, if you're half-way competent, and he's more than half-way competent, about 60 percent.
I appreciate it.
No, it's-
60 percent. Yeah. No, and to hear that now. It's something that is obviously more of an option now that I don't need it, but at the time it didn't feel like an option, and so especially when I started getting employees in 2009. And most of them were young. They didn't have much in the way of family, but they would obviously still have  they needed jobs, and I felt that. I felt that in every part of me that if the business wasn't doing well, that I was failing them. And that actually drove me for a long time. I think if I'd had the option to go work for someone, or felt I had the option to go work for someone, I may have actually quit at some point. But I didn't. I kept the course there.
I will say, that I'm glad that I did not know everything that I should be afraid of going into it. 'Cause there is plenty that you should be afraid of, and if I'd known all that stuff going in, I probably wouldn't have done it, and I'm glad that I did it. And if I had to redo it now, I would do it again.
And that's an important distinction is that it's not that I would do it again, it's that only hearing the bad stuff at that point, would have been a disaster.
Ignorance and hubris are the two best tools of the entrepreneur.
I feel like it's both more stressful and more scary than you think, but also you're more resourceful and more able to deal with it then you think.
Hundred percent. I would say, talking to other people who are new to it, and I certainly had to learn this, the biggest problem is the buck stops here. Meaning in every other situation where you worked, you could always throw a problem up the ladder.
And when you're a small business person, you don't know accounting? Doesn't matter. Do it.
Someone's gotta do the accounting.
Right, like there's literally no excuse. There's none, and you don't have that money just to pay for people to do it.
I guarantee the IRS does not grade on a curve.
No, they don't care about your excuses.
So Jamon, Ken, and I come from very different places. So Ken obviously went to Harvard. He's impressive on paper. I actually did not. I didn't finish college. I started making way too much money as a programmer to be honest. But when I first started out in 1996 as a professional programmer, you know I wasn't making tons of money, but it was plenty for me, because where I'm from, it's a lot of money. And at that time, I'd probably be more like Jamon meaning I didn't see myself as really deserving that kind of stuff, but this was in San Francisco in 1996. So I saw the first boom, and then I saw the crash, and then I saw the second boom. And after a while, you start to learn, although I don't have Ken's personal background. I do have Ken's professional background.
Mm-hmm (affirmative)- Yep.
And so, one of the things I've noticed when talking to Jamon, because he's in Vancouver, Washington, and not around that stuff as much, is he feels a little bit like an imposter. He's totally not. And I bet even now in his mind he imagines that those people working at Google somehow have this huge, amazing, genius to them, and Ken's probably in the middle. He probably thinks some of them do. I personally have yet to meet one of these fabled geniuses. So the more you get involved with that, the more you realize they're just humans, and you're just as good as they are.
That is true.
I think that's been something that I've become more and more aware of over the past several years. And it's funny because I don't usually think of myself as having imposter syndrome. I'm actually quite a confident guy, but in that regard I definitely did not really realize  it felt like they were a different breed. They were a different type of person. And I always felt like I could probably learn anything, but there was still this degree of separation. But, anyway, coming back to the topic at hand, I think that sort of uncertainty and fear can be a motivating factor. But one of the things, so one of the things I'd like to talk about, is there are healthy ways and unhealthy ways to handle that stress, and I've done them all. Believe me.
Like cocaine?
Maybe.
Jamon's mother, he's totally joking. He's never done cocaine.
Yes, thank you Todd. And my mom does listen to this, so thanks Todd.
He really has not, trust me.
You wouldn't want to see me on cocaine.
Oh god. Yeah, that is the wrong drug for you my friend.
Oof.
But you don't want to transfer stress to clients. You don't want to transfer stress to employees. You don't want to transfer it to your significant other. To your family. And unfortunately, I've done all of those things, because I'm human and that's what happens. You get a lot of stress, and then you feel like you need to let off steam. One of the things that I actually really appreciated about this partnership is that we're able to let off steam with each other. And in a way, that is healthy. That isn't transferring to someone else who has nothing to do with it or has no power. Where I have two partners who are actually in the same spot, and they can help. It's been really, really helpful. So that is really important. I think how you transfer stress. Yeah, Todd?
I agree. I don't kick the dog. I kick Ken. Which is better. The dog appreciates it at least.
You don't even have a dog, Todd.
I don't have a dog, and I've never kick a dog by the way. I'd kick humans all day long, but never a dog.
This is true.
Just to be clear.
Yes, Todd is the one who canceled a meeting because he had to bring a bird to the hospital that had hit his door, actually one time.
It's true. It is true, and that bird is flapping happily today.
As far as you know.
I hope. Back to my story, because it's all about me. Anxiety at Infinite Red really does come around to team members mostly, and you two Ken and Jamon because I don't want to let you down, and I certainly don't want someone's family not to be able to have a Christmas because of something stupid I did, or because I was acting emotionally when I should have been acting rationally. That kind of stuff.
This year, me not having Christmas had nothing to do with you Todd, so I can let you know that.
Jamon's house was burglarized and burnt down. Not burnt down, but set afire on Christmas Eve.
Torched.
So, if you're feeling good about humanity up to this point, now you can feel bad about it. So, there you go, but they're back in their house.
You're welcome.
Everything's good.
You're back in your house. Everything's good, and he has a wonderful family, and all is well.
Yeah, it's really nice to be back. Anyway, I cut you off.
But so that's a lot of my anxieties about it. At my age, I'm 46, and I've done this a long time. I don't stress as often. Like I used to get very stressed out doing sales calls or that kind of stuff. I've done all that stuff enough where it doesn't really bother me too much. Even tough things where you have to be really tough with the client, or vendor, or something like that. It doesn't, I mean it bothers me temporarily of course you get the adrenaline going and no one likes that. But it's really the things that give me anxiety and up at night is if I make a mistake that will cause us not to be able to pay payroll.
Now, one note. We've always paid payroll.
But that is something-
There's been some close calls.
That is something that-
That makes me work harder, and it makes me worry. Me, personally, I could figure it out, it's not as big of a deal to me.
Well, I think also a big stressor that I didn't  it makes sense in retrospect, but it wasn't one that like occurred to me, is how hard it is to maintain focus over time-
Mm-hmm (affirmative)
-when you don't have a boss doing that for you. I was a small scale boss at my previous jobs, but this experience definitely makes me want to write a nice little note of apology to every boss I've ever had. Like, however bad they were, I have more sort of sympathy for what they were dealing with then I did before.
That's so true.
Yeah, and the surprising thing is how hard it is to cope with success. When you're doing well, that's when the monster of de-focusing really starts to rear its head. It's like driving a car fast. If you've never driven a car at 150 miles an hour, it's a different thing from driving it at 60 miles an hour. It takes a little getting used to that state, oh things are going well, but that doesn't mean that I get to take my eyes off the road.
Mm-hmm (affirmative)-
So.
Can you guys go in a little deeper on how you manage some of these things? 'Cause you've talked about having the feelings of stress and fear, but maybe some of the ways that you manage it, a part from kicking Ken.
That's Todd's favorite.
Well, Ken mentioned that success can be hard to deal with, and I have a tried and true technique I've used for many years with dealing with the problems of success. And here it is. And I'll share it with you. I normally would charge for this advice, but I'm gonna share. Don't be successful. There you go.
You're welcome.
That one we're still figuring out. Having co-founders you actually trust is probably the number one.
Yeah, it's hard to do, and at one time in my career I said I would never ever had a partner or a co-founder again. And here we are, so.
I think getting together in person is important. Of course, we're a remote company. So I'm up here near Portland, and Ken's in the Bay Area, and Todd's in Vegas, but we did get together a couple weeks ago to talk. And there was a stressful situation going on, and that was something that we went through together in person.
Well, we also hang out in zoom a lot.
Every week. And that's similar. But, yeah having good co-founders who are your friends, and you become almost married at a point, because when you're in business together it is like a marriage, and you know everyone's finances. You know if someone's spouse is having problems with the way the company's working. You have to deal with that-
Mm-hmm (affirmative)-
-at least as an auxiliary person in that particular thing. So it's a very intimate thing for sure. I definitely choose that very, very, very wisely. I've had bad experiences, and of course I've had great experiences here.
I think that one of the things that we actually do fairly well is we will say when we're stressed. You know, we'll say, "Hey, I am currently feeling a high degree of stress." And then the other co-founders can say, "Okay, what is causing this." And we can talk about it more objectively. And just saying it out loud sometimes is a way to kind of like let go of it a little bit.
We also know how to fight which takes a while. That's a hard one to learn.
But we've learned how to fight. Yell at each other, and know that afterwards we're going to be okay, and that's important.
The trust that you would gain with a girlfriend or boyfriend or your spouse-
Sibling
-where you can have an emotional throw up as it were and know that you're still gonna be loved as it were.
Well, and also it's sort of on the focusing issue, actually. It's relevant there too which is that I'm pretty ADD I would say. I think that's probably pretty common I would say for entrepreneurs. Entrepreneurship is one place where you can actually challenge your ADD tendencies. However, I also know it's like, "Hey guys, I'm having some trouble focusing and motivating on x, y, and z-
-can I have help with knowing that there's not going to be any judgment coming along-
-with that help?"
Right. Yeah.
To be clear, it's all not roses. Sometimes one of us gets irritated with the other person because of these issues and-
-but ultimately once we get talking to it, we're not super human. Sometimes I get irritated with Jamon or Ken and vice versa. But the whole point is, when you get to the end of that, you're supportive.
Another really important thing is to have some really core principles. Some kind of tent poles so-to-speak that you can come back to. One of the things that we really strongly believe is that the core of us three is one of the most important things about this company. And so we can come back to that. I mean, if the most important thing that we had was some technology or some financial goal or something like that, then it would put a lot of stresses on our relationship, but since we've made that relationship such a high priority, it's extremely important. And another thing, along those lines, is we recognize that we are human, and that sometimes it's actually a personal situation that's contributing to work stress.
You might have situation where maybe a family member has health issues or you're having trouble with a relationship, or anything along those lines, and we  I was actually talking to an employee recently who talked about a personal situation that they were having and how it was contributing to their stress, and I had noticed the stress that they were going through at work, but I didn't know about the personal situation, and it's okay. I told them, "It's fine. It's a normal, human thing to have situations that arise. I understand. It's something that you can tell us, if there's something going on, you don't have to be specific. You don't have to tell us private information, but just tell us that something's going on, and we will do our best to be as understanding as possible."
And it's a matter of trust. That particular person trusted Jamon. That's fantastic. It's trust that we build up between founders. It's trust with the team, and to some extent, trust with your customers, and your vendors. Especially with customers and vendors, if you can do that, that's fantastic, but the others you can do with time. Just to give you an example, trust. I try to be trusting even when I shouldn't be. I picked up this guy the other day, in my car, he gets in the backseat. I just picked him up. I didn't know him, and first he gets in, understandably he's like, "Thanks for picking me up, but how do you know I'm not a serial killer?"
And I just looked at him. I'm like, "What's the chance two serial killers would be in the same car?" Pretty low. So, yeah trust is very important.
Any other tools or techniques that you all have for dealing with these anxieties or stresses or whatever?
Drinking. Drinking is important. Water. Water.
Lots of water.
What do you think I meant? Oh, come one.
Yes, stay hydrated.
Yes, stay hydrated. Yeah.
Actually, along those lines, I started working out a couple years ago, and that has been a really good help for my stress level. When I get through with a workout, I feel better about myself. I feel good. There's probably some endorphins or something that come with that. And it's really hard when you are really critically needed at work to take two hours to go workout, but it's also extremely important for your long-term health. And so you have to prioritize it very high. And you can basically justify it to yourself which I had to do with if I go and do this, I will be better equipped to handle the issues that come up, and it's so true. Working out has been a very good thing for my stress level.
A lot of people might be worried about their finances or their spouse's opinion and that kind of stuff. Which can be super challenging, so you have to deal with that. Another thing that I've noticed is, and this is pretty common, especially in our world, and I have to remember that 110 years ago, Ken'll tell me a real number, but somewhere around there. Most people worked at home, and most people had their own business. They didn't call it their own business, they were just a blacksmith, and people paid you to hoove their horses or not hoove.
Shoe.
Shoe.
Shoe.
Shoe their horses. Thank you. It's been a while since I've lived on the farm about 30 years, but anyway-
It's that a farrier or something?
Huh?
Ken, isn't it-
A farrier.
Yeah, it's a farrier.
That sounds right.
Whatever that means. Anyways, so you would just do that. You'd just offer your services and that was a home business quote unquote. But, you know, since we all grew up in the late 20th century or the 21st century, for our younger listeners, you know that has been not the normal but the minority. And so a lot of people I've talked with, they said, "Well, can I do that? Do I have the permission to do that or whatever?" And it is kind of hard to get to their skull like who are you asking permission from?
There isn't  there is the government who has rules, but despite what you might think about the government, the rules are actually fairly basic and the IRS of course wants you to pay the money, but that's actually not the difficult to be honest either. So it's just really an internal stumbling block. You don't have to ask anyone. You can go right now. Get a business license, and sell bottles of water at a popular park. Right now, and you technically have a small business.
Regarding the personal finances side of this, one of the things that my wife and I did early on that really helped was we did a monthly budget. So we used the tool called YNAB, youneedabudget.com, and we sat down every month together, and we entered all of our receipts and we had categories and we split everything up. We were kind of finance nerds during this time, and that was helpful, because it gave us a sense of control over our finances. We knew where we were. We knew whether we had enough money to pay the mortgage. We knew how much, we could specifically tell you what day we would run out of money if we couldn't bring anything in, and that was helpful.
Now, sometimes the math brings its own anxiety, but at least you know where it is, and it's not this unknown out there all the time. Actually, more lately, we've gotten away from that. After almost 15 years of marriage, and I kind of want to go back to it, because there are some stresses that come from not knowing.
Yeah, sometimes everything is just fine, but just don't know it, and you assume the worst because-
-people do. So I have a question for Ken. I grew up very poor, just some background, but later in my early 20s and stuff, my family actually started doing pretty well. My mom and my step-father ran a couple businesses. My brother started businesses and has done very well for himself. So, although, in my younger life, we were almost less than working class, to be honest. Later in life, we had a lot of experience with business. So me being in business was very natural to me, and my family understood, and they actually didn't understand when I was working for someone else. It was weird to them, but Ken, I know from discussions with you, the opposite was true. From your family, there wasn't anyone who were business people and that kind of stuff, and it was kind of outside your culture. I would love to hear if maybe that caused any particular issues for you?
Yeah, for sure. I grew up in what I would call kind of professional slash academic class household. Right? College degrees going very far back in my family. Doctors, lawyers, scientists, illustrators, artists, also but professionals of various kinds. Going back quite a while. There was a flavor of business being looked down upon a little bit, and that was definitely, even when I got to Harvard. There was that divide was still there even though Harvard certainly has both types. The professional type to kind of like, well I'm good at something. I'm really good at this, and I'm so good at it people want to pay me good money for it. And that's a perfectly good life. And I'm actually here to tell you right now, if you have those skills. If you are happy doing them, you're in a good position. Should you start a business? The answer is probably no. Right?
I did it because I couldn't stand not doing it. Right? It was just this terrifying but enticing thing for as long as I could remember to be  I just wanted to be on my own. I want to do this. Ah. Right. It was this dragon inside that I couldn't contain. In some degrees, it made me a bad employee. Sometimes. Right, because anybody who's not doing what they're sort of supposed to be doing is not happy. Right? Jamon, do you want to interject?
Oh, I just want to say in Ken's family if you say someone is a painter, that means that they are an artist, and they paint on canvas. In my family, if someone's a painter, that means they spray paint on houses.
In my family, if someone's a painter you're like, "Oh, he's got a job. That's wonderful."
Yeah, so the three of us we talk about this class stuff all the time because when you start talking with people who grew up in different backgrounds, you start to realize what your blind spots are. Like, I remember Todd saying, growing up people who went to the movies were rich or something like that. Todd, do you remember what some of your things were?
Oh, there's a long list of what rich people do that most people would find amusing.
For me, not only  I grew up in a fairly prosperous town. I would say. Right, but I wouldn't call it, there weren't a lot of rich, rich, rich people, but it was prosperous. And then going to Harvard, of course you get exposed to all sorts, and you start to realize how high the ladder goes. Right? And that gave me I think a sort of warped perspective on life. And Todd's perspective was warped in a different way. And by sort of, not like the three of us, by any stretch of the imagination, now encompass an enormous swath of life experience.
We're all white dudes for one thing. Right?
But nevertheless, it gives us sort of perspective on things that helps. It blunts some of the fear.
Mm-hmm (affirmative)-
To have that breadth of perspective.
I'd like to ask Ken, because your family culture wasn't business-oriented, and as you just mentioned, almost a little bit looked down upon business people, I guess for the crassness of it all.
It wasn't overt, but it was definitely outside of our purview.
And definitely your friends from Harvard who weren't in business school or that kind of thing  do you, like for me. It's easy for me. The bar was so low. I surpassed almost everyone I grew up with long ago.
Yeah. Similar.
I don't have to prove anything to anyone.
Well, so at this point I don't care very much. At this point, I'm doing my thing and that's that. However, I will point out there is something very interesting about Silicon Valley. Which is that Silicon Valley is a business culture that was grown by people kind of like me-
-from the professional and scientific culture.
That's true.
And as a result, that is where, I think, I'm not a sociologist. I haven't studied this or anything, but my theory is that that's where that sort of disdain for lifestyle businesses comes from. I think it's seen as sort of a grind. Where you're getting paid for the brilliance of your idea, you're just getting paid for hard work.
Yeah, I think that this idea of a lifestyle business, which I don't have any negative connotation whatsoever. In my world, a lifestyle business sounds like a luxury.
Luxury.
Luxury.
Okay, we're gonna have to link to that YouTube video.
But some Monty Python there. But I think that's actually something that was really, really helpful was when we merged was the idea that we can design this business to be lower stress. That doesn't mean we take our eye off the ball, which we kinda did for a little while there. That doesn't mean that we don't work hard, cause we do when the situation demands it, but we can design the type of business where the general day to day things are not drudgery. They are things that we enjoy doing. That we're good at, and that we can contribute to the success of the business. And I think that that's something that's actually overlooked a little bit when you're owning a business that you do have the ability to change things. You have the ability to enact change. It may be painful. It may be hard. It might be expensive, but you can look at something and say, "You know what, this isn't fitting for me, and I'm gonna change it."
Whether it's cutting off a client that's being too stressful. Whether it's hiring someone to do something that you're not good at. All of those things are things that you can do. My sister started a small WordPress website company. So she's building WordPress websites. And she asked me for a lot of advice along the way, because she knew I'd kind of-
Is this Meredith, Jamon?
Yeah. That's right that's Meredith. And one of the things I told her was that you want to stay with your kids. You want to be at home. You want to build this business that does not interrupt those things, so make those very core priorities. When you make decisions, they should be based on whether they enhance that or take away from that. It kind of gave her permission to look at things through that lens. That you don't have to necessarily measure it on dollars and cents or even things like customer satisfaction. That may be a goal and you don't want to let people down, but ultimately you don't want to let your family down. And that's something that I think is really important. So for her, you know her husband's an engineer, a mechanical engineer. He makes good money. It's not something where they have to have the business, but she wanted something that challenged her while she was also able to be at home, and I think it's done that.
And the people she worked with on her team are similar, correct?
Yeah, that's right. So she not only provided a business that works for her, but also for the people on her team. So she actually has people that do code. That do design. That do content. And in many cases they are people who stay at home with their kids. And that's kind of a cool concept that there could be a business that enables that.
I think that super important to mention the reason why, because people think that their business has to be like they see on TV or they read about it in a magazine or a book or whatever, and it doesn't. What principles you base your business on is up to you, and then your job is to figure out a way to make that happen. I think it's awesome that she wanted to help herself and her team who want a particular lifestyle and still be able to have this business, and she's doing it, and that's wonderful.
Yeah, and I think it's worth saying on the list of reasons to start a business, getting rich should probably not be your number one. If getting rich is your number one reason, well I mean that's fine, and depending on your personality, it at least has that as a possibility.
Sure.
Whereas most jobs done. At least not on any sort of short time frame. The number one reason to do it is 'cause you want more control over your life. And that's why we did it. So the first year that I took off, when we were still trying to build an ap and we hadn't done the consulting yet, my daughter was two, and to save money we took less daycare. I had to still have some, 'cause we both work, but did less daycare. So I spent time with her. I cooked for the family. I found all these ways to save money, and I was sort of part-time house husband while this was going on, and even if the rest of this fails, right? Even if we crash and burn, the chance to have that year and do that will be with me the rest of my life.
So, part of our mission here at Infinite Red, and something we've always agreed on is that we don't just want a successful business. We have to do that in order to make the rest of this work. And it's a perfectly good goal in itself, but that we also want to be an example of how work can work. Right? Not that there aren't others, but this is us. This is what we think work should be like. Not that it's never intense. Not that it's never hard. Not that it's some sort of walk in the park. It is not. But that it can co-exist with the rest of your life in a much more harmonious way than has been the model for 20th century corporate whatever.
Yeah, there are other ways to run a business, all of them are wrong.
Ken do you think that when we  that struggle occurs when we move away from those principles and values and what's important to us as business owners or whatever that label would be? So like, when you move away from maybe wanting to spend time with your family or building a company where it fuels the lives of your employees. You know, do you think that fear and intention is magnified if you move away from those things?
What do you mean by move away from those things?
So that they're no longer a priority. Maybe you're making decisions that go against those values.
That is definitely a source of stress. And the fact of the matter is, we are still a business. We still have to operate in the same environment that every other business does. And we have to compete against businesses that don't operate the way we do.
And to whatever extent our values create, like I said, put us at a disadvantage, and I think sometimes in the short term that is true. We sometimes have to make hard choices in order to survive and work another day. And I think there's probably kind of a core, not exactly explicitly articulated, there's some core that we won't push past, but when we have to hopefully temporarily do things that are different from our stated values. Yeah, that's rough. Absolutely rough.
The trick is to kind of figure out  this is why it's so important to figure out what your real values are. Right? And we've had to sort of narrow it down in certain places, because if you have this long list of things that you claim to care about, but that's not actually true. Right? Then, when it really comes down to it, there are some things that are more core than others. If you die on the hill of one of the non-core ones, and it causes you to fail, that is an unacceptable outcome. And so, figuring out which hills you're really willing to die on and which hills you're not willing to die on is super important and there's not really a shortcut. It's something that you figure out as you go along.
If you're getting chased by zombies through a forest and the zombies are starting to catch up to you, sometimes you have to give grandma a cookie and push her down the hill. That's all I'm saying. It sucks. It's against your principles, but grandma's lived a good life, and she loves those cookies. Fact.
I don't even know how to follow up on that one, but one of the things I was asked early on when I started my company was, what are your core principles and I kind of fumbled through an answer, and I don't even remember what it was at the time. But I actually think it was probably not reasonable for me to even know what those were at the time other than personal values, but over time, taking lumps here and there and bruises, and the stress and anxiety of various situations, it's made it very clear what is really important. At the time I was young, I was idealistic. I didn't really understand what could go wrong. What mattered. What didn't. But I think that all of those stresses and fears eventually taught me a lot of things and so in a lot of ways, even though they kind of sucked at the time, they were necessary to get me to who I am today. You know, I don't want to go back and relive them, but I wouldn't trade them away.
Yeah. Yeah. For sure. Well that was super interesting to me. I knew some of that. I learned some new stuff which is always fun, and I hope it has some value to the listeners for sure. You know, our experience. At least it's hopefully an interesting story if nothing more.
Absolutely.
Today's topic is education. I actually don't recall what this topic's about. Ken, do you recall?
Yeah. Well, it's this question that kind of comes up periodically about developers and CS degrees and that kind of thing. I think there was a Twitter thread a little while back in Jamon's feed, because Jamon's feed is the only feed that matters.
That's a fact. Yeah.
Yeah, do you remember who that was, Jamon?
Yeah. The question was, "I have 10 years experience developing sites, but I have no formal education. What are your thoughts on experience versus education? Been thinking of getting a front end development tech degree from Treehouse, but I'm not sure if it's worth the time and money." Yeah. That is a question that does come up fairy regularly.
For that specific question, I think the answer is no, it's probably not worth it, right? If you have 10 years of experience, and you're going to go take basically a practical degree, don't bother.
But there are definitely nice things about getting a real CS degree, but getting a job is not necessarily the best reason to do it.
If that make sense.
I would totally agree with that. Well, just to start out, the three of us, Jamon nor I have finished college, nor do we have any CS degrees. I learned to program on my own when I was a child, probably started when I was 12. And then I started programming professionally when I was about 24, and then I learned basically on the job.
Ken went to Harvard and got a CS degree there. Jamon, you are similar to me, right?
I was pretty similar to you, yeah.
Yeah. So what I usually tell people, A, now, when I'm hiring people and I'm not representative of everyone, so it's quite a bit different, I do a cursory glance of their resume, maybe. That's less relevant to me than what they can do.
In my opinion, developers is a portfolio job, which means the work you've done is hugely more important than any kind of education.
Now, obviously if you do have a CS degree, I do find people want CS degrees, they understand some concepts that you maybe don't use day-to-day, and when they do come up, they have a much better understanding of that. Sometimes it's easier to teach them new ideas, because they have the analogy in their mind already. So it's definitely worth it.
I would say, my short answer and I'd love to expand on this further in this podcast, but my short answer is you need to learn what you need to learn in order to produce work product, which means develop software, develop websites, develop apps. And everyone has a different way of learning. For some people, school is the best way. For me, school always bored the hell out of me to be honest, and it wasn't the best way for me, but there's no exact right way for everyone. It's just however it works best for you.
Yeah. And I think that part of this is how much access and opportunity you have, because certainly college is one fairly proven path toward gaining an opportunity to access the job market, to get enough skills that you're hireable out of the gate, and then to access the job market and actually get a little bit of exposure, whether it's through an internship or something like that.
So that plays into this as well, if your dad was a software engineer or something, and he has contacts that you can talk to and maybe get some opportunities, then maybe you don't need that, maybe you don't need to go down that road.
But there are few other factors here as well. Some of them are personal goals, like what type of programming, like Todd was saying, what type of programming you want to do, how much debt you're willing to take on, how much you can take on. And then also, in some cases, very specific cases, the prestige of the university can be a factor because it certainly opens doors for Ken that Todd and I don't have.
I do want to interject real quick before you jump in, Ken. Going to university has many, many benefits that have nothing to do with getting a job, and those are a super valuable if you have the opportunity. They're worth it. But specifically about a job is what I was talking about.
As a life experience, college is great. If you have the opportunity, you should probably do it. Getting a job as a programmer per se is not a good reason to go to college in my opinion.
Now, if what you want to do is get a job at Google, or one of the places that is well-known for preferring CS graduates, especially from elite schools, then you should do that, you absolutely should do that. You're going to have a much, much, much harder time doing that.
But also, more to the point, Google has I think fairly reasonable case for it in certain ways, because they are actually dealing with the high level intense CS concepts more than your typical programmer job.
Correct.
Now, I think where the problem comes in the market is that if Goggle does it, then we should do the same thing and then we'll be successful like Google. And the vast majority of companies out there do not need that.
And I can also definitely tell you, from my own experience, from the people that I've watched, is that getting a CS degree, they're teaching you the fundamentals of how computers work. In Harvard's case especially. They're very much on the theory stuff. But even a more typical CS degree is very much about the background, the hopefully unchanging fundamentals, and not so much how do you design a build system. Todd?
Yeah. I want to rant a little about a CS degree. CS, I'm sure all of you know is computer science. It is really that, it's computer science. Scientists don't make things. They discover things, and they ponder about things.
For example, a physicist and a chemist may work together to make some sort of new alloy, but they're not going to design an airplane. That's what engineers do. If you get a computer science degree, you learn the science of computers. You could actually get a computer science degree, and correct me if I'm wrong Ken, and not learn to program at all.
That would be pretty rare. You do have to know some programming in order to do a lot of the things that they teach you-
But you could do like abstract programming that doesn't actually work. Like, say you're developing an algorithm. It's not-
Yeah. I would say that would be pretty atypical, but there's definitely classes that don't require a lot of coding.
I'm exaggerating to make a point.
Some of it is straight up math. Yeah.
Right, which is different than engineering.
Well, and a good engineer should understand the science obviously. Yeah.
And I think one of the things to know is that, in my career certainly, and I'd like to hear from both you, Todd and Ken, I haven't noticed a huge market difference between the software engineers that I work with that have degrees, versus those that do not. I often don't know which of them have degrees and which do not. It's not always a strong correlation between their  or it hasn't been a strong correlation in my career with performance.
I think there's some characteristics that are positives for people that come from a CS degree background versus others who maybe come from a bootcamp background, or Todd and myself maybe learned out of a book basically and experience, but in my experience it's not something that is  there may be differences, but they're not significant.
I think it depends on the situation. When you teach people you notice it more. For experienced people, people who have a decade under their belt, no, there's no different. For new people, someone who comes out of school with a CS degree will understand concepts, and I think it's easier to teach them to be honest, in that way.
Real quick, I personally started  well, I started programming privately, but that was just me programming games and that kind of stuff, stuff I enjoyed personally. But professionally, I started building software. So I started out as a builder, a maker, over the years formed myself into an engineer, and then during that, got interested in the CS stuff and learned that stuff too. So I got to the same result, just in a different path.
That's totally true. You can absolutely learn all this stuff on your own later if you're that kind of person. I think what the reliance on CS degrees doesn't really take into account, is that 90% of programming out there is essentially business automation, for a loose definition of business, but it's basically business automation.
I mean, yes, okay, there's sort of a sector on high performance computing, or scientific simulations. Honestly, the one that in some ways benefits the most from formal education, believe it or not, is games, because there you need the linear algebra and the harder math, and your performance constraint in ways that mean you're more likely to be coming up with novel algorithms than you are in your typical business program. Jamon?
It's surprising how rare it is to encounter those types of situations in typical applications, like mobile applications and web. You just don't really run into it.
Right. So, the kind of people who are going to excel at your, like I said, very typical business automation, style programming, user interface design, et cetera, et cetera, are actually going to be people who sometimes were not computer people before, because they're going to have more connection and empathy with the target users. And that ends up making more of a difference to the success of software projects in many cases than your facility with the computer itself.
Yeah. Let me give you a real example from myself, because I started out very practical, and then later got interested in the CS concepts and stuff. Just purely for my own interest and stuff, and that did help to a point in my engineering career, but I did a project circa 2001 or something like that, and we would display, as a website, and we would display a map for the user, and they click somewhere else on the map and we had to calculate, based on the pixel difference between where we knew they were and where they clicked, the difference in direction and distance from the original spot.
Now, this required spherical geometry, and the earth actually is not a sphere. It's a little bit like a football actually, to a slight extent. In this case, someone who had a more CS background may have jumped into this easier. I actually had books on my shelf, like college algebra, and college geometry and stuff like that, and I would review these things.
And I learned how to do it. It was a successful project and it was very fun, but that's an example because I came from a practical place I had to look that up. Now, on the flip side, I've worked with people with PhDs in computer science, and no offense, bless their hearts, but they would work for two weeks and accomplish literally nothing. And then you'd ask them, "Was that done?" They were like, "I didn't know it was urgent." Well, it was an hour task. That's two weeks ago.
And I think they're on a different academic time, because they spent so many years in school, it's just a difference.
Which is, again, not to denigrate the usefulness of them. They're just useful in very specific circumstances and not as general programmers. Jamon?
I kind of see it as, to use an analogy, like when you're lifting weights, if you lift weights in a way that is very functional, they call it functional, where it's almost like you're lifting a box or  yes, Todd?
Jamon, for our listeners who may not be familiar with this concept, can you explain what lifting weights is?
It is this theoretical thing that supposedly some people do.
Can you do it inside of your own home?
I do now. I built a gym actually. But yes, you lift weights for health. And one of the ideas is that you do this sort of functional strength, where it's something that actually builds up the muscles for lifting boxes, and carrying children, and moving things. So it's very much like you're doing those types of movements, but just with heavier weights. It just makes you stronger in those ways.
And then there's other things where you're isolating specific muscles in a way that you would never really do in a day-to-day basis. And university can sometimes be more like that, where you are exercising those muscles, you are making them stronger, but you're not doing it in a way that necessarily replicates what you do in real life. And I think both are necessary.
If you just do functional strength training, it will get you so far, but you won't ever hit certain muscles because, like we talked about intense performance or whatever, you might not actually be using those aspects of your brain in a day-to-day basis. But they are good to have for when you need them. So I think that's a decent analogy of what we're talking about here.
I think that one of the criticisms that I've had of some of the higher education programs, is that they don't do particularly great job of replicating the real world of what people will actually be doing once they actually get into the job market. You can create a binary tree algorithm, but can you move this button over four pixels to the right? Which is often your first task when you get to work.
Yeah. And I would say that it really depends on the person. In an idea world, if money is no constraint, time is no constraint, yeah, of course I would love to go to university and stuff. But on the flip side, I'm a very practical person and I like to build things, I like to make things. So maybe I went for a few years, but maybe if I would have went that route I wouldn't liked it as much. I would have preferred to just jump in and start getting things done.
I think for me ideally was 18, I started doing it, actually doing it for three or four years, and then go to university for maybe two years, and enjoy learning all the concepts I didn't learn. That would have probably been pretty cool for me.
I realized we're kind of leaning more heavily on the criticism side of this, but one of the criticisms of universities is that they optimize for rewards, like extrinsic rewards. Like, I got this degree, I got this piece of paper, or I did what was necessary to get an A. Where learning to accomplish something to actually expand your mind is a little bit of a different thing.
When I started my business I needed to build a website, I had a website to build, and I didn't know how to do it. For me, when I was learning from a book, it was very, very applicable. Like, okay, in order to make a menu, I need to know how to do these things, and it was very, very applicable. Very, very directly applicable.
Well, I'm going to make the positive case 
Please.
 for going in and doing it. One is, fair or not, it does open doors.
Correct.
Especially if you're in a good program, but even if you're not, it is used as a hiring filter in a lot of places. I think it's wrong but it's true. That's the very practical sort of level. But to be honest, there's definitely things that I learned there that can save you trouble.
I mean, I think they said that what makes a 10x programmer is that they know what not to program. So for example, even the theory class. The theory, computability theory, computational complexity, these sorts of things are more valuable than you might think in certain ways.
For example, you're at your start-up. Your boss says, "I want the optimal route to plan on this map. I want to be 100% guaranteed the best route." And you can say, "That's the traveling salesman problem, and it's actually a known hard problem," for example. And it's the kind of thing where it can steer you away from harder problems and towards easier problems. And in engineering frequently what you want to do, you're like, "Let's find a good heuristic instead of trying to solve this optimally."
It may not give you the answer, but it will give you a framework around the problems that are out there, and the classes of problems that are out there.
Yeah. And I really appreciate that from people who have a higher education than myself.
While people were talking, I was thinking of this story. I interviewed for this job, and this guy was asking me technical questions, as they do, and he was a young guy at the time. I was probably 34, he was probably 10 years younger than that or more. And he asked me a question. I don't remember what it was the exact question, but basically he wanted me to accomplish a task, and what he was looking for is how I would technically approach this problem.
But I've been an engineer for a long time, and I know what's really important, and I know it makes a 10 times engineer, which is often not actually programing that. So I started off by challenging the fact that he even needed this at all. And logically, he didn't, and he couldn't really explain why he would, so I gave him additional other options that would make this application or this software work much better.
Not the answer that he was looking for. But it was the real answer. I used to say a saying all the time. I don't say it much anymore, which is, "There is no code as fast as no code." So in this case, I was just removing his entire problem from him.
I would say it can help you avoid reinventing certain wheels, which might mean that you don't get some amazing solution, because you weren't ignorant enough to know that it couldn't be done. Everyone loves those stories, but 99% of the time that's not how the story goes.
And in fact, to the point, I don't know if we're ready to segue into the business conversation we probably we will in a minute, but none of us have any business education. And I'm starting to wonder if it would be worth it to go get like an EMBA or something, so that we're not reinventing so many wheels.
I don't know if we're ready for that conversation yet. Jamon, you wanted to say one more thing?
I have a bunch of other things to say, but I'll intersperse them here. I think that one of the things  well, Todd actually alluded to this earlier, but the network that you get from going to university for four years with often some of the same people throughout, you get to know them, you do projects together, they have opportunities. A lot of them go on to be quite successful. And being connected to those people in that way is something that lasts for a lifetime. And that's definitely something that should not be undervalued. That's a big advantage, that's something that I did not have.
In fact, the only way for me to access a network like that was through  well, I shouldn't say the only way, but the way that I accessed a network like that was through open source later.
It's true. There's a lot of overeducated crappy engineers doing very well out there. It's true.
It is true.
I mean, it is really true.
I was just going to add too, it's fascinating when we have this conversation today. It seems like it's been increasingly becoming more popular to question whether to go to school, or rely upon the tool. So what is it about today that allows us to even question the path forward, that maybe we weren't able to in the past?
We're going to queue that clip from Silicon Valley now.
Yeah. I think it has nothing to do with our particular industry, or development, or any of that stuff. I think it's just because the cost of university education is so extreme right now, that you naturally have to question if it's worth such a huge burden.
It wasn't that way for me in the early '90s. I could work and pay for my own college at that time, which I did. That's not possible these days.
I'm going to agree and disagree with Todd there. I think the cost is definitely a factor, but I also think that this industry is a big factor in that we don't have  my brother-in-law is a mechanical engineer. He couldn't just go and start mechanical engineering. He can't go out there and just do that.
He could. It's just governed by law.
Yeah. You have to be a licensed engineer. It's a very-
But there's no reason he couldn't do that if it wasn't for laws.
There may be a path to becoming a mechanical engineer that doesn't involve university, but it's very hard. I at least know of an architect that did it without going to university and getting a degree.
But that is something  we have a lot of these professional, professions actually have degrees that sort of  they're barriers to entry. And in order to get through that, the accepted path is to go through universities. Ours does not have that. We can start building websites, or building whatever, just by convincing someone to pay us to do that.
I think there's two points actually. One is part of the disconnect between mechanical engineers and software engineers is that when mechanical engineers fail, people die.
That's true.
In many cases. That's sometimes true for software engineers too, but it's more true with mechanical engineers. And as a result-
My brother-in-law works at a plant where if he screws up, there will be hydrogen peroxide blowing miles high in the air.
Yeah. So the stakes are often higher.
But also, if you want to be a serious chemical engineer, there's a lot of capital requirements for any of the things that you're doing, apart from the safety concerns, and that's very real. You're not just going to work on your own because you can't get them, whereas the capital requirements for being a software engineer are extraordinarily low. The access to education materials is extraordinarily high. And you can just try in almost literally anything that you can find out there for education material, you can try with a $500 computer.
So there's so many things about the technology world that are in many ways unprecedented, and that's why you're seeing this massive sea change in the economy as it starts to take over more and more of it.
And one of our missions here is to help more people in more places be part of that. So getting the message out that although CS degrees are helpful if you have the opportunity, go ahead and do it if it interests you, but it's not necessary if you just want to be part of this.
Yeah. And one of the things that is very apparent, is that there's a lot more resources available now online for learning. You don't have to go to college to get the education because it's often on YouTube, or you can look through GitHub. There's all these resources, there's online courses. These are things that are very valuable, and they're self-driven.
When I first started wanting to learn Objective-C and building iOS apps, I bought an iPad 2 and I went to iTunes U and started watching the Stanford courses on there, and following along with those. So I was able to basically watch Stanford lectures for free, and follow along, and do what they were doing.
That was tremendously valuable to me. And all of those resources are very interesting. What's very interesting also is that very few people actually take advantage of this. Everybody with an internet connection essentially has access to these, to the same thing I did.
Which is pretty much everyone in the United States at least.
Right. And yet, it's a very tiny fracture of a percent that actually take advantage of that.
Well, I would like to, for those of you who have this question and don't have a lot of opportunity for various reasons to go to university, I would give you my kind of recommendation. I forget who said this, I'm not going to attribute it to anyone because I don't remember who it was, but if you want to be a writer, write. If you want to be a poet, write poetry. When you've written a million words, you're a writer. When you've written 100,000 words, you're a writer. You have to write.
You'd be amazed how many people want to do something and actually don't do it. In our industry, it's very possible to be a very successful software engineer by just doing it. But even, we mentioned mechanical engineering which does have some legal constraints for sure.
But I don't know if anyone's ever seen the movie October Sky. It was in the late '90s. It was about a NASA engineer called Homer Hicksam (Homer Hickam) I think. He was a son of a coal miner and he loved rocket engineering. And he just did it, and he did it, and he did it, and he did it, and eventually without ever having an education, he did it for NASA, and he was a very famous and successful engineer at NASA.
So, I don't recommend that route for such things, but it is possible. And I don't care who you are, or what profession you're in, if you just spend a crap load of time doing it, you're going to rise above everyone else.
Another great story I have, I read this book. It was about this guy who was really into etymology. Entomology, not etymology which is the study of the origins of words. Entomology, which is the study of insects. He came from a very poor family, and he was in Alabama, and he got into the University of Alabama for biology. I believe he got a scholarship because he couldn't afford it, but the day one he showed up, he went to the head of the biology, the college or probably  I don't know what it was, but wherever the college of biology is. Ken will correct me. This shows my education here.
Anyways, he went up to the head and he said, "For the last two years I've been cataloging the ants of Alabama." And no one had ever done this. So on day one he was put in charge of something very important at the university because of this, simply because he just did it. He didn't ask permission. He just did it.
So if you want to become a developer, regardless if you have the opportunity to go to school or not, you just have to start developing. Get into open source, publish stuff, start creating your portfolio and just do it. I'm not going to recommend this at all, but if you dropped out of high school at 16 and started programming and put a lot of work into it, by the time you're 18, 19, you're going to have a high paying job. That's a fact.
Don't do that, kids, but-
Yeah. If Cedric's listening to this, stay in school.
But you totally could do this, but it does require a lot of  a lot of times people go to the university and those kind of paths because they don't have the kind of internal-
And by the way, if you're that person, you probably already know.
I don't necessarily think so, because-
I mean, if it's flowing out of you so much that you just can't stop doing it basically, that's usually the kind of person who makes it that way.
I agree, but I think-
Well, that was me at that age for sure.
I think a lot of those people don't know that it's possible, because they don't have an example of it being possible.
That's exactly right, and that was actually me at that age. At 16 I was coding every day. Every day I would go home and that's what I would do. I mean, I'd do homework on the bus. I didn't do it at home. I coded at home. But I had no role models that were programmers. Well, I had one but he worked in San Francisco and he had been to college, and I thought that was the path.
So I didn't really have that sense. And I was doing some pretty complex games and stuff, and figuring things out on my own because I didn't have internet at that time.
Yeah. Well, back in my day I had a book budget, because the only way to learn was from books. There was nothing online, because there wasn't online. I had a book budget where hopefully I could buy a book every couple of months, add to my collection.
But anyways, if you get nothing else and you're aspiring to be a developer, I give you permission just to do it.
Another option is code bootcamps. We actually have at least one, maybe a few others that have been to bootcamps here at Infinite Red, and we found them to be quite valuable for getting people up to speed on frameworks, on languages, on sort of the technical skills, and just getting the familiarization and understanding that they can learn these things. Often it doesn't teach them everything, but it gets them the confidence that they need to move forward with it.
I think bootcamps are definitely an option, and there's many good ones. We've worked with Epicodus here in Portland, and there's others as well.
They're especially helpful I think for people who have some kind of technical or quantitative background but just need to learn to code.
Per se. Yeah.
Yeah. It's a good way if you're switching to a second career, or something like that.
Another one that I'm actually a really big fan of is Austen Allred's Lambda University. Now, this one's got a really unique model. It's a little more intense than a bootcamp I think. It's a fairly solid higher education option. They have a lot of success stories coming from it. But one of the really unique things that Austen's doing there is they do not charge tuition upfront. Essentially they will take a percentage of your income if you make above, I think it's $60,000 or something a year.
Once you get a job that's above $60,000 a year, they'll take 17% of it for up to two years, and there's a cap. Like, $30,000 or something.
That's amazing. I love that.
Yeah. And if you never get a job in that range, then you never pay it back. The debt is forgiven.
That's a really cool idea. I love that.
Yeah. Yeah. It really is great. And apparently the financial model's been working for his university. It's an online one so it's very accessible and they're actually finding that they have a much more diverse student body because of the fact that someone who doesn't have a lot of means, doesn't have a lot of support, they can go to school online, they don't have to pay anything upfront.
They're even good about trying to support them financially during the time that they're in the university. It's a really great model. I'm a big fan. Lambda School or Lambda University I think it's called.
We'll put that in the show notes.
Yeah. And Austen's doing a good job with that. He also, if you follow him on Twitter, he's got some really great thoughts on education. I like what he tweets about.
Yeah. I guess in summary there's many ways to get there. If you are a maker, like I always was  even when I was a kid I constantly made things, I think my path might be an interesting idea. If you have the means to go to university, by all means do it for sure. If it's going to be a huge financial burden, I would definitely give it some serious thought before incurring that burden.
I'm curious how you approach education "Once you make it." What does it look like on a daily basis to learn new things, be challenged by new things, or even challenge the people that you work with as well?
All you need to do is listen to this podcast religiously.
It sounds ridiculous but it's absolutely true. Continuing education. That's a good one. Truthfully, for a software engineer, if you can't teach yourself every day, you're going to have trouble because whatever you knew last year  I've been doing this for 22 years and I think that number changes every time I say it. I started in '96 so whatever that comes up to.
We're software engineers. We're not very good at math.
Yes. That's a fact. But you have to learn new stuff. The stuff you worked on two years ago is not what you're working on today. It's constantly learning new stuff. Now, you learn certain patterns and certain ideas that you use over and over again, and you start as you get a lot of experience you start realizing how we're kind of just redoing the same thing over and over for the last 40 years.
Yeah. Ken, didn't you do an exercise where you learned a whole bunch of languages, and you wrote the same program several times?
Yeah. It was fun. I had fun with it, and then it literally burnt me out of programming for a long time.
How many did you do?
I got through  I don't know. 20 or 30.
Wow. Yeah, so that's what Todd's talking about, is this sort of recurring theme that you see over and over.
Yeah. And after a while it was just like, it was the same approach over, and over, and over, and over.
It became a lot easier to learn your 20th and 21st and 22nd. Yeah.
Yeah. I always recommend people learn three or four languages, just for their own edification. A lisp, a low level of imperative language, C, C++, even Java, a dynamic language like Ruby or Python.
And then something like Haskell or Elm or something.
Or actually something like Prolog or Erlang is actually probably more interesting than  Haskell's great, but more interesting than that because it really makes you think about it in a different way. If you learn those, you can learn anything at that point.
I think one of the things that really helps me is I have this insatiable curiosity about concepts and computer science. I love reading about it, I'm on Twitter a lot and that's a good place to source new information. You can watch videos.
Other people learn in different ways. I know one of our engineers will troll through GitHub. He'll actually jump into a package.json file which we-
I don't know if, "Troll" is the right word, but yeah.
Well, trolling as in fishing. And he'll look at the dependencies of a particular well known thing, and look at what they use, and then go look at those and see how people code.
It's a very cool way to learn. Other people, they'll learn by pairing with other programmers, they'll learn obviously by experience. Some people read books. We have one of our-
Watch videos.
Yes, watching videos. One of our developers decided to learn  this is Darin Wilson. He decided to learn Ecto, which is the database layer for Elixir. He decided to learn that by writing a book about it. And apparently that's been quite educational for him. He's learned a ton in teaching.
Yeah. Don't do that, kids. It's a lot of work. That's kind of a lot about software engineering and that kind of stuff, but we're also, on the other side  and we probably lost all the entrepreneurs by now, so I guess we should do this first. But on the other side is education when it comes to being an entrepreneur, running your own small business, running a larger business, that kind of stuff.
I learned first I would say by watching my dad. He was a small business owner, so I learned some basics there. I did know quite a few small business owners, and I did talk to them. I would go out to coffee with them or whatever, and just ask them questions. But it was very much a learn as I go type of a situation, learn as I had to.
How do you do payroll? I had no idea. I hired a bookkeeper who taught me how to do payroll and did most of it, which was nice. How do you market? I had no idea. That was a whole thing that I had to learn. How do you do sales? I mean, I just plopped myself in front of people and tried to do the best I could, and tried to learn from it. That's probably not the way I would recommend going though.
We did engineer our sales process by the way.
Once we merged companies, then Todd and I started doing sales together, and we had a much more engineery approach to it. It was good. Actually have a feedback loop, and we would try to build our experience over time.
I have read some business books, I've watched some business videos, but for whatever reason software engineering, education has always been more  I guess got more traction with education on that side. With business stuff that always seems so abstract and not directly applicable.
I'm definitely at a point where I'm feeling like I could use some formal education honestly. The MBA is not what it used to be in terms of guaranteed high paying work. Even elite MBAs are not what they used to be in that regard. But I wouldn't downplay the value of the network building that they bring. But what they can't teach you, what no school could teach you, is what it's like to stare at your bank account and wonder if you're going to make payroll this month and how you handle that.
I mean, it might mean that you know a good banker who can help you, but it doesn't teach you what that feels like. It can teach you about negotiation, but it doesn't teach you how to actually sit at a table with somebody who's got a lot more money and power than you.
There's a reason that even regular business schools prefer that you go out and work some place for a little while before you go there. And I think that the EMBA route, if you're going for formal education, is probably a pretty good one, because then you have really embedded yourself. You have a very felt experience of what these things are like, so when you go to that negotiation class, or that finance class, or whatever, you get it. It's going to land someplace for you emotionally, that it wouldn't for a kid out of school.
What's an EMBA?
Executive MBA, meaning a lot of the business schools will offer these programs frequently, nights or weekends, even at a high level, so it's right where you as a person who already runs a business can go and fill in your skillset.
Interesting.
And hobnob with other people like you. Yeah. And they're not cheap.
Yeah, that makes sense especially if they're geared towards executives.
My path was way too long. So, if you want to do it fast don't take my path, but this is my third company and I feel like I finally became a business person on my third company. That's a long time, and that wasn't three companies in three years. That was three companies in 15 years.
I definitely wouldn't go my route. I think one of the things  I mean, there's different aspects of business, right? Ken alluded to some of them. Financing, super important. If you're not making money, if you're not negotiating good deals with your vendors, or employees or whatever, if you're not keeping it cashflow where you can pay payroll, you're sunk, so that's very important.
The other thing is, your management and leadership skills. As you grow, you're going to have a team, so that's very important. That's not something you super easily learned from a book. I think even things like accounting theory  Ken, I don't know if you want me to share this story. Well, I'll just say it and we can cut it if you don't want it.
This is kind of a funny story. When Ken and I first started this business, this was my third, but this was Ken's first business. And we were going over our accounting and he was telling me all about accounting theory, and he knew it very well, but I don't remember what it was, but it was something like I said, "We should get our P&L," and you had no idea what that was. It's a profit and loss report.
I don't think that that was what it was. I don't think that's what it was. I don't remember what it was, because I knew what a P&L is.
Maybe it was AR, account receivable? It was something very basic.
Well, we had a long running argument about cash verus accrual accounting as I recall.
Right. So regardless of what it was, and I don't mean to insult Ken whatsoever, but that's actually not uncommon. My wife's an accountant and she was trained at university for that and then she worked as a corporate accountant for a long time and worked her way up to a fairly high level.
The day-to-day, just like in programming, you learn the concepts but once you hit the real world, the real world's so much different than anything. And I think that's true with a lot of 
I'll go into that. I was like, "I think we should do accrual accounting," and Todd's like, "I don't think so." I'm like, "Well, no. I really want to be able to " the benefit of accrual accounting is that you can see profit versus cashflow and it sort of gives you more information, but it's way more work, way more work. And if you haven't done it, you don't know that, so we are still a cash accounting.
Is it more work, Ken?
What, accrual?
Much.
Is it way more work?
Much, much, much more work. Yeah. And that's something I don't really like very much.
One of the things I did well when I started my business was I forced myself to do a monthly budget. And I was doing this for my personal life too, so I just used the same skills I had there to do a budget for the business, which was much easier because I wasn't buying diapers there generally. There wasn't quite as many transactions-
There's a joke in there somewhere.
Yes. There weren't as many transactions and stuff. But it was actually really great because I was able to keep a very close eye on where we were in a cash basis obviously, and then I did have accounts receivable system that I could look at to see what kind of money would be coming and do some forecasting and stuff.
We've carried that forward to some extent here at Infinite Red doing the budgeting. We got away from it for a little while, but we're going to be going back and do it because it has been very helpful, even though you in some way feel like you're doing kind of double entry.
Yeah. I think, gosh, business education and experience, you really have to have both. You have to study in some form, and you have to have experience. It's really challenging to be honest, compared to something more straightforward like becoming a designer or an engineer, just because it's very nebulous and very human oriented for sure.
And there's so many ways to do a business right, and there's many, many, many more ways to do it wrong. If you just follow a formula, that's not necessarily going to work. There's a lot of variables in business.
And people tend to do things the way that they're comfortable with, or the way they're familiar with. It's kind of funny. My wife, she's actually a small business person now, but she's an accountant by trade as I mentioned. In accounting, they use spreadsheets to a ridiculous amount. And when I say ridiculous amount I mean they're super familiar with spreadsheets, very advanced spreadsheets, so if there is a task, they throw a spreadsheet at it.
Now, as a programmer, my first thought was database. So, my first company, I did my accounting like a database, which probably wasn't great but it's what I understood. And that's what people do, they apply. So my wife Heather and I, sometimes I've went there and said, "That's cool, but you know, if we use a database this will be much easier." And I set her up with a great product called Airtable, and she switched from a spreadsheet for that particular thing to the database, and she loves it.
And then looking at some of her spreadsheets, for example, as a programmer, if I needed a particular report for finances, I would assume I'd make a report and I would use a system to make a report and stuff. But for her it's super common to extract data from multiple sources, stick it into a pre-made spreadsheet and have the spreadsheet be the report. This is what accountants do all day. It seems more manual, but it's actually faster and more convenient.
So as a person who's not educated, maybe not educated in starting a small business, or taking a long route like we do, you'll find that you're doing things that you know how to do. It may not be right, but you kind of get them done. And it's good to look, at some point, when you have time, to look how the professionals do it, so you can do it more efficiently.
Well, and I want to piggyback on that, which is that one of the harder things that we've learned is to do some things manually, that there's real value in doing things manually and personally, and not trying to automate it.
Like Todd says, when we think we need a report, the first we're going to go like, "Hm. We should write a report so we don't have to do it ourselves over and over again." Wrong. Wrong, unless you're-
We need the education-
Unless you're Ford, unless you're a massive company that has already a very dialed in process, automating as a small company is sometimes counterproductive. Not only does it take a long time, a big time upfront, but then you are locked in and can't change it. You can, but now all changes are expensive. And two, there's real value to human eyes going and looking at the stuff and compiling it.
And that was very hard for me to learn because, like a lot of people, I got into computers because I'm lazy, and I wanted the computer to do all the work for me. But there's no substitute for human eyes on the problem, in many cases.
It's funny, because we're all engineers and designers, the way we do reports at work is we have an artificial intelligence chat bot in Slack that produces the reports for us. That's such an us way of doing things, it's hilarious.
If it's okay, before we wrap up here, I'm going to bring this back to universities for a second. I think this is actually a really important thing to get across to people who are considering that path. If your state offers  here in Washington State it's called Running Start, but essentially the ability to go into a small community college that's nearby your high school, and get your first two years done for free. The K-12 system actually pays for your college, for the first two years. That's really helpful, and there's really no reason not to do that. That's a great way to get started.
Secondly, if you are going to go to a university, unless it's something like Harvard, or maybe Stanford, you should really avoid private universities, especially for-profit universities. Those are really terrible. You really don't want to go that direction.
Well, I want to draw a very clear distinction between private and for-profit.
Yes, of course.
There's a lot of very good private schools. If you can afford them, go for it. A lot of them are really great, great education. for-profit schools completely different.
Todd and Ken, I'm not sure if you know this, but one of the things that  well, you do know this. One of the things that for-profit universities do is they prey on disadvantaged students and stuff. They'll go and sign them up. And they actually did that at my school and I was actually signed up and accepted to one of these universities, which would have been an incredibly expensive education. I'm not sure what the quality would have been, but very, very expensive.
And I backed out, but for a while I was thinking this is what I'm going to do. I'm going to go to this university for a computer science degree. And you just need to stay clear of them. It's not worth it. They're often predatory, they're just bad.
Not to be confused. One thing I want to do mention is  sorry to interject, Jamon. The Code Academies are for-profit also, but those-
Yeah. That's much different though.
That's different.
Yeah. We're not going to mention any of the names of the for-profit universities, because we don't want to get sued, but 
They're bad, yes.
They're bad.
But there're a lot of really great state universities they can go to. A really great way to go is to do  your Running Start type program for two years and then go for the next two years at a state university and you can get a degree. And it's honestly relatively inexpensive.
One of the things that I would love to add, regardless of what you do, whether you're an engineer, or a designer, or a founder of a company, one of the best ways to learn is actually to teach what you know to other people.
Good point.
So that when you don't understand something, you're going to dive in to learn it so that you can explain it to someone else, and that's where oftentimes I found that theory and practical knowledge combine and multiply.
I think that's fantastic. I would totally agree. I've taught a handful of programmers throughout my career, from nothing into professionals, and nothing teaches you like teaching. It was a big boon.
As for business education, we talked about that as a combination of education, however you get that, and experience. But if you want to be an entrepreneur, there is absolutely no excuse.
Today is Tuesday when we're recording this. You can go down right no, go to Costco if you don't have a Costco card go to Walmart, buy bottled waters. They're really cheap. You're going to get 24 pack, whatever, for whatever it is. So basically you're paying pennies for each bottle.
Go down to the beach, or wherever in your local town where people hang out, and sit there and sell bottled waters for about 30 minutes.
Until someone calls the police on you for not doing it with a permit.
Correct. That's why the time thing. But you can sell. When someone's out running, or they're with their kids at the park, you can sell one of those bottled waters for $2. You bought it for 15 cents, you sold it for $2.
Congratulations. You are now a business person. And it just goes up for there, and the truth is, a lot of people who want to start a business, they really want to want to start a business, they don't actually want to start a business.
So I always recommend to people, do the bottled water test. If that's very unpalatable to you, you're probably not ready. Doesn't mean you won't be ready, but you're probably not ready to start that small business yet. Little advice from your uncle Todd.
I don't think I would ever go to the beach and sell bottled water unless I had to.
I don't think I would do that either.
People like really successful in sales people and stuff like say Mark Cuban, he did this kind of stuff. But from a young age he was a business man and his job was to find things that he'd get for X and sell for a multiple of X. And he would do anything. He would go door to door.
If you're already a programmer or designer, go get yourself an LLC and put your shingle out as a one person consulting firm. It's not the same quite as business, but it gives you a little bit of a flavor for it. It takes you down that road a little bit. That was certainly what did it for me.
Don't work for free.
Yeah. Don't work for free.
Whatever you do, don't work for free. Everyone will try to get you to work for free. Don't do it. No free bottles of water.
That's a whole another conversation.
Except for the cop who's arresting you for permits.
Give him a few-
What if I just slipped you one of these bad boys, officer?
This fine, fine water could be yours.
On that note, thanks for listening everybody.
See you next time.
Yes, thank you. This was Todd, and this is Jamon. No, that's not Jamon. This is Jamon-
Thank you. This 
I had a great stopping point, and Todd just had to keep talking. You just had to keep talking.
Ken, I'm not the kind of person who has to have the last word.
Yes, you are.
I'm really not. That's funny. I'm going to stop recording.
That is a great question. The first thing I would say is no one, literally no one can predict which company is going to succeed, especially like in a big way. The startups that we have been part of in our careers or, have worked for as clients, the ones that are trying to hit it big, there's no one who can predict that.
That said, we do see mistakes, we do see things that will hinder success or prevent it. One of the big ones I would say is having the wrong amount of money. That doesn't necessarily mean having to little although, that's by far the most common version, but sometimes having too much. I've seen startups that had so much money that they just wasted it and never had any discipline, and they crashed and burned.
So, having too much money surprisingly, can be a problem. Having too little is much more common, you don't hear about it as much, because they tend to fizzle in a very quiet way. There's a fairly frequent thing that we will encounter which is the self-funded entrepreneur who comes to us and says, "Hey, can you do this for $50,000?" The answer is almost always no. Any interesting app is likely to be more than $50,000. But more than that, if your only source of funding is your own life savings, or yours and your parents' life savings, that's a big red flag. Because it means that you have no room to move or develop or anything. If all you have is $50,000 to spend, and it's your life savings, and you want to build the business. I'm not saying don't do it. But what I am saying is you need to use that $50,000 to validate your idea more than you need to build an app or a website or whatever it is that you're looking for.
That can take a lot of forms, right? But take that $50,000, quit your job if you have a job, go interview customers, go do things that don't cost money that let you validate your idea. And then you can go find people who can help you. We are famously bootstrapped here, and the reason that we're able to do that is because consulting is a very easy thing to do the first one. Because it's just you, and you go out and get a contract and you grow from there.
A lot of businesses, that's not true. And if you need investors, because your idea has enough going on that you have to build something, then use the money you have to start that process rather than blow it all on an app that then can't grow because you've run out of money, Todd.
If the kind of business you want to build is $10,000 to actually build it, and then $50,000 is a great amount of money because then you can build it and iterate on it and have extra funds. The problem is something like an app that typically costs $100,000 or more is not only do you need the initial cost of it, you need all the capital to run that business and modifying and really adapt it to what you find the market actually wants.
That being said, there's nothing wrong with starting out bootstrapping. However, it is a little bit of a red flag if you haven't convinced anyone other than your mother to give you money for your idea, because if you can't convince one person, it's going to be hard to convince all the users to give you money to use for said business.
To play off of what Ken said earlier, I think that a lot of it is you want enough money that you're not making decisions based on fear, basing it on desperation. But you also don't want to be in a position where you just don't care. Where who cares if you blow this money because it's not your money and whatever. You need to have some level of skin in the game, so to speak.
Yeah, I would say that the ideal that we look for is whatever budget we think we need to build the most focused version of your app, we would love to see that you have two, three times that total somewhere. Not because we want to spend it for you, but because you're going to need it for something. And it's a measure of your health as a startup.
Even more ideal than that is, you have that much in hand, and you know what you're going to do to get more when you need it.
Moving beyond the financial side of it. Another thing that I've observed in my 13 years of doing consulting work is when the stakeholder, generally speaking, the founder CEO, but not always, feels that they have all of the answers already. And they just need to build this thing. Just get someone to build it, get someone to design it, build it, put it out there and the money will flow. That's extremely rare. Very, very rare.
I bet it doesn't exist at all.
I would tend to agree. One of the things that we say, as we're going through the sales process with a particular new client is, if your app does not change during the process, if what you conceive of as being this app at the very beginning does not change, then that's probably a failure. You're probably not listening to your clients, you're probably not  Or your customers, or your users. You're probably not listening to the experts you're surrounding yourself with, which would hopefully include us.
We've been through this quite a few times, and if you're not willing to say, "Hey, I don't know everything. I need to learn some of these things. Then that's a problem. Of course, conversely, we do expect people to bring some level of expertise in the domain that we're talking about. So, you should have some  I'm not going to go and just start a business making farming equipment or something. I've never run a farm, I don't have any clue what it would take.
So, having no experience whatsoever in the domain can be an issue as well, and you're not going to be able to just rely on other people to fill in all of those gaps. But, I think that there has to be a happy medium where you do have some domain expertise, you have some things in mind, you have a framework to make these decisions. We also understand that you don't know everything, and that you're going to need to gather information and evolve your view of what the app is going to be during the process.
Another one that's very common, you see it right up front with people. Either they're telling you their story about their business, or I've worked with them, or whatever, is they don't really care that much. They act like they do, but they don't really. Meaning, they put a few hours in a week or a month or something, and they show up every once in a while.
You get this a lot with people who are extremely wealthy maybe. It's a side thing for them, they're playing around and they just don't really care. It's pretty true that the person who cares about your business the most is you. There will be no one who cares about it more than you. So, if that's not true, there's a big problem. That being said, a lot of successful people don't have a lot of funding, maybe they bootstrap it at the beginning. They don't take for granted they know everything. They asked for help. They try to learn. They accept the fact that they're going to have to be salespeople and finance people, and operations people and everything.
Even if something applies to a particular person that we've already mentioned or are going to mention more, they may have other features that totally overwhelm that meaning. If you're particularly a good salesperson, you can be pretty bad at business and still be successful. That's just a fact. If your idea's so compelling that even though you're a horrible salesperson, when people hear it, they're like, "I want to give you money for this, because it sounds amazing." Then that person knows enough to hire someone who can execute well like us, Infinite Red. I'm not good like Jamon is with the plugs  those people can be very successful as well.
To flip this around to a more positive script. To some degree, we approach the clients that we take like an investor would to some degree. An investor is going to do more due diligence than we would obviously, but we're looking for: Do they have adequate access to capital? Do they have a high degree of commitment? Do the founders get along? Are people in agreement about what the vision is if there's more than one person involved?
By the way, we have plenty of projects projects with established companies and it's totally different. Because then, a budget is a budget, et cetera, et cetera. This is talking startups. These are all things basically like, if you have all of those pieces, and a deep understanding of, and relationship with their target customer. If you have all of those, then it's between you and the market. That's  you have all of the tools that you need at that point to succeed or fail on the merits of the idea.
It is very hard to predict what's going to happen with the market. And that's the part that no matter how good you are, you might still fail. The commitment helps. You hear the word pivot applied to startups because what happens is, they have all the other pieces; they have access to capital, they have a committed founding team, they are working very hard. What the market tells them is that their idea is wrong basically. The thing that they thought that they wanted to build, turns out, they misunderstood the market, the market changed, something happened, and then they're like, "But as we were deep in the muck of figuring that out, we saw this other thing and we're going to run at that now."
You'll find your subconscious as very creative and very strong and very secretive. What I mean by that is, if subconsciously, a person knows that their business model and their revenue model doesn't actually work or they fear it doesn't work. They haven't actually looked into it, they'll come up with super creative ways to get away from or not do those plans. When you ask them for it, they can either avoid it, sometimes become hostile.
Whatever secret fears you have, sometimes just sabotage yourself by avoiding those particular things. If you find that you're just very anxious about doing a business plan, you don't know why. It may be because your subconscious thinks that if you did it, you're going to realize that even best case scenario, this business does not make money.
That's why one of the questions we ask during the sales process is, what are your biggest fears with this process? Because it tends to let them come up with the answers to that without us being hostile about it, or anything like that. We're on their side, we're trying to solve those problems as much as we can.
I had a client back in the ClearSight days. We did a bunch of work for him, and he was this incredible engineer. Came up with just some amazing stuff. But he loved to invent. He wasn't super big on running the business. He didn't really enjoy a lot of the parts of running a business. He brought onboard a series of CEOs to run the business over a period of many years. At one point, it just became obvious to me that that this was really hurting his business. Because all he wanted to do was work on the product, and he didn't want to necessarily work on the business itself.
The stuff he was building was amazing. It was awesome. I really loved it. And he was a very good person. He always paid his bills to us, always appreciated us, but that blind spot, I think it really hurt him.
Yeah, that gentlemen, I don't know who you're referring to, but that gentleman needs to accept the fact that a business person is super important, and they need to find theirs to be a co-founder with them.
I think a big part of that is just seeing it as a business and not just the product itself, which actually is a big failing of a lot of people that think of building apps, they think of the app. They think of the product, they don't think about the business itself. It's hard because business, there's a lot to it. We're doing a whole podcast series on it right now. There's a lot to talk about, and there's a lot to learn, and there's stuff we're still learning.
It's definitely having a characteristic of thinking more holistically about the whole business and being willing to just dive in and learn things that you haven't done before. All of those types of things, but that's a positive characteristic. There are a few other negative characteristics that I've seen over the years. One actually is, over-confidence and over-optimism. Now, I tend to be a very optimistic person. I'm very confident.
Are you talking about me Jamon?
Sometimes.
I'm very optimistic that you're insulting me right now.
But then again, sometimes it's me, and Todd has to ground me. Now, Ken's always grounding both of us at the same time like an anchor in some ways.
That was mean. That was very mean.
We're dragging this thing  No, I'm joking. There's one gentleman that we worked for a long time ago, and he was very optimistic that the funding was going to come through. So, he had us do a whole lot of work. The funding didn't come through, and that put us in a tough position. That was a lesson that we had to learn, but it certainly put him in an even worse position, because now he owes his vendors money, and it's not ready to go yet.
So, the Elon Musk sort of thing. Although he seems to have access to bottomless levels of cash.
Elon Musk has easily inherited the reality distortion field from Steve Jobs.
Yes, exactly.
And put it to shame to be honest.
Right. That sort of thing can kill you if you're not Steve Jobs or Elon Musk.
Yeah, and actually, anybody who comes in acting like Steve Jobs or Elon Musk, which usually means being an asshole and playing fast and loose with the facts, which is not what I'm saying that Jobs and Musk are doing. I'm saying that that's what the people who think that they're right tend to do. That is a massive red flag.
They're pale clones of the original, and probably only cloning the worst parts. A couple of quick hits here. One is, if you don't like your customers, or worse, you hate your customers, huge problem. Your business provides value to customers. If you hate your customers, or loathe them or don't want to interact with them, and you'd be like well, "Todd, that's ridiculous, who would do that?" You would be surprised how many businesses hate their customers. That's a problem, you really should look for customers that you enjoy servicing, you enjoy providing value to, it gives you a lot of personal, and the company and a lot of gratification for sure.
The second one is, when you describe your product or your business to someone, if they think it's awesome, and it's really good, and when can they get their hands on it, that's, that's a good sign. Anything below that from mild praise to praise means they really think your product sucks. Especially, if you know those people. So, take mild praise as this is horrible. So, really find something that where, when you're leaving the discussion, they're very interested in how they can get their hands on this thing and when.
Related to that. I would say, if you're a startup  Well, okay two things. Back up. One, what kind of business are you? Are you a startup? By startup, that means you think there's a large opportunity, and you've got to get to it fast before somebody else does. Maybe it's winner take all. You're aiming to be a big thing. It doesn't necessarily have to be like unicorn big, but it's big. In which case, you need to optimize for hitting that and failing relatively quickly if you're not going to. Versus a lifestyle company, where you want to make a long term sustainable thing, you probably want to bootstrap.
Like us.
If your ultimate idea is not subject to bootstrapping. It's not something that you have to get to in the next year or two, or you're going to miss it. Then find the idea you can bootstrap that's more practical. Do that first, and then work on the big thing. But those two strategies are different. They require very different mindsets. They require different ways of capitalizing. The worst thing that can happen to a startup by the way, is not failure. Outright failure in a startup is not the outcome anybody wants, but once it's gone, you're free, and you can do the next one or something else.
The worst outcome is kind of success. Where it makes just enough to keep going, and you never know whether to pull the plug. I've seen a couple of those. That is the worst outcome for a startup in my opinion.
I worked with a startup many years ago that it was actually a success. I'd like to talk about that one a little bit. The founder, I think he had a lot of the characteristics that an ideal founder would have. He was a very nice guy, but also very driven. He was really great to work with. Everybody that worked on this project really loved it, which was good because you'd get their best work and they would really go out of their way to try to make his product a success.
It was very much a niche market. It had to do with transportation, and he was really, really great at identifying the problem that people had, these transportation companies, and solving one very specific but very painful problem that was hard to solve. You couldn't just do it in house. If you did it in house, you would inevitably fail, and you would have a real problem on your hands. Almost everybody has this issue.
He had us build a web application that mimicked a spreadsheet that he'd been solving this problem with. He'd already gone through the manual labor of figuring out a lot of the issues and doing this almost on a notepad in a way, as a consultant for these transportation companies. He had figured out his business model, and then he had us build a web app. He wasn't afraid to spend money if we said, "Hey, we need to beef up this section of the web app." He would he would totally be cool with it. He wouldn't spend money willy nilly, but if we said it was important, then he would budget the money for it and he would do it.
He was also very good at networking and getting out there and talking to his customers. He would come back and say, "Hey, I've got this customer, it's a big, huge company you've heard of, and they're having a problem with this part of the application, and this is how I think we should fix it." He actually spent the time to figure out how we worked and the language that we needed from him to solve these problems. He would also very much listen to that feedback that we would give him.
He now works for a big company. They hired him specifically for this expertise. They have a lot of trucks on the road, and a lot of different jurisdictions that they're rolling through, and they need to have their ducks in a row. The application itself is, I believe, he's either sold it, or is in process of selling it, exiting. That was a very good experience. It was something that I learned a lot from. One thing that's for sure, is that founder put in a ton of work, learning from his customers, learning all of the domain expertise that he needed in order to be the expert in this particular field. That was very instructive. He was not lazy, he was very much a go getter, but also willing to listen to us.
Yeah, I think developing partnerships with either your partners, your team your vendors is hugely important. And what I mean by partnership, it sounds like corporate speak or whatever, but what it means is not adversarial. Meaning, one of the things was working with lawyers, bless their heart, as clients, in my experience is they're trained to always start everything adversarial. That can work to a point. But really, if you work as a partner, meaning, you're looking out for your partner's best interest, and they're looking out for your best interest, and then you're looking out for your own best interest, and vice versa.
Then you tend to get the best results. If you're trying to compete with them, or one-up them or nickel and dime or whatever, it's not going to do that.
If you want to start a business, don't be discouraged by anything what we're saying. Because you can go into it the wrong way, and end up someplace fine, if you're committed. When Todd and I started, we were going to build an app. I had a little money in the bank so I could quit my job. It didn't work.
Let's be perfectly honest. We built a really nice app that 300 people in the world really, really loved. They still occasionally email us.
We did get a number six in the Apple Health and Fitness category above Nike by the way.
Yeah, that was-
For whatever that's worth.
That was a little bit of a fluke.
Which is nothing.
But in any case, it didn't work. We started to take on clients, but we were out of money, and we were looking at, what's going to happen next. I realized that I was like, I will break IRAs. I'll break my 401Ks, I will sell my stock in order to keep this going. That was the point where I knew I was committed for real. It's like until you have a moment like that, you and everyone around you can have some doubts legitimately about whether you're actually committed.
But once you're like, I will put everything on the line if I have to. Not that I wanted to, unfortunately, I didn't have to. But when you make that transition in your head, that you're willing to do whatever it takes to make it succeed, then your odds go way up. Because if you are smart enough to be able to manage things so that you can keep trying, and you have the drive to keep trying even after a failure, then you're doing pretty well at that point.
I'm kind of scanning through a list of old clients and I think that of the ones that failed  I had a lot of existing businesses. They already had business models that were working and things like that. I did a lot of work for existing businesses. But the startups that failed, I think the commonality from what I'm seeing in this list that I'm scrolling through, is that they didn't really have a business model that worked. They didn't really have something that they could point to and say, "Yeah, this is what people need, and this is what they're willing to pay for it, and yes, that will sustain not only paying for this app, but also, my salary and salary of the staff, everything."
That was actually I think one of the biggest issues. The ones that did succeed had a fairly compelling and simple and straightforward business model. There are a few that they would have 14 different ways that they would make money on this, shave a little percentage off of this, and a little bit off of that, and we're going to make a little bit here, or they'd have astronomical user numbers that we're going to be impossible to hit in order to make these numbers work. That was a fairly common thing. And that's something that I think that if you're moving into a business, you need to be able to sit down and look up, and do a realistic projection of how am I going to appeal to these people? How am I going to get sale number one for one thing?
Then, what kind of dollars are we looking at? Is this going to sustain us?
I have a positive story. None of this is a secret. I wasn't under NDA or anything. I actually, this is circa 2008. I don't know 2007, 2008 something like that. I interviewed at Airbnb. At that time, they were in their apartment in San Francisco. There was the two founders, and a couple other people working there. They had one engineer working on their system, but he was going to school, and he wasn't full-time. They were interviewing me for basically one of the first full-time engineering positions. I did not take that job. I actually took a job with Ken instead. So, thank you for that Ken.
But what was cool about it is a couple things, I knew they were going to be extremely successful for multiple reasons. One, the two young gentlemen in there, they were like 24 at the time, I was quite a bit older then. Were very impressive people. They were trained industrial designers.
They had actually started their business by actually doing it. They did the Airbnb model with their own apartment, and they had some success. But more than that, when they showed me their pitch deck, it was good and compelling. But they had a great customer acquisition plan. Their plan was very specific. The DNC, the Democratic National Convention was happening in Denver that year. It's very common to know that if you have to get housing early, and they completely run out of housing, because the size of the event, and the size of Denver  I believe it was Denver.
Their whole thing was okay, we know that this periodic thing happens. We know for a fact that they run out of tons of housing, and we know for a fact that there's a lot of young people who go to the political conventions because they're more idealistic in the parties. They were going to do their huge push, and they're planning on putting all their wood behind that arrow to get Airbnb set up and operating and making money at that venue.
As we all know, because we've probably all used Airbnb, or least know about it, they were very successful in their company. Now, they did some more nefarious marketing things later, but just sitting down  And by the way, when you interview at a very small startup like that as an engineer in the Bay Area, they tend to pitch to you because it's hard to get engineers, and they want to convince you that their startup's going to make it. I did walk away feeling like yeah, although I didn't particularly want to join their company because at the time, I didn't want to be on a tiny team. I wanted to be on a bigger team, and it would have just been a team of me and this one gentleman who was working part-time from the East Coast.
But I did walk away knowing for sure that these people were going to make it because they had all their ducks in a row.
Existing businesses tend to have maybe a little better success with startups. They may not blow the lid off of things, but they're going to have a little better sense for some of the pitfalls that can come along. I worked for a company, I was doing their website. This is way early when I was first started. They were selling, I think they were auto parts or something. Something along those lines, it has been a long time.
But they decided they were going to get into re-manufactured parts, and they wanted to sell those online, not just new parts. They did a lot of things really well. That was one of our more successful projects. I think it's still running to this day. What we had to do was make sure that mechanics who were, and still are fairly non-technical, not super computer savvy clientele, that they can jump on to this website, find what they needed, order it very quickly, and be done with it.
We also optimized for SEO and things like that. But this company was owned by an older couple. They worked together, husband and wife. They were really great to work with, they really had a keen eye for business, how they were going to make money with this, how they're going to reach their customers. They just didn't know the online part of it. And that's where they brought us in, and they were very good about listening to what we had to offer.
We also built a back office system for them so that they could monitor all of the orders coming in, provide customized quotes where they needed to, and fill the orders. When we started this project, they said, we see the writing on the wall for our current business, which was aging as far as how they were  Like anything retail, or online orders is going to get sucked up by Amazon and these other big companies, right? So, they needed to provide something that Amazon wasn't going to be able to do as easily.
After the project, and after it had been going for a while, the owner called me up and he said, "Hey, I think this saved our business. I think this really helped." It was bringing in tens of thousands of dollars per month in revenue, and probably approaching hundreds of thousands. They just had this idea they were willing to explore a little bit into a territory that they weren't very used to. But they also were very much thinking in terms of dollars and cents, business model, marketing, all those other aspects of the business.
That was good for me to see, because I could see that yeah, you can create something out of nothing, essentially. As long as you're willing to put the work in, and have a complete business from start to finish, you don't skip any other steps.
I would like to ask Ken. Ken worked for a photo which later was bought by Kodak. And then Kodak destroyed it through pure stupidity, but I would love to hear least from your perspective if you feel that's a good story Ken about your experiences at Ofoto?
I wasn't around at Ofoto when it started by the way. It had already been bought when I joined them. Anything I know about the early stages is lore, it's second hand. But they were always a very sensible company, and I liked that. That was one of the things that I liked when I joined them, which is that you know at the end of the day, they sold photos.
Could you tell our younger audience who Ofoto was?
Ofoto was one of the first generation of online photo sharing sites.
That's O-F-O-T-O.
O-F-O-T-O. It was a great name, by the way. It was an amazing name that Kodak just threw away.
What did Kodak call it by the way once they bought it?
Kodak Easy Share Gallery.
That rolls off the tongue. Ofoto was so hard to remember.
Kodak Easy Share Gallery. It's just amazing.
I heard a lot of stories about that. There was a lot of amazing people there. But boy, were they a case study in how to throw away a century of legacy. Anyway, but they were very sensible, right? So, A, they could offer all the photo sharing stuff for free because they sold prints, and that was when people still cared about prints.
Eventually, people stopped caring very much about prints, but their primary competitor who for a long time was never bought by anybody was Shutterfly, and they're still around. I think they bought the assets of Kodak Easy Share Gallery when Kodak quit. That's what I liked about it at the time when I joined them was like, their business model was extremely straightforward. They sold prints at a healthy markup, they had a great operation, there was two teams. There was the site team, which was the user facing, the sharing and all that, and there was the lab team. Which is this elaborate system that controlled the printers and the workflow for the people who operated them.
It was great. I loved Ofoto.
Ken, you also worked for the company Yammer, who later got bought by Microsoft? Can you tell us a little bit more about that?
Yeah. Yammer is actually a great example of a pivot. It was a spinoff of an internal project at, I think it was called Geni.com. So David Sacks, one of the PayPal mafia, along with Elon Musk, and Peter Thiel, and all those kind of people. He was the primary founder and CEO. It was a spinoff of Geni that made this internal Twitter-like tool just for internal communication. And we're like, "Hey, this is actually a pretty good idea. It's got some legs." So, it turned into Yammer.
They cared a lot about culture and productivity and how to make a team work and they thought about it constantly, which I always admired. But one of the interesting things that I would say is that, the things that you as a programmer, all the good habits you have as a programmer, if you become an entrepreneur and you're building something new, I'm not saying throw them out. But I am saying your first problem isn't having a scaling problem. Your first problem is to find your market fit, and clean codes, scalability. All that stuff doesn't matter if it doesn't work. It doesn't matter if you don't get there.
The code base when I got to it, and I'm sure all the people here will agree to this, was challenging, shall we say, right? But at that point, it didn't matter as much, because they had the further investment, then they got bought by Microsoft. They had the resources to fix that problem, now that they had a product market fit.
Until they had that product market fit, they just worked like hell. They just blasted that thing out. Honestly, I think for that kind of startup, for a big a startup, that's probably the right way to do it. Blast the thing out, go as fast as you can, and then when you've got success and money, then you bring people on who can come in, be code grownups and figure it out.
The lesson from that one is focus. It's very tempting when programmers become entrepreneurs to be like, now that I get to like make this Greenfield app, I'm going to make sure that it's just really beautiful and wonderful. You know what, that doesn't matter. If you're being so aggressive that you're constantly fixing your own mistakes, and that kind of thing. Then you need to slow down a little bit. But the lesson is, be laser focused on the one thing that is the most important to you right now.
That was a hard lesson for me to learn, but I think it was a good one to learn. Anyway, go ahead.
I was just going to say, we've had to apply that to our own business for sure. It's easy to get distracted by all the other things that are possible out there. But making sure that we're laser focused and have all of our ducks in a row, and have a business model, and marketing, and are talking to our clients. One of the things that we did when we actually hired a consultant to go out and talk to a bunch of our clients and ask a bunch of questions, was why haven't we done this before? We tell our clients to do this, but we hadn't done it up to that point. It was a no brainer, face palm moment. Like, oh man, we really should have been doing this.
Yeah, that highlights a point, you can make mistakes, you can do exactly opposite what we said you can. If you just keep on keeping on, it'll be okay. It is hard to keep on keeping on. The less mistakes you make, the easier it is to keep on keeping on, but that is really the only secret.
The takeaway from some of these negative stories, by the way, is that you'll see statistics like, nine out of 10 businesses fail, or 19 out of 20 are  I don't know about the statistics are. But it's something like. Some large number of businesses will fail within the first couple of years.
If you have the things that we talked about commitment, knowledge of your market, access to capital your odds are way, way better. Because all of those statistics include all these weird cases that we've seen in our careers. Don't be discouraged. If you're the type who really, really believes that you need to be an entrepreneur, keep at it. Because these are all solvable issues.
I think one of the things that I've seen from a lot of companies that don't have much of a chance of making it, is they're just looking for a formula that works. Rather than doing the difficult work of identifying what it is that you have a unique perspective and advantage on and then building a business around that.
Hello, everyone. Today we were talking about which topic to talk about, and we had the idea, how can we come up with a topic that's extremely boring, that no one wants to talk about, but actually is super important? So, we're going to talk about lawyers, accountants, bookkeepers, finance, and other things. Basically, how to start a business and still feed your family.
Let's start off with you, Ken. If I were starting in business and you and I are sitting in the airport and I knew you had started one and I asked, "Hey, Ken. What should I worry about first off when I'm starting a business?" What would you say?
I would tell you to go find a good accountant and a good lawyer right away. You don't need to pay them to set up the business for you. You can do that yourself or you can use a service like LegalZoom or something like that. But you need to have somebody who is familiar with the kind of business that you're planning to do. We have a great lawyer who happens to specialize in digital agencies.
I've got an accountant that I've personally worked with for many, many years. It's not the cheapest, like you want your accountant to be good. A bookkeeper is sort of a different matter since your accountant is not doing your day to day books, and you don't necessarily need a bookkeeper right away because you're probably not going to have a lot of transactions right away. To be honest, I found it was helpful for me to just do it personally for a little period because then I understood what was going on better.
Ken, what's the difference for those who may not know between an accountant and a bookkeeper?
Well, I'm told bookkeeper is a little bit old fashioned, but it's still very descriptive. Your accountant, aka your CPA, your Certified Public Accountant, that is someone who will do your state and federal and maybe even international taxes for you. They may or may not have people who will keep your books and stuff. Now, bookkeepers, they're the ones who will record transactions coming in and going out basically, so that your books are an accurate reflection of what's happening in your business.
Todd, do you want to interject?
Yeah, just real quick. Sorry to be pedantic, but my wife's an accountant. Bookkeepers often are not accountants. Some of them are just people who started doing books at their company and continue to do it. When you get to accountants, you have two types of accountants: One is CPA, which is a tax accountant; and then there are other accountants who specialize in corporate stuff, like my wife. She went to college for it and is highly trained.
That's the kind I recommend you get, is the kind of who is trained in accounting practices.
First of all, what's the more modern term for a bookkeeper? Is there?
I think Heather liked the term, what was it? Financial assistant, something like that?
Okay.
I think that's what she said. Heather is my wife, by the way.
And then secondly, what does an accountant give you that a financial assistant does not?
Well, A, They are literally certified by the state. And B, They have experience in tax law.
CPA does, but they're more corporate accountant. They're going to bring more like  It's my understanding that they can bring more strategic 
Yeah, they can be more strategic help, they can help you design your practices for paying people, for collecting money, because there's just a lot of i's and t's that need to be dotted and crossed.
Yeah, that makes sense.
Yeah, not to keep on interrupting about accounting. Sorry, my wife's an accountant.
We're gonna play a little game. How many times will Todd mention that his wife is an accountant?
All CPAs are accountants. Not all accountants are CPAs. My wife has absolutely no interest in being a CPA, she never did, it had nothing to do with her job. However, if you need  One of the things she specializes in is international accounting. So, a bookkeeper is someone who enters data, basically. They're gonna get bills in from the outside via mail, they're gonna enter those into the bookkeeping system, or the accounting system, they're gonna pay invoices, whatever. They're a clerk.
An accountant is more like a programmer. They investigate where things went wrong, they figure out the best ways to do things. If you have a half million dollars in pounds in the UK, and you need to transfer in the US as US dollars, how do you go about that? There's very different ways. Some are very expensive, some are not. So, that's  An accountant spends a lot of time doing strategic-type accounting stuff, as opposed to data entry, which is more what your bookkeeper does.
Yeah, so when I started ClearSight back in 2005, one of my early employees, his dad was a controller, which is like kind of an accountant, but it's specifically to a-
That's really interesting, Jamon. Did you know my wife was an accountant?
I did not know that, Todd. I hope you remind me again. A controller is basically, it's a type of accountant that's kind of high up in a company and focused on  Basically, in charge of the company's finances, and  So, he was a controller and I went to lunch with him and I asked him for advice. And the first question he asked me, this was kind of interesting because I did not expect this, he said, "How's your accounts receivable?" And I was like, "Uh  I know what that is, but what do you mean by 'how is it'?" And he kind of helped me think through my terms, like how long until the payment was due, and was I taking money upfront? Which I wasn't, weirdly, I wasn't taking money upfront. I was just doing the work and hoping I'd get paid.
Hoping is the key term.
Hoping, yeah. And more than once I didn't get paid. And that sucked, especially when I wasn't getting paid very much.
That's definitely one of the harder things to learn when you start doing this, is if you've only ever worked at a company, you don't realize how much effort goes into just getting people to actually pay you, right? 99% of the time it isn't out of any malice, it's not people trying to mess with you, it's just their processes are also run by humans. Maybe they're a small company, maybe they're a big company and something got lost, or things didn't get signed off correctly, right? There's just a million little things that have to be kept track of. And so, whoever is doing your day to day accounting, be nice to them.
Be nice to them because you really need to trust them to be on top of what they're doing.
You do not want to piss off an accountant if you value eating, for sure. Cause they won't do anything wrong, but they will sure drag their feet on your particular account. One other things I wanted to add, especially with larger companies or companies that have accounting departments, accounting is never personal, okay? And Ken said they probably don't want to mess with you. They may not want to mess with you, but they may actually have a policy not to pay their vendors, which seems absurd but it's true. So, in other words, if you're sitting in an executive meeting at a company that has 5,000 people, and your cash-flow  you need some cash or whatever. The directive to the accounting department could be, "Only pay the vendors with the highest interest, the top 25% of them. Do not pay anyone else." And so, it's not  they're not trying to get to you, it's just business.
I think it's also very tempting when you're  If you're a creative person and you're getting into business and you wanna be able to be a partner to your clients, and that's all very laudable and we wanna do that and we strive to do that. But at the end of the day, when you're negotiating a contract, you have to take it seriously. You have to take what it says seriously because there may come a situation where it's no longer you and the friendly person you're talking to, it's just you and the contract and someone unfriendly.
Or you and the contract and someone not unfriendly, but as Todd says they're just  implementing a policy. It's a lot harder to do something about it than possible which  It really highlights how important the relationship is, as well. So, you need to have a good contract that actually reflects what you and your counter-party actually mean. And you have to keep that relationship good all the way through.
Absolutely. We had a client a while back that wanted to use their own contract, which is not uncommon. I mean, we have our own kind of Master Services Agreement that we'll send over, but in this case they had their own, they wanted to send it over. And this sort of brings it back to having a good lawyer, because in this case, something fell through the cracks and we signed it without sending it over to our lawyer. And this was a big mistake because-
Big mistake.
Big mistake. Did we mention it was a very big mistake?
My wife, who's an accountant, by the way, said it was a huge mistake.
Oh, she is? Oh, that's interesting. But what happened was the project started off really well, and it went very well through the first month. And then, abruptly, we don't know what happened because the whole way through the client was telling us we were doing good work. Even after things went weird, he was telling us that we were doing good work, which really didn't make sense. But he wanted out of this contract, or he wanted to hold our feet to the fire. And we realized, and we sent our contract over to our lawyer, and Ken  Wasn't his response something like-
He said it was the most punitive contract he'd ever seen.
And he said that it was designed to be used as a weapon.
Yes. That's what he said.
Which was not a great place to be in after we had already signed this thing.
Against us, by the way. Not for us.
So, luckily this particular client ended up taking a route  It wasn't an easy route, but he took a route out of our contract that let us off the hook, essentially, with some work from Ken. So, thanks Ken. But we made it through that one, but not everybody would. That could be a really big problem. So, having a good attorney, which we did, and actually using him, which we did not, is really important when you're putting these contracts together that you're talking about. And then, of course, there's a certain amount of teeth to it, so they will pay you.
We designed our standard contract to be, we think, really, very fair.
I think so, yeah.
And so, if a client wants to use their own contract, we now  It always goes to the lawyer. It doesn't matter what it costs. And he's very reasonable with how he charges for that-
Sorry to interrupt. That's a good rule. If you don't feel that it's worth paying your lawyer the $300 an hour, or whatever your lawyer costs, it goes up from there, trust me, because this project isn't big enough, then don't take the project. And that sounds harsh, but if you can't pay your lawyer to look at the contract, then don't sign the contract. It's not worth it to you.
If it's a small project, we don't accept-
Yeah, and that's why we have a standard contract, because the lawyer drafted it. And so, we can send it over and we don't have to pay him every time. Of course, it costs more to have him draft it, but then if they sign it then we know that we're good to go. But if they want their own contract, you need to have it reviewed by your attorney. And if you don't know of an attorney, you can ask around on social media and stuff, you can generally get some recommendations.
One thing I do wanna say, though. And this is often somewhat shocking to people who have never ran a business, who worked for other people or other corporations throughout their career. The world for you as a business owner, is very different than the world for you as an employee. If your employer doesn't pay you, you can go to the labor board, and the government will come in and they will sue that company and they'll get that money for you. Because of that, your employer's gonna pay you.
And your wages are legally privileged. So, if they're in bankruptcy, you get your money, not necessarily the very first, but it's a very high priority. It's a very high priority debt.
Correct. If you have a personal contract with  between two people or between two companies, or between you and a company, there are no such protections whatsoever. You will get paid if the person who's paying you wants to pay you. If they don't pay you, there's no government agency you're going to go to who's gonna help you-
Well, there's the courts.
The court, basically.
 other than the courts. And if you're talking about a $10,000 bill that they owe you, you are not going to court for that. You can try to go small claims court, that kind of thing. But the reality is you're not going to go to court for that. And people know this. And there's a lot of people  And you're like, "Well, you know, I did this contract with Bob, and Bob's wonderful. I mean, I love Bob. He spends his time saving orphan kittens on the weekends." That's great, but Bob's company was just bought by Joe, and Joe is a complete jerk. And Joe now has all your contracts. And Joe used to be a lawyer, bless his heart. And Joe knows that you're not gonna do anything when he doesn't pay your $10,000, so he just refuses to pay you.
By the way, this is not a hypothetical, this happened to me.
And so, we changed the names, obviously. But Joe does that, and there's really nothing you're gonna do and you're just gonna lose that $10,000. You can try to do collections and irritate them into paying you. But here's the raw fact, if they need you for something they will pay you. Meaning if you still have work to do, they will pay you because they need you. Be very weary of the end of a working engagement when they no longer need you.
This is not to say that everybody is like this. There's plenty of extremely honorable-
Like Bob, Bob's one of them.
 companies out there. Yes, there's many, many, many great, wonderful, honorable clients who pay what they owe, and they would never screw you.
Correct.
But there's more people out there who, like I said, not necessarily even out of malice, sometimes just out of laziness, kind of don't get around to it.
Another example is if you get a contract where you take liability for stuff that you really have no control over. So, you're like, "Well, Bob's not gonna sue me. Bob's a great guy. He has the same values as I do." But Bob gets successful and Google comes and buys Bob, trust me. Google's lawyers will sue you. If they can, they will. It's not personal, it's just business.
Beyond accounts receivable, which is obviously a big topic  And by the way, get as much money upfront as you can. That's a very straightforward way to fix some of this stuff. But beyond that, accountants can also give you a really great insight into the engine of your business. So, they're sort of like your oil pressure. They're your check engine light. And they will give you information that allows you to make decisions, business decisions, going forward.
So, an example of this is how much are we gonna pay our employees for bonuses? We need to know what we can afford and what's budgeted for that. Other examples are could we go out and maybe acquire a small business? Or can we invest a bunch of money into R&D? These are all things that we've actually looked at within Infinite Red over the past three years. And we needed to have good information from our bookkeepers and our accountants. And we haven't had always that. That has actually been one of the stumbling blocks that we've run into with Infinite Red, is that we've run into situations where we've been fed what turned out to be inaccurate information. And we've made decisions based on that, and it's caused the engine to run more roughly.
Suffice to say, you really need it to be accurate. So, one of the things that we've done to help make that be the case is that we have our CPA, our tax accountant, and our bookkeepers are totally different, so that we at least have two competent people looking at it periodically. It's not a perfect safeguard by any stretch of the imagination, but it does help a little bit.
And it's tempting to have one company do both, right?
It is tempting. And I would argue you should not do that.
Always keep them separate.
Yeah, I would say at the beginning, you do your bookkeeping and then let your CPA do the taxes. And we get to a point where  For instance, this is the difference between a bookkeeper and an accountant. If you're setting up your books and you're setting up your own chart of accounts, and that kind of stuff, a bookkeeper will just do it. They'll do what you say. Put this in here. Do this, do that.
An accountant will say, "Okay. You see how you set up your accounts here? Later, when you get audited " And then you're like, "Why would we get audited, what does that even mean?" Well if you need a big loan, the banks are gonna require an audit your finances. Obviously that's the audit on the tax side, but that's your tax accountant. And so, what she'll do is she'll say, "Look, I've been through many audits, this is what they're going to look for. You should set it up this way so that that audit goes smoothly so that loan you need  Say you get a big new client and you need $250,000 to service that client, and you're gonna make millions? Delaying that loan by a week or two could be disastrous." So, that's the difference between an accountant and a bookkeeper. They know what they know, and they know what's possibly gonna happen.
Yeah. Banks are a whole other aspect about this that we could talk about. One of the things about banks is that they are generally very slow. You're just one file on their desk. They're not particularly invested in making sure you succeed. And it can really trip you up. Like if you need that loan  We've been in a situation where we said, "Hey, we wanna borrow some money for a particular thing." And it took  I think  I don't remember the timeline, but it was months longer than I expected. Like it was a lot longer.
It took forever.
Yes. And it felt like most of the issue was on the bank side. Now, being prepared for that, as Todd said, is really important.
In that particular case, there was something that didn't get filed correctly two years ago with the  I mean, it's 
So, another aspect of this, and we can touch a little bit on another property of our business, and that is remote work, is the-
Oh God, banks and remote work.
Banks, as well as government agencies  Ken, you've had to set up I don't know how many states now for Infinite Red employees.
Seven, and I need to set up an eighth.
Yeah. So, this is a whole aspect of kind of the boring  We're talking about the boring parts of business. But if you're starting a remote work company and you're hiring people from all over, you need to keep this in mind that you're gonna have to set up, what's it called? Nexus? If you have nexus, you have to set up the state 
Yeah. And having an employee-
What is nexus, by the way?
Nexus just means that you legally exist in a location. And typically the place where you have nexus or not have nexus, as a US company, is in individual states. So, if you have ordered something online and you live in a sales tax state, but they didn't charge you sales tax, the reason they didn't have to do that is because they don't have nexus in your state. So, famously Amazon, for a long time, didn't have nexus in California, or at least they argued that they didn't. And so, Californians didn't have to pay sales tax when they  I mean, nominally they were supposed to be paying it to the state, but Amazon didn't have to collect it for them. So, that's nexus, and it applies to all kinds of tax, not just sales tax. So, for example, basically everywhere we have an employee, we have to pay taxes.
This is one of the less glamorous, less wonderful parts about remote work, to be honest.
There are PEOs or POEs 
PEOs.
PEOs, and those will  They're basically companies that have all this stuff figured out already and you hire your employees through them.
Yes. I believe there's some issues with that. If I were doing this over again, I probably would go with a PEO to avoid a lot of that stuff.
They're expensive, but they kind of  They make it  It's sort of like, in a software engineering world, using Heroku, which kind of spins it all up for you, versus setting up individual Amazon AWS servers.
The other problem with banking, especially with governments in general, is their complete ignorance of the laws about things like signatures. So, I think this is a funny story. So, Ken sent over something that needed to be signed. And I have a bunch of digital signatures of mine that I apply to PDFs. Which is my real signature, and it's perfectly legal, as my wife, who's an accountant, would say. She actually worked for a company that did digital signatures-
You said your wife's an account?
Yeah, my wife Heather is an accountant. I don't know if I mentioned that. But the signature's legal. So, I legally signed the document Ken sent, and Jamon legally signed it. And they're like, "Well, we can't accept this. We can accept a fax." Okay, so a fax. So, I'm going to go back to 1995 where my fax machine is, and I'm gonna fax it over. "So, okay can't do a fax cause you don't live in that decade. But it can be digital, right? But it can't be digital, it can be a picture of my signature, right?"
So, you take the PDF you just signed digitally, you print it out, then you take your camera out and you take a picture of the digital signature you put on the PDF. And then you send them the picture, and then that's fine. It's this kind of  In some cases we had to have things overnighted between the three of us to sign things. In some cases, we had to go in to the local Chase branch or Bank of America branch or wherever and sign it. And none of this is required by law, at all by the way-
It's just their corporate policies.
They probably have pneumatic tubes in their offices where they send things to each other. It's crazy. I literally took a picture of  I made it quite obvious I took a picture of it, too, just to be a jerk.
So, another aspect of finances is budgeting. So, one of the things I did was I ran a budget with my business, was very happy to hand it off to Ken once we merged. That was one of my favorite parts in the merger. But it was really, really important. So, I did it on just a straight up cash basis. So, money would come in, and I would use a program called youneedabudget.com to enter these transactions, whether they were in-flow or out-flow. And then they have this zero-based budgeting system that lets you allocate money for this and that.
It's really good because then you know if you had a couple hundred thousand dollars in the bank, and you needed a certain amount of money for payroll, or you needed a certain amount of money to pay your SaaS products, like your GitHub bill, things like that, you know that you had the money or not in the bank. And it gave you really kind of granular data there. It's not quite the same as using QuickBooks. QuickBooks has a useless budgeting feature. I've looked at it. It's just not  It's sort of like, "Hey, let's plan out the next year." Which you hardly even know what the next month is gonna be like. But having some sort of zero-based budgeting system is quite useful, I think, especially at first.
Can you explain what zero-based means?
So, essentially, a zero-based budget is where you start with the amount of money that you have, generally, in the bank, and you take that money and you start moving down the line of categories, allocating bits and pieces, subtracting it from that total until you get to zero. So, such and such for payroll, and such and such for your credit card payment, and such and such for your SaaS products. And maybe you need some for team dinners and travel. And you're just moving down. And eventually, the money runs out, right? You hit zero. Or you run out of categories, and you're like, "Okay, I've got money left over and I'm gonna put this into a kind of slush fund or something that just kind of like keeps it for a rainy day."
Isn't slush funds illegal? We should probably just use a different term.
Okay, maybe I used the wrong word there. Did I use the wrong word? Sorry. A rainy day fund.
Ken would know.
An emergency fund. And then eventually, you could even bring that money home if you're the owner. But that's what zero-based is. You always get to zero, and you don't go any further than zero because there's no more money. If you don't get to zero, then that means there's money just kind of hanging out not-
Yeah. So, the amount of cash you have determines how far into the future you can budget, basically.
Exactly. Yes, that's right. So, when you're starting up, it's really important because you don't actually know what kind of expenses are gonna be coming in. You just can't really predict that. So, doing budgeting gives you that insight into where is your money going. You have to allocate for it, and then you enter it into the system. Once you've got a pretty good rhythm going, it's less necessary because you know where the money's going and you can keep an eye on sort of more macro numbers that will give you ideas of health. I would definitely recommend it for probably the first  I would say, probably the first three years.
And to be clear, it's not a substitute for real books. But I did find it very helpful in just thinking about how money moves around.
It's also a little bit inadequate in that it is cash basis. And while cash flow is king, and we need to talk about that, Ken, there's also accounts receivable and accounts payable that will affect the money going in and out.
Yeah, there's something called cash basis accounting.
Yeah. Talk about it just a little bit, which is if you're starting up a business you should be cash basis. Like almost full stop, unless you're doing a hardware startup, right? If you're doing something which has a ton of physical inventory, then you might not want to, but frankly if that's true, I mean you need to be talking to a professional, already.
The other one's called accrual basis.
Accrual, yeah. So, cash basically is very simple. It's like money coming in, money going out. Period.
It's what you would do at home.
Exactly. It's what you would do at home. It's what you probably think accounting is already like. Accrual is like as soon as we have agreed to pay something, then it immediately goes out-
And as soon as someone agrees to pay us, then it immediately comes in.
Fancy ways of accounting for inventory, and I personally don't actually understand it very well, so that's about all I can say about it.
It's useful because it gives a more accurate model of where your business actually is, versus cash which can lag or be ahead of itself. But cash is so much simpler that it's definitely worth doing for a while.
Not to turn this podcast into a company meeting, but Heather actually said we probably should consider going to accrual.
Yeah, well we're large enough now that-
Wait, Todd. How would Heather know to do that?
Oh, Heather, my wife, she's actually an accountant.
Oh, okay. Okay. That's helpful.
She's been helping us with our books lately. Anyway. So-
Joke never gets old. Never gets old.
We gotta liven this up somehow. I mean, it's about accounting and lawyers.
And she's gonna listen to this podcast and today's our anniversary, so this is a special "I love you" to my wife.
Oh, yeah. Well, happy anniversary Todd and Heather, the accountant.
Twelve years.
Of accounting.
Of marriage.
Oh, I see. Okay. I know this has been a very dry podcast, and I apologize but I tell you what. If you guys are thinking about doing this, if maybe you're already doing this and you're feeling the pain already, this stuff is absolutely vitally important-
It really is.
 to what you're taking on.
If you have a solid basis, if you've got some professionals working with you, it gives you so much more confidence and the ability to sleep at night if you know where things stand and what you need to do.
And here's the truth. Many of you are just gonna ignore us. Cause I heard this, too.
Yeah, I know what you mean.
I did, too.
It's like, "Okay, yeah. Sure. That sounds like the right thing to do. I should do that, but I'm not going to because  " for whatever reason. And then you learn and suffer like we have, and you eventually do a podcast where you tell others about it, and they ignore you.
You whistle into the wind.
And the perpetual cycle of business stupidity continues.
So, I'm gonna talk about cash flow last.
Oh yeah, please.
Make it impassioned, Ken. We want some fire here.
So, I remember my very first job that the controller  So, the controller is sort of the chief internal accountant. Not the CFO, but the kind of hands on-
Sometimes it's called the comptroller for some reason.
I think that's a British thing.
That's a British thing?
In government call them comptrollers.
So, they're the ones who would be doing this at a typical company. So, I remember he had a little sign on his desk that said, "Happiness is positive cash flow." And I remember a client saying, "Cash is king." And I remember hearing these things, but I didn't have anywhere to file them. I didn't understand what that meant, right? And I really understand it now. I really understand it now.
Where it's basically, cash flow, it's very simple. It's literally the flow of actual money in and out of your business. So, the money you pay out to payroll, the money that your clients actually pay you, not that they have on contract, but they have actually paid you. And what we found is what you think of a business is trying to do is create a profit. And that is true in the long-term. What you want to do is create the largest profit you can. However, to get there you have to keep operating as an entity. And the lifeblood of a company is cash. The lifeblood of that company is that cash, it's the food. So, if you don't get the food in time, it doesn't matter how much you were gonna get. If you run out of money and don't make payroll, something like that, that company will cease.
I think that's actually a good analogy. If you're playing Minecraft or any other game where you have a health or a hunger bar, and if you're planting fields and fields of wheat and you're waiting for it grow and you wanna go harvest it but you die of hunger before you get there, that's a problem. That's a cash flow problem. It's the ability for you to pay your bills on a day to day basis. So, yes, cash is extremely king.
Well, yeah, imagine your business is collecting Beanie Babies. And you're like, "I'm gonna buy a bunch of Beanie Babies and I'm gonna wait for them to become valuable." That's not a business. Maybe it's an investment, maybe, right? But because you don't have this cycle of things coming in on a routine basis that lets you continue to operate, you just spend a bunch of money and then you wait 20 years. Right? So, it may be profitable in the long run, but it's not really business.
So, Ken, how does that look in practical terms for Infinite Red? How do you apply that principal of cash is king?
So, yeah, for example, I was very resistant for a long time to take credit cards. This is another thing you learn once you're on the business, you're like, "Holy crap, the credit cards, they take a lot of money out."
Yeah they do.
Three percent.
Three percent.
Which is a lot on $100,000.
Yeah, exactly. On a $100,000 project, that's actually a lot of money. I think I'm a little more nuanced about it now, because what they do is they make it easier to pay. They make it easier for someone mid-level in a company to pay. They reduce that friction, and it means you get paid sooner. Getting paid a month early is worth actual-
Money.
It's actual money to you. It is worthwhile getting paid early. And so, we're a little bit more lax about how we accept that.
Why is that, Ken? Why is it when you get paid sometimes more important than any profit you made from that money?
Well, for us our biggest expense is payroll. And that happens twice a month no matter what, right? And so, having that money in hand now-
Knock on wood.
That's right. Having that money in hand now makes a real tangible difference. It's not that you don't wanna pay attention to profit at all. It's like there is this  I remember back in the original dot com boom, there was a Saturday Night Live spoof where they were like, this business was like, "We make change." Right? They're like, "We make all kinds of change. How do we make up for it? Volume." You can, in fact, cash flow yourself into the dirt if you're not paying attention.
It is interesting to see in situations where we're really monitoring our cash flow very closely, and we do some things that we know maybe they're not going to pay us for a few months and you're maybe struggling through. And then boom, it does come through. And you see that profit actually hit the books, and that is actually a cool feeling, as well. So, you do need to obviously pay attention to your profitability-
Profit matters long-term. Cash flow matters to stay in business.
That's right.
Cash flow's also power. And this is something that not everyone groks, to be honest. There's a reason that congresspeople like their job. And it's not because they may not personally be getting rich, and the reason they want to get on committees, especially the finance committee and that kind of stuff, is because what really gives you power is not wealth. Cause wealth sitting in a bank account gives no power, cause you're not transferring it. But control of cash flow gives you power. Now, in the case of Congress, congresspeople or senators, most of that's just evil. But in the case of your business, what I call power isn't necessarily a negative thing. Power means you can buy services. Power means you can give that bonus to your employees and that sort of thing. And really how much cash flow you have flowing through is how much you can do, more so than the profit.
And this is one of the things that if we can point to anything that is sort of a mission for Infinite Red, a lot of it, I think, centers around enabling remote work and the lifestyle that we all want from Infinite Red. And having the ability to pay for that and enable that through our cash flow is what you're talking about, Todd.
Yeah. So, a lot of lawyers and accountants, to be honest, suck. And that's true of all professions, whether it's doctors, programmers, or whatever. So, I know it's not like you can just Google it and find a good one of them a price that you can afford. So, I know we went through a variety of stuff, a variety of people and/or companies, and I was just curious your experience in how you find a good lawyer, a good bookkeeper, a good accountant. That sort of thing.
I needed an attorney  I forget when it was. It was during the ClearSight days. And an employee that worked for me at the time, he was my creative director, Mike [Wozezak 00:37:49], really great guy, he knew an attorney that specialized in creative agencies. And I went and met with him, and talked with him, and I really liked him. He was a former CPA, so he knew kind of the nuts and bolts of accounting, which was helpful. And he also specialized in companies like mine. I kind of brought him along to Infinite Red afterward, and we sort of just adopted him as our corporate attorney. And that was really helpful. So, it was a word of mouth thing, for sure.
I think one piece of advice that I would give to people is treat it sorta like you would a doctor. It's okay to go someone, have them do something, see if you like the way they operate, and move onto the next one. If you have to do 10 different lawyers before you find one, do it. Don't settle. Do not settle for a bad one. Keep moving until you find a good one, because I can tell you, I think our lawyer is so great that he is absolutely worth every penny that we pay him. And he's helped save us from bad situations, he's helped us get out of some scrapes, and it's totally been worth it. So, definitely treat it more like you would a doctor.
His name is Josh, and he is wonderful. I've had other lawyers at other companies and I wish I had Josh back then.
Do some networking. Talk to other people in similar positions to you. See if they have someone they can recommend. I would also say, for both, having someone who is always willing to take the time to actually explain to you what they're doing in language that you can understand. That is vital. If you feel like you're being snowed, if you feel like you don't understand what's going on, keep looking.
Yes. And there are professionals that will do that.
They do exist. They're doing a very important service for you, you want someone that you can trust implicitly, they're gonna be interested in earning that trust.
There are also specialists. So, we had looked into some legal implications surrounding some blockchain work that we were doing. And we talked to Josh, and he said, "I can't provide the insight that you're looking for. This isn't something that I have training on." And so, I did find another attorney. We didn't end up using her, because we went another direction with the service we were looking at. But she was a former FCC attorney who really understood the blockchain legal ramifications. That was helpful.
Once you start getting into specialized stuff it's a little different. But that's where having that primary counsel-
 is very helpful, because they can help translate.
Now one of the things that attorneys do is they  A good attorney will do, is they will inform you of the risks, but they will also let you make the decision. They won't try to control the process. So, one of the things that Josh will do is say, "There is a risk. I think it's a fairly small one, but here's the risk that I see. And if you feel that it's worth it from a business standpoint, then go ahead and pull the trigger." But he'll let you make the decision, and he'll give you the information to do that.
Yeah. And a not as good lawyer, will be like, "Oh, no, no. Don't do this because there's this horrible risk." Right? Guess what. Every single deal you do has risk. Every single one. And the truth of the matter is, people will sue you, not usually because they have a case, but because they're pissed, right? A lawyer who understands the limits of the legal process is also really important.
I'd like to add that some previous companies that didn't have a Josh or a good lawyer, and a couple things. And it's true of accountants, by the way. Both are true in what I'm gonna say here. So, Ken said the worst ones are ones that think everything you're doing is horrible and you shouldn't do it. I mean, they only care about risk reduction. Of course, you can reduce your risk by simply not being in business. That is horrible, for sure.
But there's another one that I think is even worse. One that's doing that on their side, and they won't even tell you to begin with. So, anything that's risky that they don't wanna  I mean, they basically just cover their ass at all times, they don't tell you anything. They only do what you tell them to do. I'm not sure how you're supposed to know what to tell them to do because you're not a lawyer, you're not an accountant. I deal with that a lot. They're just an assistant, they just do what you tell them. Well, I don't  If I could do that, I wouldn't need you. And it's actually something that  With our clients, we're really trying not to do. We don't expect our clients to know anything. That's our job, to guide them through, give them good, coherent options. Tell them the risk and reward of each option, and let them choose.
That's our job as professionals, and sadly it's kind of rare, unfortunately.
Yeah. I'm glad we're taking on this topic. Obviously, it is sort of more of a dry topic, but we can only go so far with the series. And this is our last episode of the series.
Of this first season.
The first season of the series. We are gonna do more seasons.
Unless you're in the UK, and then in which case it is the first series. They call a season a series.
Oh, funny.
A little factoid.
Yeah, I'm sure that our UK listeners will appreciate that.
That sounded snarky. We have people in the UK who love us.
Do we? Awesome?
Why you so mean, Jamon?
I didn't mean it to sound snarky.
That's why my wife, who's an accountant, doesn't like you. No, she loves you.
I like Heather. Even if she is an accountant.
No, it is good. It's  This is what  Well, we took on two topics at once and we were able to kind of lump them in, but it's something that everybody who's starting a business  And I know, cause we get feedback that there are some people who are listening to our podcast and using some of our advice as a guide as they start their businesses, this is something they need to pay attention to. And when I started my business, it took me many years to get a lawyer and many years to get a good accountant.
I did have a bookkeeper, or financial assistant, I guess, for some of those years because once I started payroll, I started getting out of my depth. I had no idea how to do that. And she was great, I could ask her for advice. She was actually trained as an accountant, as a CPA, actually. But she was, at the time, sort of semi-retired and just kind of doing her thing. Now, with Infinite Red, I feel like we have a really great attorney. We have good accountants. We're still working on figuring everything out, but having Heather help us has been really helpful, as well. It's nice to have professionals that know what they're doing.
Thanks so much. Maybe a little dry, but I think super interesting to people out there, especially when you're starting. I've actually found-
Bookmark this, like when you're actually starting this, bookmark and go listen to it again.
Yeah, it's a good reference.
If your eyes glazed over, I totally understand, but trust me.
I actually found it pretty interesting. I'm surprised how that flew by. And a podcast that flies by when you're recording it, it usually comes out pretty good. So, I would like Jamon in the close to explain what our plans are for this podcast going forward, since this is the last episode of this series/season.
Yeah, absolutely. Well, I'm really pleased with how season/series one went. And it was a ton of fun to do with you, Todd, Ken, Chris. We do plan to do more. We probably won't take a really long break. I'm hoping to maybe take a month, or at the most two, and then hit another season. This season we really wanted to kind of get our voice out there as a founder team. So, Todd, Ken and myself, as the founders of Infinite Red, we wanted to talk from our perspective on building Infinite Red.
But as Todd mentioned, I think in one of the early episodes, it wasn't just us that built Infinite Red. It was definitely a team effort. It was, in a lot of ways, our vision, but there's so much impact that our team has on what Infinite Red is. So, for season two, the intention is to bring in key team members, and have them sit around the round table, so to speak, with us. They're not gonna be interviewed. We're not gonna be talking at them. They're gonna be just involved in the conversation as we go forward. And we'll be talking about more things that are, I think, a little more specific, a little more even maybe situational, or things like that. I think it'll be interesting, from a standpoint of getting to know some of our team members. They're really great. We-
They are, they're awesome.
They're so awesome, and I'm really excited to give the world a glimpse into who else is here at Infinite Red. But it will probably be one, maybe two guests on, and just co-hosting with us. They're not going to be an interviewee. I also wanna say thank you to everybody who has listened and promoted our podcast, who submitted questions to us. It's an incredible honor to actually to be in your podcast rotation. We don't take that for granted. I know there are a ton of really good podcasts out there.
I had one person, actually, I went to lunch with Bruce Williams, a really great guy here in Portland. And he said, "Jamon, there a lot of good podcasts out there, but I think one of the things about Building Infinite Red is that you are doing an important podcast. The message needs to get out there about our remote work and the way that we do work." Which was a huge compliment. Bruce isn't the type to just hand out compliments lightly. He's a great guy.
We take it seriously. This isn't something that we're just doing as a marketing stunt, or anything like that. We really do believe in the message that we're putting out there. So, thank you all for listening.
Yes, thank you.